
pill-dispenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003c78  08003c78  00013c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d28  08003d28  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d30  08003d30  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08003da0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08003da0  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000986a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c4e  00000000  00000000  00029945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  0002b598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082f  00000000  00000000  0002c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001725b  00000000  00000000  0002c887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca06  00000000  00000000  00043ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cb4e  00000000  00000000  000504e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003460  00000000  00000000  000dd038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e0498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c60 	.word	0x08003c60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003c60 	.word	0x08003c60

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b47      	ldr	r3, [pc, #284]	; (80006c4 <MX_GPIO_Init+0x138>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a46      	ldr	r2, [pc, #280]	; (80006c4 <MX_GPIO_Init+0x138>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b44      	ldr	r3, [pc, #272]	; (80006c4 <MX_GPIO_Init+0x138>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b40      	ldr	r3, [pc, #256]	; (80006c4 <MX_GPIO_Init+0x138>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a3f      	ldr	r2, [pc, #252]	; (80006c4 <MX_GPIO_Init+0x138>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b3d      	ldr	r3, [pc, #244]	; (80006c4 <MX_GPIO_Init+0x138>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	4b39      	ldr	r3, [pc, #228]	; (80006c4 <MX_GPIO_Init+0x138>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a38      	ldr	r2, [pc, #224]	; (80006c4 <MX_GPIO_Init+0x138>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b36      	ldr	r3, [pc, #216]	; (80006c4 <MX_GPIO_Init+0x138>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	4b32      	ldr	r3, [pc, #200]	; (80006c4 <MX_GPIO_Init+0x138>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a31      	ldr	r2, [pc, #196]	; (80006c4 <MX_GPIO_Init+0x138>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b2f      	ldr	r3, [pc, #188]	; (80006c4 <MX_GPIO_Init+0x138>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2101      	movs	r1, #1
 8000616:	482c      	ldr	r0, [pc, #176]	; (80006c8 <MX_GPIO_Init+0x13c>)
 8000618:	f001 fb7c 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LED_Pin
 800061c:	2200      	movs	r2, #0
 800061e:	21f3      	movs	r1, #243	; 0xf3
 8000620:	482a      	ldr	r0, [pc, #168]	; (80006cc <MX_GPIO_Init+0x140>)
 8000622:	f001 fb77 	bl	8001d14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|D7_Pin|D6_Pin|D5_Pin
 8000626:	2200      	movs	r2, #0
 8000628:	f240 317f 	movw	r1, #895	; 0x37f
 800062c:	4828      	ldr	r0, [pc, #160]	; (80006d0 <MX_GPIO_Init+0x144>)
 800062e:	f001 fb71 	bl	8001d14 <HAL_GPIO_WritePin>
                          |D4_Pin|EN_Pin|RS_Pin|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000632:	2301      	movs	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800063a:	2302      	movs	r3, #2
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	481f      	ldr	r0, [pc, #124]	; (80006c8 <MX_GPIO_Init+0x13c>)
 800064a:	f001 f9c7 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PAPin
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LED_Pin
 800064e:	23f3      	movs	r3, #243	; 0xf3
 8000650:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	4819      	ldr	r0, [pc, #100]	; (80006cc <MX_GPIO_Init+0x140>)
 8000666:	f001 f9b9 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin PBPin PBPin
                           PBPin PBPin PBPin PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|D7_Pin|D6_Pin|D5_Pin
 800066a:	f240 337f 	movw	r3, #895	; 0x37f
 800066e:	617b      	str	r3, [r7, #20]
                          |D4_Pin|EN_Pin|RS_Pin|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	4813      	ldr	r0, [pc, #76]	; (80006d0 <MX_GPIO_Init+0x144>)
 8000684:	f001 f9aa 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Left_Button_Pin|Right_Button_Pin;
 8000688:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000692:	2301      	movs	r3, #1
 8000694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	480a      	ldr	r0, [pc, #40]	; (80006c8 <MX_GPIO_Init+0x13c>)
 800069e:	f001 f99d 	bl	80019dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rightmost_Button_Pin;
 80006a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rightmost_Button_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_GPIO_Init+0x140>)
 80006b8:	f001 f990 	bl	80019dc <HAL_GPIO_Init>

}
 80006bc:	bf00      	nop
 80006be:	3728      	adds	r7, #40	; 0x28
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020400 	.word	0x40020400

080006d4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80006e2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80006e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80006ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80006ee:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80006f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006f2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80006f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80006f6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f80e 	bl	800072a <Lcd_init>

	return lcd;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	461d      	mov	r5, r3
 8000712:	f107 0410 	add.w	r4, r7, #16
 8000716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800071a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800071e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	3728      	adds	r7, #40	; 0x28
 8000726:	46bd      	mov	sp, r7
 8000728:	bdb0      	pop	{r4, r5, r7, pc}

0800072a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	7d9b      	ldrb	r3, [r3, #22]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10c      	bne.n	8000754 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800073a:	2133      	movs	r1, #51	; 0x33
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 f87b 	bl	8000838 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000742:	2132      	movs	r1, #50	; 0x32
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f877 	bl	8000838 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800074a:	2128      	movs	r1, #40	; 0x28
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f873 	bl	8000838 <lcd_write_command>
 8000752:	e003      	b.n	800075c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000754:	2138      	movs	r1, #56	; 0x38
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 f86e 	bl	8000838 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800075c:	2101      	movs	r1, #1
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f000 f86a 	bl	8000838 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000764:	210c      	movs	r1, #12
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 f866 	bl	8000838 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800076c:	2106      	movs	r1, #6
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f862 	bl	8000838 <lcd_write_command>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	4906      	ldr	r1, [pc, #24]	; (80007a8 <Lcd_int+0x2c>)
 800078e:	4618      	mov	r0, r3
 8000790:	f002 fc1c 	bl	8002fcc <siprintf>

	Lcd_string(lcd, buffer);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f806 	bl	80007ac <Lcd_string>
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	08003c78 	.word	0x08003c78

080007ac <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	e00a      	b.n	80007d2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f000 f864 	bl	8000894 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	3301      	adds	r3, #1
 80007d0:	73fb      	strb	r3, [r7, #15]
 80007d2:	7bfc      	ldrb	r4, [r7, #15]
 80007d4:	6838      	ldr	r0, [r7, #0]
 80007d6:	f7ff fd03 	bl	80001e0 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	429c      	cmp	r4, r3
 80007de:	d3ed      	bcc.n	80007bc <Lcd_string+0x10>
	}
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd90      	pop	{r4, r7, pc}
	...

080007ec <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
 80007f8:	4613      	mov	r3, r2
 80007fa:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	4a07      	ldr	r2, [pc, #28]	; (800081c <Lcd_cursor+0x30>)
 8000800:	5cd2      	ldrb	r2, [r2, r3]
 8000802:	78bb      	ldrb	r3, [r7, #2]
 8000804:	4413      	add	r3, r2
 8000806:	b2db      	uxtb	r3, r3
 8000808:	3b80      	subs	r3, #128	; 0x80
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4619      	mov	r1, r3
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 f812 	bl	8000838 <lcd_write_command>
	#endif
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	08003ce0 	.word	0x08003ce0

08000820 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000828:	2101      	movs	r1, #1
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f000 f804 	bl	8000838 <lcd_write_command>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6898      	ldr	r0, [r3, #8]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	899b      	ldrh	r3, [r3, #12]
 800084c:	2200      	movs	r2, #0
 800084e:	4619      	mov	r1, r3
 8000850:	f001 fa60 	bl	8001d14 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7d9b      	ldrb	r3, [r3, #22]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d111      	bne.n	8000880 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	091b      	lsrs	r3, r3, #4
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2204      	movs	r2, #4
 8000864:	4619      	mov	r1, r3
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f000 f842 	bl	80008f0 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2204      	movs	r2, #4
 8000876:	4619      	mov	r1, r3
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f000 f839 	bl	80008f0 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800087e:	e005      	b.n	800088c <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	2208      	movs	r2, #8
 8000884:	4619      	mov	r1, r3
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f000 f832 	bl	80008f0 <lcd_write>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6898      	ldr	r0, [r3, #8]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	899b      	ldrh	r3, [r3, #12]
 80008a8:	2201      	movs	r2, #1
 80008aa:	4619      	mov	r1, r3
 80008ac:	f001 fa32 	bl	8001d14 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	7d9b      	ldrb	r3, [r3, #22]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d111      	bne.n	80008dc <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	091b      	lsrs	r3, r3, #4
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2204      	movs	r2, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f000 f814 	bl	80008f0 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	2204      	movs	r2, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 f80b 	bl	80008f0 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80008da:	e005      	b.n	80008e8 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	2208      	movs	r2, #8
 80008e0:	4619      	mov	r1, r3
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f000 f804 	bl	80008f0 <lcd_write>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
 80008fc:	4613      	mov	r3, r2
 80008fe:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e019      	b.n	800093a <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	4413      	add	r3, r2
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	8819      	ldrh	r1, [r3, #0]
 800091e:	78fa      	ldrb	r2, [r7, #3]
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	fa42 f303 	asr.w	r3, r2, r3
 8000926:	b2db      	uxtb	r3, r3
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	b2db      	uxtb	r3, r3
 800092e:	461a      	mov	r2, r3
 8000930:	f001 f9f0 	bl	8001d14 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	3301      	adds	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	78bb      	ldrb	r3, [r7, #2]
 800093e:	429a      	cmp	r2, r3
 8000940:	d3e1      	bcc.n	8000906 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6918      	ldr	r0, [r3, #16]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	8a9b      	ldrh	r3, [r3, #20]
 800094a:	2201      	movs	r2, #1
 800094c:	4619      	mov	r1, r3
 800094e:	f001 f9e1 	bl	8001d14 <HAL_GPIO_WritePin>
	DELAY(1);
 8000952:	2001      	movs	r0, #1
 8000954:	f000 ff38 	bl	80017c8 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6918      	ldr	r0, [r3, #16]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	8a9b      	ldrh	r3, [r3, #20]
 8000960:	2200      	movs	r2, #0
 8000962:	4619      	mov	r1, r3
 8000964:	f001 f9d6 	bl	8001d14 <HAL_GPIO_WritePin>
}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <convertTo24HourFormat>:
	uint16_t IN3_PIN;
	uint16_t IN4_PIN;
};

// Function to convert minutes to 24-hour time format and return as a string
char* convertTo24HourFormat(int minutes) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
    int hours = minutes / 60;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <convertTo24HourFormat+0x68>)
 800097c:	fb82 1203 	smull	r1, r2, r2, r3
 8000980:	441a      	add	r2, r3
 8000982:	1152      	asrs	r2, r2, #5
 8000984:	17db      	asrs	r3, r3, #31
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	617b      	str	r3, [r7, #20]
    int mins = minutes % 60;
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <convertTo24HourFormat+0x68>)
 800098e:	fb83 1302 	smull	r1, r3, r3, r2
 8000992:	4413      	add	r3, r2
 8000994:	1159      	asrs	r1, r3, #5
 8000996:	17d3      	asrs	r3, r2, #31
 8000998:	1ac9      	subs	r1, r1, r3
 800099a:	460b      	mov	r3, r1
 800099c:	011b      	lsls	r3, r3, #4
 800099e:	1a5b      	subs	r3, r3, r1
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	1ad3      	subs	r3, r2, r3
 80009a4:	613b      	str	r3, [r7, #16]

    // Allocate memory for the result string
    char* result = (char*)malloc(6); // HH:MM\0
 80009a6:	2006      	movs	r0, #6
 80009a8:	f002 f93e 	bl	8002c28 <malloc>
 80009ac:	4603      	mov	r3, r0
 80009ae:	60fb      	str	r3, [r7, #12]

    // Check if memory allocation was successful
    if (result == NULL) {
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d105      	bne.n	80009c2 <convertTo24HourFormat+0x52>
        printf("Memory allocation failed.\n");
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <convertTo24HourFormat+0x6c>)
 80009b8:	f002 fb00 	bl	8002fbc <puts>
        exit(1); // Exit with an error code
 80009bc:	2001      	movs	r0, #1
 80009be:	f002 f921 	bl	8002c04 <exit>
    }

    // Format the result string
    sprintf(result, "%02d:%02d", hours, mins);
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	4906      	ldr	r1, [pc, #24]	; (80009e0 <convertTo24HourFormat+0x70>)
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f002 faff 	bl	8002fcc <siprintf>

    return result;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	88888889 	.word	0x88888889
 80009dc:	08003c7c 	.word	0x08003c7c
 80009e0:	08003c98 	.word	0x08003c98

080009e4 <microDelay>:

void microDelay (uint16_t delay)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <microDelay+0x30>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim2) < delay);
 80009f6:	bf00      	nop
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <microDelay+0x30>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d3f9      	bcc.n	80009f8 <microDelay+0x14>
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000088 	.word	0x20000088

08000a18 <stepCCV>:

void stepCCV (int steps, uint16_t delay, struct Motor m) // CCV - Counter Clockwise
{
 8000a18:	b082      	sub	sp, #8
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b084      	sub	sp, #16
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	f107 0018 	add.w	r0, r7, #24
 8000a26:	e880 000c 	stmia.w	r0, {r2, r3}
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	807b      	strh	r3, [r7, #2]
  for(int x=0; x<steps; x=x+1)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	e0e2      	b.n	8000bfa <stepCCV+0x1e2>
  {
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_SET);   // IN1
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 f96a 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_RESET); // IN2
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000a44:	2200      	movs	r2, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 f964 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_RESET); // IN3
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000a50:	2200      	movs	r2, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 f95e 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_RESET); // IN4
 8000a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 f958 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000a64:	887b      	ldrh	r3, [r7, #2]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffbc 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_SET);   // IN1
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000a70:	2201      	movs	r2, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f94e 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_SET);   // IN2
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 f948 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_RESET); // IN3
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 f942 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_RESET); // IN4
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000a94:	2200      	movs	r2, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 f93c 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000a9c:	887b      	ldrh	r3, [r7, #2]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ffa0 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_RESET); // IN1
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 f932 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_SET);   // IN2
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 f92c 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_RESET); // IN3
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 f926 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_RESET); // IN4
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000acc:	2200      	movs	r2, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f920 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000ad4:	887b      	ldrh	r3, [r7, #2]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff84 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_RESET); // IN1
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 f916 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_SET);   // IN2
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000aec:	2201      	movs	r2, #1
 8000aee:	4618      	mov	r0, r3
 8000af0:	f001 f910 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_SET);   // IN3
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000af8:	2201      	movs	r2, #1
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 f90a 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_RESET); // IN4
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000b04:	2200      	movs	r2, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 f904 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000b0c:	887b      	ldrh	r3, [r7, #2]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ff68 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_RESET); // IN1
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 f8fa 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_RESET); // IN2
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000b24:	2200      	movs	r2, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 f8f4 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_SET);   // IN3
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
 8000b2e:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000b30:	2201      	movs	r2, #1
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 f8ee 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_RESET); // IN4
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f8e8 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff4c 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_RESET); // IN1
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000b50:	2200      	movs	r2, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 f8de 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_RESET); // IN2
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 f8d8 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_SET);   // IN3
 8000b64:	6a3b      	ldr	r3, [r7, #32]
 8000b66:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f8d2 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_SET);   // IN4
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000b74:	2201      	movs	r2, #1
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 f8cc 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000b7c:	887b      	ldrh	r3, [r7, #2]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff30 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_RESET); // IN1
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 f8c2 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_RESET); // IN2
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000b94:	2200      	movs	r2, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 f8bc 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_RESET); // IN3
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 f8b6 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_SET);   // IN4
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000bac:	2201      	movs	r2, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 f8b0 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000bb4:	887b      	ldrh	r3, [r7, #2]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff14 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_SET);   // IN1
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 f8a6 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_RESET); // IN2
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000bcc:	2200      	movs	r2, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 f8a0 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_RESET); // IN3
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 f89a 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_SET);   // IN4
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000be4:	2201      	movs	r2, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 f894 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fef8 	bl	80009e4 <microDelay>
  for(int x=0; x<steps; x=x+1)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	f6ff af18 	blt.w	8000a34 <stepCCV+0x1c>
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c10:	b002      	add	sp, #8
 8000c12:	4770      	bx	lr

08000c14 <stepCV>:

void stepCV (int steps, uint16_t delay, struct Motor m) // CV - Clockwise
{
 8000c14:	b082      	sub	sp, #8
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b084      	sub	sp, #16
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	f107 0018 	add.w	r0, r7, #24
 8000c22:	e880 000c 	stmia.w	r0, {r2, r3}
 8000c26:	460b      	mov	r3, r1
 8000c28:	807b      	strh	r3, [r7, #2]
  for(int x=0; x<steps; x=x+1)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	e0e2      	b.n	8000df6 <stepCV+0x1e2>
  {
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_SET);   // IN1
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000c34:	2201      	movs	r2, #1
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 f86c 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_RESET); // IN2
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000c40:	2200      	movs	r2, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 f866 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_RESET); // IN3
 8000c48:	6a3b      	ldr	r3, [r7, #32]
 8000c4a:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 f860 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_SET);   // IN4
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 f85a 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff febe 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_RESET); // IN1
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 f850 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_RESET); // IN2
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 f84a 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_RESET); // IN3
 8000c80:	6a3b      	ldr	r3, [r7, #32]
 8000c82:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000c84:	2200      	movs	r2, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 f844 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_SET);   // IN4
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000c90:	2201      	movs	r2, #1
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 f83e 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fea2 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_RESET); // IN1
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 f834 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_RESET); // IN2
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 f82e 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_SET);   // IN3
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 f828 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_SET);   // IN4
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 f822 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fe86 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_RESET); // IN1
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 f818 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_RESET); // IN2
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 f812 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_SET);   // IN3
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 f80c 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_RESET); // IN4
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000d00:	2200      	movs	r2, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 f806 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe6a 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_RESET); // IN1
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000d14:	2200      	movs	r2, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fffc 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_SET);   // IN2
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000d20:	2201      	movs	r2, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fff6 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_SET);   // IN3
 8000d28:	6a3b      	ldr	r3, [r7, #32]
 8000d2a:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fff0 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_RESET); // IN4
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 ffea 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fe4e 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_RESET); // IN1
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 ffe0 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_SET);   // IN2
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 ffda 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_RESET); // IN3
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000d64:	2200      	movs	r2, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 ffd4 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_RESET); // IN4
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000d70:	2200      	movs	r2, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 ffce 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fe32 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_SET);   // IN1
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000d84:	2201      	movs	r2, #1
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 ffc4 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_SET);   // IN2
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000d90:	2201      	movs	r2, #1
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 ffbe 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_RESET); // IN3
 8000d98:	6a3b      	ldr	r3, [r7, #32]
 8000d9a:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 ffb8 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_RESET); // IN4
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000da8:	2200      	movs	r2, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 ffb2 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000db0:	887b      	ldrh	r3, [r7, #2]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fe16 	bl	80009e4 <microDelay>
	  HAL_GPIO_WritePin(m.IN1_PORT, m.IN1_PIN, GPIO_PIN_SET);   // IN1
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 ffa8 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN2_PORT, m.IN2_PIN, GPIO_PIN_RESET); // IN2
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 ffa2 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN3_PORT, m.IN3_PIN, GPIO_PIN_RESET); // IN3
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 ff9c 	bl	8001d14 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(m.IN4_PORT, m.IN4_PIN, GPIO_PIN_RESET); // IN4
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8000de0:	2200      	movs	r2, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 ff96 	bl	8001d14 <HAL_GPIO_WritePin>
	  microDelay(delay);
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fdfa 	bl	80009e4 <microDelay>
  for(int x=0; x<steps; x=x+1)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3301      	adds	r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	f6ff af18 	blt.w	8000c30 <stepCV+0x1c>

  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e0c:	b002      	add	sp, #8
 8000e0e:	4770      	bx	lr

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b0b4      	sub	sp, #208	; 0xd0
 8000e14:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e16:	f000 fc65 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1a:	f000 fa3b 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1e:	f7ff fbb5 	bl	800058c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e22:	f000 fbc9 	bl	80015b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000e26:	48cc      	ldr	r0, [pc, #816]	; (8001158 <main+0x348>)
 8000e28:	f001 fc42 	bl	80026b0 <HAL_TIM_Base_Start>

  struct Motor m1, m2;
  m1.IN1_PIN = GPIO_PIN_0;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
  m1.IN1_PORT = GPIOA;
 8000e32:	4bca      	ldr	r3, [pc, #808]	; (800115c <main+0x34c>)
 8000e34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  m1.IN2_PIN = GPIO_PIN_1;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
  m1.IN2_PORT = GPIOA;
 8000e3e:	4bc7      	ldr	r3, [pc, #796]	; (800115c <main+0x34c>)
 8000e40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  m1.IN3_PIN = GPIO_PIN_4;
 8000e44:	2310      	movs	r3, #16
 8000e46:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  m1.IN3_PORT = GPIOA;
 8000e4a:	4bc4      	ldr	r3, [pc, #784]	; (800115c <main+0x34c>)
 8000e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  m1.IN4_PIN = GPIO_PIN_0;
 8000e50:	2301      	movs	r3, #1
 8000e52:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
  m1.IN4_PORT = GPIOB;
 8000e56:	4bc2      	ldr	r3, [pc, #776]	; (8001160 <main+0x350>)
 8000e58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  m2.IN1_PIN = GPIO_PIN_8;
 8000e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e60:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
  m2.IN1_PORT = GPIOB;
 8000e64:	4bbe      	ldr	r3, [pc, #760]	; (8001160 <main+0x350>)
 8000e66:	67bb      	str	r3, [r7, #120]	; 0x78
  m2.IN2_PIN = GPIO_PIN_9;
 8000e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
  m2.IN2_PORT = GPIOB;
 8000e70:	4bbb      	ldr	r3, [pc, #748]	; (8001160 <main+0x350>)
 8000e72:	67fb      	str	r3, [r7, #124]	; 0x7c
  m2.IN3_PIN = GPIO_PIN_6;
 8000e74:	2340      	movs	r3, #64	; 0x40
 8000e76:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  m2.IN3_PORT = GPIOA;
 8000e7a:	4bb8      	ldr	r3, [pc, #736]	; (800115c <main+0x34c>)
 8000e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  m2.IN4_PIN = GPIO_PIN_7;
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  m2.IN4_PORT = GPIOA;
 8000e86:	4bb5      	ldr	r3, [pc, #724]	; (800115c <main+0x34c>)
 8000e88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  unsigned int pill_count = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  unsigned int dispense_time = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  unsigned int input_state = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

  Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
 8000e9e:	4bb1      	ldr	r3, [pc, #708]	; (8001164 <main+0x354>)
 8000ea0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000ea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8000eaa:	4aaf      	ldr	r2, [pc, #700]	; (8001168 <main+0x358>)
 8000eac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb4:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000eb8:	4638      	mov	r0, r7
 8000eba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ebe:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	9303      	str	r3, [sp, #12]
 8000ec6:	2320      	movs	r3, #32
 8000ec8:	9302      	str	r3, [sp, #8]
 8000eca:	4ba5      	ldr	r3, [pc, #660]	; (8001160 <main+0x350>)
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	2340      	movs	r3, #64	; 0x40
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	4ba3      	ldr	r3, [pc, #652]	; (8001160 <main+0x350>)
 8000ed4:	f7ff fbfe 	bl	80006d4 <Lcd_create>
 8000ed8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000edc:	463d      	mov	r5, r7
 8000ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ee6:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_cursor(&lcd, 0, 1);
 8000eea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fc7a 	bl	80007ec <Lcd_cursor>
  Lcd_string(&lcd, "# to dispense:");
 8000ef8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000efc:	499b      	ldr	r1, [pc, #620]	; (800116c <main+0x35c>)
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fc54 	bl	80007ac <Lcd_string>
  Lcd_cursor(&lcd, 1, 7);
 8000f04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f08:	2207      	movs	r2, #7
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fc6d 	bl	80007ec <Lcd_cursor>
  Lcd_int(&lcd, pill_count);
 8000f12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fc2d 	bl	800077c <Lcd_int>

  struct Button buttons[3];
  buttons[0].port = Left_Button_GPIO_Port;
 8000f22:	4b93      	ldr	r3, [pc, #588]	; (8001170 <main+0x360>)
 8000f24:	61bb      	str	r3, [r7, #24]
  buttons[0].pin = Left_Button_Pin;
 8000f26:	2340      	movs	r3, #64	; 0x40
 8000f28:	83bb      	strh	r3, [r7, #28]
  buttons[1].port = Right_Button_GPIO_Port;
 8000f2a:	4b91      	ldr	r3, [pc, #580]	; (8001170 <main+0x360>)
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  buttons[1].pin = Right_Button_Pin;
 8000f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f32:	85bb      	strh	r3, [r7, #44]	; 0x2c
  buttons[2].port = Rightmost_Button_GPIO_Port;
 8000f34:	4b89      	ldr	r3, [pc, #548]	; (800115c <main+0x34c>)
 8000f36:	63bb      	str	r3, [r7, #56]	; 0x38
  buttons[2].pin = Rightmost_Button_Pin;
 8000f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  for (int i = 0; i < 3; i++){
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000f44:	e014      	b.n	8000f70 <main+0x160>
	  buttons[i].time_pressed = 0;
 8000f46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	33c0      	adds	r3, #192	; 0xc0
 8000f4e:	443b      	add	r3, r7
 8000f50:	3ba0      	subs	r3, #160	; 0xa0
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
	  buttons[i].state = GPIO_PIN_SET;
 8000f56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	33c0      	adds	r3, #192	; 0xc0
 8000f5e:	443b      	add	r3, r7
 8000f60:	3b9c      	subs	r3, #156	; 0x9c
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 3; i++){
 8000f66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000f70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	dde6      	ble.n	8000f46 <main+0x136>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for (int i = 0; i < 3; i++){
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000f7e:	e181      	b.n	8001284 <main+0x474>
		  if(HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin) == GPIO_PIN_RESET){
 8000f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	33c0      	adds	r3, #192	; 0xc0
 8000f88:	443b      	add	r3, r7
 8000f8a:	3ba8      	subs	r3, #168	; 0xa8
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	33c0      	adds	r3, #192	; 0xc0
 8000f96:	443b      	add	r3, r7
 8000f98:	3ba4      	subs	r3, #164	; 0xa4
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f000 fea0 	bl	8001ce4 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d11c      	bne.n	8000fe4 <main+0x1d4>
			  if(buttons[i].state == GPIO_PIN_SET){
 8000faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	33c0      	adds	r3, #192	; 0xc0
 8000fb2:	443b      	add	r3, r7
 8000fb4:	3b9c      	subs	r3, #156	; 0x9c
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	f040 815e 	bne.w	800127a <main+0x46a>
				  buttons[i].time_pressed = HAL_GetTick();
 8000fbe:	f000 fbf7 	bl	80017b0 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	33c0      	adds	r3, #192	; 0xc0
 8000fcc:	443b      	add	r3, r7
 8000fce:	3ba0      	subs	r3, #160	; 0xa0
 8000fd0:	601a      	str	r2, [r3, #0]
				  buttons[i].state = GPIO_PIN_RESET;
 8000fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	33c0      	adds	r3, #192	; 0xc0
 8000fda:	443b      	add	r3, r7
 8000fdc:	3b9c      	subs	r3, #156	; 0x9c
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	e14a      	b.n	800127a <main+0x46a>
			  }
		  }
		  else{
			  if(buttons[i].state == GPIO_PIN_RESET){
 8000fe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	33c0      	adds	r3, #192	; 0xc0
 8000fec:	443b      	add	r3, r7
 8000fee:	3b9c      	subs	r3, #156	; 0x9c
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f040 8141 	bne.w	800127a <main+0x46a>
				  if(HAL_GetTick() - buttons[i].time_pressed < 750){ //held less than 3 seconds
 8000ff8:	f000 fbda 	bl	80017b0 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	33c0      	adds	r3, #192	; 0xc0
 8001006:	443b      	add	r3, r7
 8001008:	3ba0      	subs	r3, #160	; 0xa0
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001012:	4293      	cmp	r3, r2
 8001014:	f200 80f7 	bhi.w	8001206 <main+0x3f6>
					  if(input_state == 0){
 8001018:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800101c:	2b00      	cmp	r3, #0
 800101e:	f040 80ab 	bne.w	8001178 <main+0x368>
						  if(i == 0){
 8001022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001026:	2b00      	cmp	r3, #0
 8001028:	d129      	bne.n	800107e <main+0x26e>
							  if(pill_count == 10){
 800102a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800102e:	2b0a      	cmp	r3, #10
 8001030:	d10c      	bne.n	800104c <main+0x23c>
								  Lcd_cursor(&lcd, 1, 8);
 8001032:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001036:	2208      	movs	r2, #8
 8001038:	2101      	movs	r1, #1
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fbd6 	bl	80007ec <Lcd_cursor>
								  Lcd_string(&lcd, " ");
 8001040:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001044:	494b      	ldr	r1, [pc, #300]	; (8001174 <main+0x364>)
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fbb0 	bl	80007ac <Lcd_string>
							  }
							  if(pill_count > 0) pill_count--;
 800104c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001050:	2b00      	cmp	r3, #0
 8001052:	d004      	beq.n	800105e <main+0x24e>
 8001054:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001058:	3b01      	subs	r3, #1
 800105a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
							  Lcd_cursor(&lcd, 1, 7);
 800105e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001062:	2207      	movs	r2, #7
 8001064:	2101      	movs	r1, #1
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fbc0 	bl	80007ec <Lcd_cursor>
							  Lcd_int(&lcd, pill_count);
 800106c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001070:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fb80 	bl	800077c <Lcd_int>
 800107c:	e0f5      	b.n	800126a <main+0x45a>
						  }
						  else if(i == 1){
 800107e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001082:	2b01      	cmp	r3, #1
 8001084:	d118      	bne.n	80010b8 <main+0x2a8>
							  if(pill_count < 10) pill_count++;
 8001086:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800108a:	2b09      	cmp	r3, #9
 800108c:	d804      	bhi.n	8001098 <main+0x288>
 800108e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001092:	3301      	adds	r3, #1
 8001094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
							  Lcd_cursor(&lcd, 1, 7);
 8001098:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800109c:	2207      	movs	r2, #7
 800109e:	2101      	movs	r1, #1
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fba3 	bl	80007ec <Lcd_cursor>
							  Lcd_int(&lcd, pill_count);
 80010a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80010aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fb63 	bl	800077c <Lcd_int>
 80010b6:	e0d8      	b.n	800126a <main+0x45a>
						  }
						  else{
							  for(int i = 0; i < pill_count; i++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80010be:	e043      	b.n	8001148 <main+0x338>
								  stepCCV(256, 1000, m1);  // 256 half revolution
 80010c0:	466c      	mov	r4, sp
 80010c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010cc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80010d0:	cb0c      	ldmia	r3, {r2, r3}
 80010d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010da:	f7ff fc9d 	bl	8000a18 <stepCCV>
								  stepCCV(256, 1000, m2);
 80010de:	466c      	mov	r4, sp
 80010e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010ee:	cb0c      	ldmia	r3, {r2, r3}
 80010f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010f8:	f7ff fc8e 	bl	8000a18 <stepCCV>
								  HAL_Delay(100);
 80010fc:	2064      	movs	r0, #100	; 0x64
 80010fe:	f000 fb63 	bl	80017c8 <HAL_Delay>
								  stepCV(256, 1000, m2);
 8001102:	466c      	mov	r4, sp
 8001104:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800110e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001112:	cb0c      	ldmia	r3, {r2, r3}
 8001114:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001118:	f44f 7080 	mov.w	r0, #256	; 0x100
 800111c:	f7ff fd7a 	bl	8000c14 <stepCV>
								  stepCV(256, 1000, m1);
 8001120:	466c      	mov	r4, sp
 8001122:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800112c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001130:	cb0c      	ldmia	r3, {r2, r3}
 8001132:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001136:	f44f 7080 	mov.w	r0, #256	; 0x100
 800113a:	f7ff fd6b 	bl	8000c14 <stepCV>
							  for(int i = 0; i < pill_count; i++){
 800113e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001142:	3301      	adds	r3, #1
 8001144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800114c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001150:	429a      	cmp	r2, r3
 8001152:	d8b5      	bhi.n	80010c0 <main+0x2b0>
 8001154:	e089      	b.n	800126a <main+0x45a>
 8001156:	bf00      	nop
 8001158:	20000088 	.word	0x20000088
 800115c:	40020000 	.word	0x40020000
 8001160:	40020400 	.word	0x40020400
 8001164:	08003cc8 	.word	0x08003cc8
 8001168:	08003cd8 	.word	0x08003cd8
 800116c:	08003ca4 	.word	0x08003ca4
 8001170:	40020800 	.word	0x40020800
 8001174:	08003cb4 	.word	0x08003cb4
							  }
						  }
					  }
					  else if(input_state == 1){
 8001178:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800117c:	2b01      	cmp	r3, #1
 800117e:	d174      	bne.n	800126a <main+0x45a>
						  if(i == 0){
 8001180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001184:	2b00      	cmp	r3, #0
 8001186:	d11c      	bne.n	80011c2 <main+0x3b2>
							  if(dispense_time > 0) dispense_time -= 30;
 8001188:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800118c:	2b00      	cmp	r3, #0
 800118e:	d004      	beq.n	800119a <main+0x38a>
 8001190:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001194:	3b1e      	subs	r3, #30
 8001196:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
							  Lcd_cursor(&lcd, 1, 5);
 800119a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800119e:	2205      	movs	r2, #5
 80011a0:	2101      	movs	r1, #1
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fb22 	bl	80007ec <Lcd_cursor>
							  Lcd_string(&lcd, convertTo24HourFormat(dispense_time));
 80011a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fbdf 	bl	8000970 <convertTo24HourFormat>
 80011b2:	4602      	mov	r2, r0
 80011b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff faf6 	bl	80007ac <Lcd_string>
 80011c0:	e053      	b.n	800126a <main+0x45a>
						  }
						  else if(i == 1){
 80011c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d14f      	bne.n	800126a <main+0x45a>
							  if(dispense_time < 1440) dispense_time += 30;
 80011ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011ce:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80011d2:	d204      	bcs.n	80011de <main+0x3ce>
 80011d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011d8:	331e      	adds	r3, #30
 80011da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
							  Lcd_cursor(&lcd, 1, 5);
 80011de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011e2:	2205      	movs	r2, #5
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fb00 	bl	80007ec <Lcd_cursor>
							  Lcd_string(&lcd, convertTo24HourFormat(dispense_time));
 80011ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fbbd 	bl	8000970 <convertTo24HourFormat>
 80011f6:	4602      	mov	r2, r0
 80011f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fad4 	bl	80007ac <Lcd_string>
 8001204:	e031      	b.n	800126a <main+0x45a>
						  }
					  }
				  }
				  else{
					  if(input_state == 0 && i == 2){
 8001206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800120a:	2b00      	cmp	r3, #0
 800120c:	d12d      	bne.n	800126a <main+0x45a>
 800120e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001212:	2b02      	cmp	r3, #2
 8001214:	d129      	bne.n	800126a <main+0x45a>
						  input_state++;
 8001216:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800121a:	3301      	adds	r3, #1
 800121c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
						  Lcd_clear(&lcd);
 8001220:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fafb 	bl	8000820 <Lcd_clear>
						  Lcd_cursor(&lcd, 0, 1);
 800122a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800122e:	2201      	movs	r2, #1
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fada 	bl	80007ec <Lcd_cursor>
						  Lcd_string(&lcd, "Dispense time:");
 8001238:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800123c:	4914      	ldr	r1, [pc, #80]	; (8001290 <main+0x480>)
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fab4 	bl	80007ac <Lcd_string>
						  Lcd_cursor(&lcd, 1, 5);
 8001244:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001248:	2205      	movs	r2, #5
 800124a:	2101      	movs	r1, #1
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff facd 	bl	80007ec <Lcd_cursor>
						  Lcd_string(&lcd, convertTo24HourFormat(dispense_time));
 8001252:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fb8a 	bl	8000970 <convertTo24HourFormat>
 800125c:	4602      	mov	r2, r0
 800125e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff faa1 	bl	80007ac <Lcd_string>
					  }
				  }
				  buttons[i].state = GPIO_PIN_SET;
 800126a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	33c0      	adds	r3, #192	; 0xc0
 8001272:	443b      	add	r3, r7
 8001274:	3b9c      	subs	r3, #156	; 0x9c
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < 3; i++){
 800127a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800127e:	3301      	adds	r3, #1
 8001280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001288:	2b02      	cmp	r3, #2
 800128a:	f77f ae79 	ble.w	8000f80 <main+0x170>
 800128e:	e673      	b.n	8000f78 <main+0x168>
 8001290:	08003cb8 	.word	0x08003cb8

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b094      	sub	sp, #80	; 0x50
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	2230      	movs	r2, #48	; 0x30
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 ff8a 	bl	80031bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	4b28      	ldr	r3, [pc, #160]	; (8001360 <SystemClock_Config+0xcc>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	4a27      	ldr	r2, [pc, #156]	; (8001360 <SystemClock_Config+0xcc>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c6:	6413      	str	r3, [r2, #64]	; 0x40
 80012c8:	4b25      	ldr	r3, [pc, #148]	; (8001360 <SystemClock_Config+0xcc>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <SystemClock_Config+0xd0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012e0:	4a20      	ldr	r2, [pc, #128]	; (8001364 <SystemClock_Config+0xd0>)
 80012e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <SystemClock_Config+0xd0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fc:	2310      	movs	r3, #16
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001300:	2302      	movs	r3, #2
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001304:	2300      	movs	r3, #0
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001308:	2308      	movs	r3, #8
 800130a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800130c:	2348      	movs	r3, #72	; 0x48
 800130e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001310:	2302      	movs	r3, #2
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001314:	2307      	movs	r3, #7
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fd13 	bl	8001d48 <HAL_RCC_OscConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001328:	f000 f81e 	bl	8001368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132c:	230f      	movs	r3, #15
 800132e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001330:	2302      	movs	r3, #2
 8001332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	2102      	movs	r1, #2
 8001348:	4618      	mov	r0, r3
 800134a:	f000 ff75 	bl	8002238 <HAL_RCC_ClockConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001354:	f000 f808 	bl	8001368 <Error_Handler>
  }
}
 8001358:	bf00      	nop
 800135a:	3750      	adds	r7, #80	; 0x50
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40007000 	.word	0x40007000

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001370:	e7fe      	b.n	8001370 <Error_Handler+0x8>
	...

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <HAL_MspInit+0x4c>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x4c>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013b2:	2007      	movs	r0, #7
 80013b4:	f000 fade 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <NMI_Handler+0x4>

080013ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <MemManage_Handler+0x4>

080013d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 f9ba 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001422:	f001 ff29 	bl	8003278 <__errno>
 8001426:	4603      	mov	r3, r0
 8001428:	2216      	movs	r2, #22
 800142a:	601a      	str	r2, [r3, #0]
  return -1;
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <_exit>:

void _exit (int status)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ffe7 	bl	8001418 <_kill>
  while (1) {}    /* Make sure we hang here */
 800144a:	e7fe      	b.n	800144a <_exit+0x12>

0800144c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	e00a      	b.n	8001474 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800145e:	f3af 8000 	nop.w
 8001462:	4601      	mov	r1, r0
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	60ba      	str	r2, [r7, #8]
 800146a:	b2ca      	uxtb	r2, r1
 800146c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbf0      	blt.n	800145e <_read+0x12>
  }

  return len;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	e009      	b.n	80014ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf1      	blt.n	8001498 <_write+0x12>
  }
  return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_close>:

int _close(int file)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e6:	605a      	str	r2, [r3, #4]
  return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_isatty>:

int _isatty(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001530:	4a14      	ldr	r2, [pc, #80]	; (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001558:	f001 fe8e 	bl	8003278 <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <_sbrk+0x64>)
 8001578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20018000 	.word	0x20018000
 8001588:	00000400 	.word	0x00000400
 800158c:	20000084 	.word	0x20000084
 8001590:	20000220 	.word	0x20000220

08001594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_TIM2_Init+0x94>)
 80015d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_TIM2_Init+0x94>)
 80015de:	2247      	movs	r2, #71	; 0x47
 80015e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_TIM2_Init+0x94>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_TIM2_Init+0x94>)
 80015ea:	f04f 32ff 	mov.w	r2, #4294967295
 80015ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <MX_TIM2_Init+0x94>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_TIM2_Init+0x94>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015fc:	4813      	ldr	r0, [pc, #76]	; (800164c <MX_TIM2_Init+0x94>)
 80015fe:	f001 f807 	bl	8002610 <HAL_TIM_Base_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001608:	f7ff feae 	bl	8001368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001610:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	4619      	mov	r1, r3
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <MX_TIM2_Init+0x94>)
 800161a:	f001 f8a3 	bl	8002764 <HAL_TIM_ConfigClockSource>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001624:	f7ff fea0 	bl	8001368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_TIM2_Init+0x94>)
 8001636:	f001 fa77 	bl	8002b28 <HAL_TIMEx_MasterConfigSynchronization>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001640:	f7ff fe92 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000088 	.word	0x20000088

08001650 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001660:	d10d      	bne.n	800167e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_TIM_Base_MspInit+0x3c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <HAL_TIM_Base_MspInit+0x3c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_TIM_Base_MspInit+0x3c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001696:	490e      	ldr	r1, [pc, #56]	; (80016d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ac:	4c0b      	ldr	r4, [pc, #44]	; (80016dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ba:	f7ff ff6b 	bl	8001594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f001 fde1 	bl	8003284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff fba5 	bl	8000e10 <main>
  bx  lr    
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016d4:	08003d38 	.word	0x08003d38
  ldr r2, =_sbss
 80016d8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016dc:	20000220 	.word	0x20000220

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <HAL_Init+0x40>)
 80016ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_Init+0x40>)
 80016fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_Init+0x40>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 f931 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	2000      	movs	r0, #0
 8001714:	f000 f808 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff fe2c 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023c00 	.word	0x40023c00

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f93b 	bl	80019c2 <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 f911 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000000 	.word	0x20000000
 8001780:	20000008 	.word	0x20000008
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008
 80017ac:	200000d0 	.word	0x200000d0

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	200000d0 	.word	0x200000d0

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000008 	.word	0x20000008

08001810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800183c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	; (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <__NVIC_GetPriorityGrouping+0x18>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f003 0307 	and.w	r3, r3, #7
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff47 	bl	8001810 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff5c 	bl	8001858 <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffb0 	bl	8001930 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e159      	b.n	8001cac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f040 8148 	bne.w	8001ca6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d005      	beq.n	8001a2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d130      	bne.n	8001a90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a64:	2201      	movs	r2, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 0201 	and.w	r2, r3, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d017      	beq.n	8001acc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d123      	bne.n	8001b20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3208      	adds	r2, #8
 8001ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	69b9      	ldr	r1, [r7, #24]
 8001b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0203 	and.w	r2, r3, #3
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80a2 	beq.w	8001ca6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b57      	ldr	r3, [pc, #348]	; (8001cc4 <HAL_GPIO_Init+0x2e8>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a56      	ldr	r2, [pc, #344]	; (8001cc4 <HAL_GPIO_Init+0x2e8>)
 8001b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b54      	ldr	r3, [pc, #336]	; (8001cc4 <HAL_GPIO_Init+0x2e8>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7e:	4a52      	ldr	r2, [pc, #328]	; (8001cc8 <HAL_GPIO_Init+0x2ec>)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	220f      	movs	r2, #15
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a49      	ldr	r2, [pc, #292]	; (8001ccc <HAL_GPIO_Init+0x2f0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d019      	beq.n	8001bde <HAL_GPIO_Init+0x202>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a48      	ldr	r2, [pc, #288]	; (8001cd0 <HAL_GPIO_Init+0x2f4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_GPIO_Init+0x1fe>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a47      	ldr	r2, [pc, #284]	; (8001cd4 <HAL_GPIO_Init+0x2f8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00d      	beq.n	8001bd6 <HAL_GPIO_Init+0x1fa>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a46      	ldr	r2, [pc, #280]	; (8001cd8 <HAL_GPIO_Init+0x2fc>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <HAL_GPIO_Init+0x1f6>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a45      	ldr	r2, [pc, #276]	; (8001cdc <HAL_GPIO_Init+0x300>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_GPIO_Init+0x1f2>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e008      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bce:	2307      	movs	r3, #7
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e004      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bde:	2300      	movs	r3, #0
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f002 0203 	and.w	r2, r2, #3
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	4093      	lsls	r3, r2
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf0:	4935      	ldr	r1, [pc, #212]	; (8001cc8 <HAL_GPIO_Init+0x2ec>)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfe:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c22:	4a2f      	ldr	r2, [pc, #188]	; (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c28:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c4c:	4a24      	ldr	r2, [pc, #144]	; (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c52:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c76:	4a1a      	ldr	r2, [pc, #104]	; (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <HAL_GPIO_Init+0x304>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca0:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_GPIO_Init+0x304>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	f67f aea2 	bls.w	80019f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3724      	adds	r7, #36	; 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40020800 	.word	0x40020800
 8001cd8:	40020c00 	.word	0x40020c00
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40013c00 	.word	0x40013c00

08001ce4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	e001      	b.n	8001d06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d24:	787b      	ldrb	r3, [r7, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d30:	e003      	b.n	8001d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d32:	887b      	ldrh	r3, [r7, #2]
 8001d34:	041a      	lsls	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	619a      	str	r2, [r3, #24]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e267      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d075      	beq.n	8001e52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d66:	4b88      	ldr	r3, [pc, #544]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d00c      	beq.n	8001d8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d72:	4b85      	ldr	r3, [pc, #532]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d112      	bne.n	8001da4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d7e:	4b82      	ldr	r3, [pc, #520]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d8a:	d10b      	bne.n	8001da4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	4b7e      	ldr	r3, [pc, #504]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d05b      	beq.n	8001e50 <HAL_RCC_OscConfig+0x108>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d157      	bne.n	8001e50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e242      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d106      	bne.n	8001dbc <HAL_RCC_OscConfig+0x74>
 8001dae:	4b76      	ldr	r3, [pc, #472]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a75      	ldr	r2, [pc, #468]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e01d      	b.n	8001df8 <HAL_RCC_OscConfig+0xb0>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x98>
 8001dc6:	4b70      	ldr	r3, [pc, #448]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a6f      	ldr	r2, [pc, #444]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b6d      	ldr	r3, [pc, #436]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a6c      	ldr	r2, [pc, #432]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_OscConfig+0xb0>
 8001de0:	4b69      	ldr	r3, [pc, #420]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a68      	ldr	r2, [pc, #416]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b66      	ldr	r3, [pc, #408]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a65      	ldr	r2, [pc, #404]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff fcd6 	bl	80017b0 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff fcd2 	bl	80017b0 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	; 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e207      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b5b      	ldr	r3, [pc, #364]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0xc0>
 8001e26:	e014      	b.n	8001e52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fcc2 	bl	80017b0 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e30:	f7ff fcbe 	bl	80017b0 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e1f3      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e42:	4b51      	ldr	r3, [pc, #324]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0xe8>
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d063      	beq.n	8001f26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6a:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d11c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e76:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d116      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_RCC_OscConfig+0x152>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e1c7      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4937      	ldr	r1, [pc, #220]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	e03a      	b.n	8001f26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_RCC_OscConfig+0x244>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fc77 	bl	80017b0 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec6:	f7ff fc73 	bl	80017b0 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e1a8      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4925      	ldr	r1, [pc, #148]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]
 8001ef8:	e015      	b.n	8001f26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_OscConfig+0x244>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff fc56 	bl	80017b0 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f08:	f7ff fc52 	bl	80017b0 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e187      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d036      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d016      	beq.n	8001f68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_RCC_OscConfig+0x248>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f40:	f7ff fc36 	bl	80017b0 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f48:	f7ff fc32 	bl	80017b0 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e167      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x200>
 8001f66:	e01b      	b.n	8001fa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_OscConfig+0x248>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fc1f 	bl	80017b0 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	e00e      	b.n	8001f94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f76:	f7ff fc1b 	bl	80017b0 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d907      	bls.n	8001f94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e150      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	42470000 	.word	0x42470000
 8001f90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f94:	4b88      	ldr	r3, [pc, #544]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8001f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ea      	bne.n	8001f76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 8097 	beq.w	80020dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb2:	4b81      	ldr	r3, [pc, #516]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10f      	bne.n	8001fde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	4b7d      	ldr	r3, [pc, #500]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a7c      	ldr	r2, [pc, #496]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b7a      	ldr	r3, [pc, #488]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fde:	4b77      	ldr	r3, [pc, #476]	; (80021bc <HAL_RCC_OscConfig+0x474>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d118      	bne.n	800201c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fea:	4b74      	ldr	r3, [pc, #464]	; (80021bc <HAL_RCC_OscConfig+0x474>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a73      	ldr	r2, [pc, #460]	; (80021bc <HAL_RCC_OscConfig+0x474>)
 8001ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff6:	f7ff fbdb 	bl	80017b0 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7ff fbd7 	bl	80017b0 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e10c      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	4b6a      	ldr	r3, [pc, #424]	; (80021bc <HAL_RCC_OscConfig+0x474>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d106      	bne.n	8002032 <HAL_RCC_OscConfig+0x2ea>
 8002024:	4b64      	ldr	r3, [pc, #400]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	4a63      	ldr	r2, [pc, #396]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6713      	str	r3, [r2, #112]	; 0x70
 8002030:	e01c      	b.n	800206c <HAL_RCC_OscConfig+0x324>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b05      	cmp	r3, #5
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x30c>
 800203a:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	4a5e      	ldr	r2, [pc, #376]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6713      	str	r3, [r2, #112]	; 0x70
 8002046:	4b5c      	ldr	r3, [pc, #368]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204a:	4a5b      	ldr	r2, [pc, #364]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6713      	str	r3, [r2, #112]	; 0x70
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0x324>
 8002054:	4b58      	ldr	r3, [pc, #352]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	4a57      	ldr	r2, [pc, #348]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	6713      	str	r3, [r2, #112]	; 0x70
 8002060:	4b55      	ldr	r3, [pc, #340]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	4a54      	ldr	r2, [pc, #336]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002066:	f023 0304 	bic.w	r3, r3, #4
 800206a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d015      	beq.n	80020a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002074:	f7ff fb9c 	bl	80017b0 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207a:	e00a      	b.n	8002092 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7ff fb98 	bl	80017b0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e0cb      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002092:	4b49      	ldr	r3, [pc, #292]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0ee      	beq.n	800207c <HAL_RCC_OscConfig+0x334>
 800209e:	e014      	b.n	80020ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7ff fb86 	bl	80017b0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a6:	e00a      	b.n	80020be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7ff fb82 	bl	80017b0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0b5      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020be:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ee      	bne.n	80020a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d105      	bne.n	80020dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d0:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	4a38      	ldr	r2, [pc, #224]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 80020d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a1 	beq.w	8002228 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e6:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d05c      	beq.n	80021ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d141      	bne.n	800217e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fa:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <HAL_RCC_OscConfig+0x478>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff fb56 	bl	80017b0 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002108:	f7ff fb52 	bl	80017b0 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e087      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	019b      	lsls	r3, r3, #6
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	3b01      	subs	r3, #1
 8002140:	041b      	lsls	r3, r3, #16
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	061b      	lsls	r3, r3, #24
 800214a:	491b      	ldr	r1, [pc, #108]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_RCC_OscConfig+0x478>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7ff fb2b 	bl	80017b0 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215e:	f7ff fb27 	bl	80017b0 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e05c      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x416>
 800217c:	e054      	b.n	8002228 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_RCC_OscConfig+0x478>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fb14 	bl	80017b0 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff fb10 	bl	80017b0 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e045      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_RCC_OscConfig+0x470>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x444>
 80021aa:	e03d      	b.n	8002228 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e038      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40007000 	.word	0x40007000
 80021c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x4ec>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d028      	beq.n	8002224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d121      	bne.n	8002224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d11a      	bne.n	8002224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021f4:	4013      	ands	r3, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d111      	bne.n	8002224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	3b01      	subs	r3, #1
 800220e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d107      	bne.n	8002224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800

08002238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0cc      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800224c:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d90c      	bls.n	8002274 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	4b65      	ldr	r3, [pc, #404]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b63      	ldr	r3, [pc, #396]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0b8      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800228c:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4a58      	ldr	r2, [pc, #352]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002296:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a4:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b0:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	494d      	ldr	r1, [pc, #308]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d044      	beq.n	8002358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d119      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e07f      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f6:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e06f      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002306:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e067      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002316:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f023 0203 	bic.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4934      	ldr	r1, [pc, #208]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	4313      	orrs	r3, r2
 8002326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002328:	f7ff fa42 	bl	80017b0 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	e00a      	b.n	8002346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002330:	f7ff fa3e 	bl	80017b0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	; 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e04f      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 020c 	and.w	r2, r3, #12
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	429a      	cmp	r2, r3
 8002356:	d1eb      	bne.n	8002330 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d20c      	bcs.n	8002380 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e032      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4916      	ldr	r1, [pc, #88]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	490e      	ldr	r1, [pc, #56]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023be:	f000 f821 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 80023c2:	4602      	mov	r2, r0
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	490a      	ldr	r1, [pc, #40]	; (80023f8 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	5ccb      	ldrb	r3, [r1, r3]
 80023d2:	fa22 f303 	lsr.w	r3, r2, r3
 80023d6:	4a09      	ldr	r2, [pc, #36]	; (80023fc <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff f9a2 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023c00 	.word	0x40023c00
 80023f4:	40023800 	.word	0x40023800
 80023f8:	08003ce4 	.word	0x08003ce4
 80023fc:	20000000 	.word	0x20000000
 8002400:	20000004 	.word	0x20000004

08002404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002408:	b094      	sub	sp, #80	; 0x50
 800240a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	647b      	str	r3, [r7, #68]	; 0x44
 8002410:	2300      	movs	r3, #0
 8002412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002414:	2300      	movs	r3, #0
 8002416:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800241c:	4b79      	ldr	r3, [pc, #484]	; (8002604 <HAL_RCC_GetSysClockFreq+0x200>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b08      	cmp	r3, #8
 8002426:	d00d      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x40>
 8002428:	2b08      	cmp	r3, #8
 800242a:	f200 80e1 	bhi.w	80025f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x34>
 8002432:	2b04      	cmp	r3, #4
 8002434:	d003      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0x3a>
 8002436:	e0db      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002438:	4b73      	ldr	r3, [pc, #460]	; (8002608 <HAL_RCC_GetSysClockFreq+0x204>)
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800243c:	e0db      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800243e:	4b73      	ldr	r3, [pc, #460]	; (800260c <HAL_RCC_GetSysClockFreq+0x208>)
 8002440:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002442:	e0d8      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002444:	4b6f      	ldr	r3, [pc, #444]	; (8002604 <HAL_RCC_GetSysClockFreq+0x200>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800244c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800244e:	4b6d      	ldr	r3, [pc, #436]	; (8002604 <HAL_RCC_GetSysClockFreq+0x200>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d063      	beq.n	8002522 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245a:	4b6a      	ldr	r3, [pc, #424]	; (8002604 <HAL_RCC_GetSysClockFreq+0x200>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	099b      	lsrs	r3, r3, #6
 8002460:	2200      	movs	r2, #0
 8002462:	63bb      	str	r3, [r7, #56]	; 0x38
 8002464:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246c:	633b      	str	r3, [r7, #48]	; 0x30
 800246e:	2300      	movs	r3, #0
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
 8002472:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002476:	4622      	mov	r2, r4
 8002478:	462b      	mov	r3, r5
 800247a:	f04f 0000 	mov.w	r0, #0
 800247e:	f04f 0100 	mov.w	r1, #0
 8002482:	0159      	lsls	r1, r3, #5
 8002484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002488:	0150      	lsls	r0, r2, #5
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4621      	mov	r1, r4
 8002490:	1a51      	subs	r1, r2, r1
 8002492:	6139      	str	r1, [r7, #16]
 8002494:	4629      	mov	r1, r5
 8002496:	eb63 0301 	sbc.w	r3, r3, r1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024a8:	4659      	mov	r1, fp
 80024aa:	018b      	lsls	r3, r1, #6
 80024ac:	4651      	mov	r1, sl
 80024ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024b2:	4651      	mov	r1, sl
 80024b4:	018a      	lsls	r2, r1, #6
 80024b6:	4651      	mov	r1, sl
 80024b8:	ebb2 0801 	subs.w	r8, r2, r1
 80024bc:	4659      	mov	r1, fp
 80024be:	eb63 0901 	sbc.w	r9, r3, r1
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024d6:	4690      	mov	r8, r2
 80024d8:	4699      	mov	r9, r3
 80024da:	4623      	mov	r3, r4
 80024dc:	eb18 0303 	adds.w	r3, r8, r3
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	462b      	mov	r3, r5
 80024e4:	eb49 0303 	adc.w	r3, r9, r3
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024f6:	4629      	mov	r1, r5
 80024f8:	024b      	lsls	r3, r1, #9
 80024fa:	4621      	mov	r1, r4
 80024fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002500:	4621      	mov	r1, r4
 8002502:	024a      	lsls	r2, r1, #9
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800250a:	2200      	movs	r2, #0
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
 800250e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002510:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002514:	f7fd febc 	bl	8000290 <__aeabi_uldivmod>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4613      	mov	r3, r2
 800251e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002520:	e058      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002522:	4b38      	ldr	r3, [pc, #224]	; (8002604 <HAL_RCC_GetSysClockFreq+0x200>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	099b      	lsrs	r3, r3, #6
 8002528:	2200      	movs	r2, #0
 800252a:	4618      	mov	r0, r3
 800252c:	4611      	mov	r1, r2
 800252e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002532:	623b      	str	r3, [r7, #32]
 8002534:	2300      	movs	r3, #0
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
 8002538:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800253c:	4642      	mov	r2, r8
 800253e:	464b      	mov	r3, r9
 8002540:	f04f 0000 	mov.w	r0, #0
 8002544:	f04f 0100 	mov.w	r1, #0
 8002548:	0159      	lsls	r1, r3, #5
 800254a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800254e:	0150      	lsls	r0, r2, #5
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4641      	mov	r1, r8
 8002556:	ebb2 0a01 	subs.w	sl, r2, r1
 800255a:	4649      	mov	r1, r9
 800255c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	f04f 0300 	mov.w	r3, #0
 8002568:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800256c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002570:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002574:	ebb2 040a 	subs.w	r4, r2, sl
 8002578:	eb63 050b 	sbc.w	r5, r3, fp
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	00eb      	lsls	r3, r5, #3
 8002586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800258a:	00e2      	lsls	r2, r4, #3
 800258c:	4614      	mov	r4, r2
 800258e:	461d      	mov	r5, r3
 8002590:	4643      	mov	r3, r8
 8002592:	18e3      	adds	r3, r4, r3
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	464b      	mov	r3, r9
 8002598:	eb45 0303 	adc.w	r3, r5, r3
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025aa:	4629      	mov	r1, r5
 80025ac:	028b      	lsls	r3, r1, #10
 80025ae:	4621      	mov	r1, r4
 80025b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025b4:	4621      	mov	r1, r4
 80025b6:	028a      	lsls	r2, r1, #10
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025be:	2200      	movs	r2, #0
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	61fa      	str	r2, [r7, #28]
 80025c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c8:	f7fd fe62 	bl	8000290 <__aeabi_uldivmod>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4613      	mov	r3, r2
 80025d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	3301      	adds	r3, #1
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ee:	e002      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCC_GetSysClockFreq+0x204>)
 80025f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3750      	adds	r7, #80	; 0x50
 80025fc:	46bd      	mov	sp, r7
 80025fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	00f42400 	.word	0x00f42400
 800260c:	007a1200 	.word	0x007a1200

08002610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e041      	b.n	80026a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff f80a 	bl	8001650 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3304      	adds	r3, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f000 f950 	bl	80028f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d001      	beq.n	80026c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e03c      	b.n	8002742 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1e      	ldr	r2, [pc, #120]	; (8002750 <HAL_TIM_Base_Start+0xa0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d018      	beq.n	800270c <HAL_TIM_Base_Start+0x5c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e2:	d013      	beq.n	800270c <HAL_TIM_Base_Start+0x5c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a1a      	ldr	r2, [pc, #104]	; (8002754 <HAL_TIM_Base_Start+0xa4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00e      	beq.n	800270c <HAL_TIM_Base_Start+0x5c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a19      	ldr	r2, [pc, #100]	; (8002758 <HAL_TIM_Base_Start+0xa8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d009      	beq.n	800270c <HAL_TIM_Base_Start+0x5c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a17      	ldr	r2, [pc, #92]	; (800275c <HAL_TIM_Base_Start+0xac>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d004      	beq.n	800270c <HAL_TIM_Base_Start+0x5c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a16      	ldr	r2, [pc, #88]	; (8002760 <HAL_TIM_Base_Start+0xb0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d111      	bne.n	8002730 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b06      	cmp	r3, #6
 800271c:	d010      	beq.n	8002740 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0201 	orr.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800272e:	e007      	b.n	8002740 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40010000 	.word	0x40010000
 8002754:	40000400 	.word	0x40000400
 8002758:	40000800 	.word	0x40000800
 800275c:	40000c00 	.word	0x40000c00
 8002760:	40014000 	.word	0x40014000

08002764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_TIM_ConfigClockSource+0x1c>
 800277c:	2302      	movs	r3, #2
 800277e:	e0b4      	b.n	80028ea <HAL_TIM_ConfigClockSource+0x186>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800279e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b8:	d03e      	beq.n	8002838 <HAL_TIM_ConfigClockSource+0xd4>
 80027ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027be:	f200 8087 	bhi.w	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c6:	f000 8086 	beq.w	80028d6 <HAL_TIM_ConfigClockSource+0x172>
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ce:	d87f      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d0:	2b70      	cmp	r3, #112	; 0x70
 80027d2:	d01a      	beq.n	800280a <HAL_TIM_ConfigClockSource+0xa6>
 80027d4:	2b70      	cmp	r3, #112	; 0x70
 80027d6:	d87b      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b60      	cmp	r3, #96	; 0x60
 80027da:	d050      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x11a>
 80027dc:	2b60      	cmp	r3, #96	; 0x60
 80027de:	d877      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b50      	cmp	r3, #80	; 0x50
 80027e2:	d03c      	beq.n	800285e <HAL_TIM_ConfigClockSource+0xfa>
 80027e4:	2b50      	cmp	r3, #80	; 0x50
 80027e6:	d873      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d058      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x13a>
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d86f      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b30      	cmp	r3, #48	; 0x30
 80027f2:	d064      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x15a>
 80027f4:	2b30      	cmp	r3, #48	; 0x30
 80027f6:	d86b      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d060      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x15a>
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d867      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002800:	2b00      	cmp	r3, #0
 8002802:	d05c      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x15a>
 8002804:	2b10      	cmp	r3, #16
 8002806:	d05a      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x15a>
 8002808:	e062      	b.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6899      	ldr	r1, [r3, #8]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f000 f965 	bl	8002ae8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800282c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	609a      	str	r2, [r3, #8]
      break;
 8002836:	e04f      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6899      	ldr	r1, [r3, #8]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f000 f94e 	bl	8002ae8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800285a:	609a      	str	r2, [r3, #8]
      break;
 800285c:	e03c      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	461a      	mov	r2, r3
 800286c:	f000 f8c2 	bl	80029f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2150      	movs	r1, #80	; 0x50
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f91b 	bl	8002ab2 <TIM_ITRx_SetConfig>
      break;
 800287c:	e02c      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	461a      	mov	r2, r3
 800288c:	f000 f8e1 	bl	8002a52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2160      	movs	r1, #96	; 0x60
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f90b 	bl	8002ab2 <TIM_ITRx_SetConfig>
      break;
 800289c:	e01c      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6859      	ldr	r1, [r3, #4]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f000 f8a2 	bl	80029f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2140      	movs	r1, #64	; 0x40
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f8fb 	bl	8002ab2 <TIM_ITRx_SetConfig>
      break;
 80028bc:	e00c      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4619      	mov	r1, r3
 80028c8:	4610      	mov	r0, r2
 80028ca:	f000 f8f2 	bl	8002ab2 <TIM_ITRx_SetConfig>
      break;
 80028ce:	e003      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      break;
 80028d4:	e000      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a34      	ldr	r2, [pc, #208]	; (80029d8 <TIM_Base_SetConfig+0xe4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d00f      	beq.n	800292c <TIM_Base_SetConfig+0x38>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002912:	d00b      	beq.n	800292c <TIM_Base_SetConfig+0x38>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a31      	ldr	r2, [pc, #196]	; (80029dc <TIM_Base_SetConfig+0xe8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d007      	beq.n	800292c <TIM_Base_SetConfig+0x38>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a30      	ldr	r2, [pc, #192]	; (80029e0 <TIM_Base_SetConfig+0xec>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d003      	beq.n	800292c <TIM_Base_SetConfig+0x38>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a2f      	ldr	r2, [pc, #188]	; (80029e4 <TIM_Base_SetConfig+0xf0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d108      	bne.n	800293e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <TIM_Base_SetConfig+0xe4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01b      	beq.n	800297e <TIM_Base_SetConfig+0x8a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d017      	beq.n	800297e <TIM_Base_SetConfig+0x8a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a22      	ldr	r2, [pc, #136]	; (80029dc <TIM_Base_SetConfig+0xe8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <TIM_Base_SetConfig+0x8a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <TIM_Base_SetConfig+0xec>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00f      	beq.n	800297e <TIM_Base_SetConfig+0x8a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a20      	ldr	r2, [pc, #128]	; (80029e4 <TIM_Base_SetConfig+0xf0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00b      	beq.n	800297e <TIM_Base_SetConfig+0x8a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a1f      	ldr	r2, [pc, #124]	; (80029e8 <TIM_Base_SetConfig+0xf4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d007      	beq.n	800297e <TIM_Base_SetConfig+0x8a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a1e      	ldr	r2, [pc, #120]	; (80029ec <TIM_Base_SetConfig+0xf8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d003      	beq.n	800297e <TIM_Base_SetConfig+0x8a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a1d      	ldr	r2, [pc, #116]	; (80029f0 <TIM_Base_SetConfig+0xfc>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d108      	bne.n	8002990 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a08      	ldr	r2, [pc, #32]	; (80029d8 <TIM_Base_SetConfig+0xe4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d103      	bne.n	80029c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	615a      	str	r2, [r3, #20]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40010000 	.word	0x40010000
 80029dc:	40000400 	.word	0x40000400
 80029e0:	40000800 	.word	0x40000800
 80029e4:	40000c00 	.word	0x40000c00
 80029e8:	40014000 	.word	0x40014000
 80029ec:	40014400 	.word	0x40014400
 80029f0:	40014800 	.word	0x40014800

080029f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	f023 0201 	bic.w	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f023 030a 	bic.w	r3, r3, #10
 8002a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	f023 0210 	bic.w	r2, r3, #16
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	031b      	lsls	r3, r3, #12
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f043 0307 	orr.w	r3, r3, #7
 8002ad4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	609a      	str	r2, [r3, #8]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	021a      	lsls	r2, r3, #8
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e050      	b.n	8002be2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d018      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8c:	d013      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d00e      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a16      	ldr	r2, [pc, #88]	; (8002bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d009      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d004      	beq.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40000800 	.word	0x40000800
 8002bfc:	40000c00 	.word	0x40000c00
 8002c00:	40014000 	.word	0x40014000

08002c04 <exit>:
 8002c04:	b508      	push	{r3, lr}
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <exit+0x1c>)
 8002c08:	4604      	mov	r4, r0
 8002c0a:	b113      	cbz	r3, 8002c12 <exit+0xe>
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	f3af 8000 	nop.w
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <exit+0x20>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	b103      	cbz	r3, 8002c1a <exit+0x16>
 8002c18:	4798      	blx	r3
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f7fe fc0c 	bl	8001438 <_exit>
 8002c20:	00000000 	.word	0x00000000
 8002c24:	20000214 	.word	0x20000214

08002c28 <malloc>:
 8002c28:	4b02      	ldr	r3, [pc, #8]	; (8002c34 <malloc+0xc>)
 8002c2a:	4601      	mov	r1, r0
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	f000 b823 	b.w	8002c78 <_malloc_r>
 8002c32:	bf00      	nop
 8002c34:	20000064 	.word	0x20000064

08002c38 <sbrk_aligned>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	4e0e      	ldr	r6, [pc, #56]	; (8002c74 <sbrk_aligned+0x3c>)
 8002c3c:	460c      	mov	r4, r1
 8002c3e:	6831      	ldr	r1, [r6, #0]
 8002c40:	4605      	mov	r5, r0
 8002c42:	b911      	cbnz	r1, 8002c4a <sbrk_aligned+0x12>
 8002c44:	f000 faf6 	bl	8003234 <_sbrk_r>
 8002c48:	6030      	str	r0, [r6, #0]
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	f000 faf1 	bl	8003234 <_sbrk_r>
 8002c52:	1c43      	adds	r3, r0, #1
 8002c54:	d00a      	beq.n	8002c6c <sbrk_aligned+0x34>
 8002c56:	1cc4      	adds	r4, r0, #3
 8002c58:	f024 0403 	bic.w	r4, r4, #3
 8002c5c:	42a0      	cmp	r0, r4
 8002c5e:	d007      	beq.n	8002c70 <sbrk_aligned+0x38>
 8002c60:	1a21      	subs	r1, r4, r0
 8002c62:	4628      	mov	r0, r5
 8002c64:	f000 fae6 	bl	8003234 <_sbrk_r>
 8002c68:	3001      	adds	r0, #1
 8002c6a:	d101      	bne.n	8002c70 <sbrk_aligned+0x38>
 8002c6c:	f04f 34ff 	mov.w	r4, #4294967295
 8002c70:	4620      	mov	r0, r4
 8002c72:	bd70      	pop	{r4, r5, r6, pc}
 8002c74:	200000d8 	.word	0x200000d8

08002c78 <_malloc_r>:
 8002c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c7c:	1ccd      	adds	r5, r1, #3
 8002c7e:	f025 0503 	bic.w	r5, r5, #3
 8002c82:	3508      	adds	r5, #8
 8002c84:	2d0c      	cmp	r5, #12
 8002c86:	bf38      	it	cc
 8002c88:	250c      	movcc	r5, #12
 8002c8a:	2d00      	cmp	r5, #0
 8002c8c:	4607      	mov	r7, r0
 8002c8e:	db01      	blt.n	8002c94 <_malloc_r+0x1c>
 8002c90:	42a9      	cmp	r1, r5
 8002c92:	d905      	bls.n	8002ca0 <_malloc_r+0x28>
 8002c94:	230c      	movs	r3, #12
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	2600      	movs	r6, #0
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ca0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002d74 <_malloc_r+0xfc>
 8002ca4:	f000 f868 	bl	8002d78 <__malloc_lock>
 8002ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8002cac:	461c      	mov	r4, r3
 8002cae:	bb5c      	cbnz	r4, 8002d08 <_malloc_r+0x90>
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	4638      	mov	r0, r7
 8002cb4:	f7ff ffc0 	bl	8002c38 <sbrk_aligned>
 8002cb8:	1c43      	adds	r3, r0, #1
 8002cba:	4604      	mov	r4, r0
 8002cbc:	d155      	bne.n	8002d6a <_malloc_r+0xf2>
 8002cbe:	f8d8 4000 	ldr.w	r4, [r8]
 8002cc2:	4626      	mov	r6, r4
 8002cc4:	2e00      	cmp	r6, #0
 8002cc6:	d145      	bne.n	8002d54 <_malloc_r+0xdc>
 8002cc8:	2c00      	cmp	r4, #0
 8002cca:	d048      	beq.n	8002d5e <_malloc_r+0xe6>
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	4631      	mov	r1, r6
 8002cd0:	4638      	mov	r0, r7
 8002cd2:	eb04 0903 	add.w	r9, r4, r3
 8002cd6:	f000 faad 	bl	8003234 <_sbrk_r>
 8002cda:	4581      	cmp	r9, r0
 8002cdc:	d13f      	bne.n	8002d5e <_malloc_r+0xe6>
 8002cde:	6821      	ldr	r1, [r4, #0]
 8002ce0:	1a6d      	subs	r5, r5, r1
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	4638      	mov	r0, r7
 8002ce6:	f7ff ffa7 	bl	8002c38 <sbrk_aligned>
 8002cea:	3001      	adds	r0, #1
 8002cec:	d037      	beq.n	8002d5e <_malloc_r+0xe6>
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	442b      	add	r3, r5
 8002cf2:	6023      	str	r3, [r4, #0]
 8002cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d038      	beq.n	8002d6e <_malloc_r+0xf6>
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	42a2      	cmp	r2, r4
 8002d00:	d12b      	bne.n	8002d5a <_malloc_r+0xe2>
 8002d02:	2200      	movs	r2, #0
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	e00f      	b.n	8002d28 <_malloc_r+0xb0>
 8002d08:	6822      	ldr	r2, [r4, #0]
 8002d0a:	1b52      	subs	r2, r2, r5
 8002d0c:	d41f      	bmi.n	8002d4e <_malloc_r+0xd6>
 8002d0e:	2a0b      	cmp	r2, #11
 8002d10:	d917      	bls.n	8002d42 <_malloc_r+0xca>
 8002d12:	1961      	adds	r1, r4, r5
 8002d14:	42a3      	cmp	r3, r4
 8002d16:	6025      	str	r5, [r4, #0]
 8002d18:	bf18      	it	ne
 8002d1a:	6059      	strne	r1, [r3, #4]
 8002d1c:	6863      	ldr	r3, [r4, #4]
 8002d1e:	bf08      	it	eq
 8002d20:	f8c8 1000 	streq.w	r1, [r8]
 8002d24:	5162      	str	r2, [r4, r5]
 8002d26:	604b      	str	r3, [r1, #4]
 8002d28:	4638      	mov	r0, r7
 8002d2a:	f104 060b 	add.w	r6, r4, #11
 8002d2e:	f000 f829 	bl	8002d84 <__malloc_unlock>
 8002d32:	f026 0607 	bic.w	r6, r6, #7
 8002d36:	1d23      	adds	r3, r4, #4
 8002d38:	1af2      	subs	r2, r6, r3
 8002d3a:	d0ae      	beq.n	8002c9a <_malloc_r+0x22>
 8002d3c:	1b9b      	subs	r3, r3, r6
 8002d3e:	50a3      	str	r3, [r4, r2]
 8002d40:	e7ab      	b.n	8002c9a <_malloc_r+0x22>
 8002d42:	42a3      	cmp	r3, r4
 8002d44:	6862      	ldr	r2, [r4, #4]
 8002d46:	d1dd      	bne.n	8002d04 <_malloc_r+0x8c>
 8002d48:	f8c8 2000 	str.w	r2, [r8]
 8002d4c:	e7ec      	b.n	8002d28 <_malloc_r+0xb0>
 8002d4e:	4623      	mov	r3, r4
 8002d50:	6864      	ldr	r4, [r4, #4]
 8002d52:	e7ac      	b.n	8002cae <_malloc_r+0x36>
 8002d54:	4634      	mov	r4, r6
 8002d56:	6876      	ldr	r6, [r6, #4]
 8002d58:	e7b4      	b.n	8002cc4 <_malloc_r+0x4c>
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	e7cc      	b.n	8002cf8 <_malloc_r+0x80>
 8002d5e:	230c      	movs	r3, #12
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	4638      	mov	r0, r7
 8002d64:	f000 f80e 	bl	8002d84 <__malloc_unlock>
 8002d68:	e797      	b.n	8002c9a <_malloc_r+0x22>
 8002d6a:	6025      	str	r5, [r4, #0]
 8002d6c:	e7dc      	b.n	8002d28 <_malloc_r+0xb0>
 8002d6e:	605b      	str	r3, [r3, #4]
 8002d70:	deff      	udf	#255	; 0xff
 8002d72:	bf00      	nop
 8002d74:	200000d4 	.word	0x200000d4

08002d78 <__malloc_lock>:
 8002d78:	4801      	ldr	r0, [pc, #4]	; (8002d80 <__malloc_lock+0x8>)
 8002d7a:	f000 baa8 	b.w	80032ce <__retarget_lock_acquire_recursive>
 8002d7e:	bf00      	nop
 8002d80:	2000021c 	.word	0x2000021c

08002d84 <__malloc_unlock>:
 8002d84:	4801      	ldr	r0, [pc, #4]	; (8002d8c <__malloc_unlock+0x8>)
 8002d86:	f000 baa3 	b.w	80032d0 <__retarget_lock_release_recursive>
 8002d8a:	bf00      	nop
 8002d8c:	2000021c 	.word	0x2000021c

08002d90 <std>:
 8002d90:	2300      	movs	r3, #0
 8002d92:	b510      	push	{r4, lr}
 8002d94:	4604      	mov	r4, r0
 8002d96:	e9c0 3300 	strd	r3, r3, [r0]
 8002d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d9e:	6083      	str	r3, [r0, #8]
 8002da0:	8181      	strh	r1, [r0, #12]
 8002da2:	6643      	str	r3, [r0, #100]	; 0x64
 8002da4:	81c2      	strh	r2, [r0, #14]
 8002da6:	6183      	str	r3, [r0, #24]
 8002da8:	4619      	mov	r1, r3
 8002daa:	2208      	movs	r2, #8
 8002dac:	305c      	adds	r0, #92	; 0x5c
 8002dae:	f000 fa05 	bl	80031bc <memset>
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <std+0x58>)
 8002db4:	6263      	str	r3, [r4, #36]	; 0x24
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <std+0x5c>)
 8002db8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <std+0x60>)
 8002dbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <std+0x64>)
 8002dc0:	6323      	str	r3, [r4, #48]	; 0x30
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <std+0x68>)
 8002dc4:	6224      	str	r4, [r4, #32]
 8002dc6:	429c      	cmp	r4, r3
 8002dc8:	d006      	beq.n	8002dd8 <std+0x48>
 8002dca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002dce:	4294      	cmp	r4, r2
 8002dd0:	d002      	beq.n	8002dd8 <std+0x48>
 8002dd2:	33d0      	adds	r3, #208	; 0xd0
 8002dd4:	429c      	cmp	r4, r3
 8002dd6:	d105      	bne.n	8002de4 <std+0x54>
 8002dd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002de0:	f000 ba74 	b.w	80032cc <__retarget_lock_init_recursive>
 8002de4:	bd10      	pop	{r4, pc}
 8002de6:	bf00      	nop
 8002de8:	0800300d 	.word	0x0800300d
 8002dec:	0800302f 	.word	0x0800302f
 8002df0:	08003067 	.word	0x08003067
 8002df4:	0800308b 	.word	0x0800308b
 8002df8:	200000dc 	.word	0x200000dc

08002dfc <stdio_exit_handler>:
 8002dfc:	4a02      	ldr	r2, [pc, #8]	; (8002e08 <stdio_exit_handler+0xc>)
 8002dfe:	4903      	ldr	r1, [pc, #12]	; (8002e0c <stdio_exit_handler+0x10>)
 8002e00:	4803      	ldr	r0, [pc, #12]	; (8002e10 <stdio_exit_handler+0x14>)
 8002e02:	f000 b869 	b.w	8002ed8 <_fwalk_sglue>
 8002e06:	bf00      	nop
 8002e08:	2000000c 	.word	0x2000000c
 8002e0c:	08003a49 	.word	0x08003a49
 8002e10:	20000018 	.word	0x20000018

08002e14 <cleanup_stdio>:
 8002e14:	6841      	ldr	r1, [r0, #4]
 8002e16:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <cleanup_stdio+0x34>)
 8002e18:	4299      	cmp	r1, r3
 8002e1a:	b510      	push	{r4, lr}
 8002e1c:	4604      	mov	r4, r0
 8002e1e:	d001      	beq.n	8002e24 <cleanup_stdio+0x10>
 8002e20:	f000 fe12 	bl	8003a48 <_fflush_r>
 8002e24:	68a1      	ldr	r1, [r4, #8]
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <cleanup_stdio+0x38>)
 8002e28:	4299      	cmp	r1, r3
 8002e2a:	d002      	beq.n	8002e32 <cleanup_stdio+0x1e>
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f000 fe0b 	bl	8003a48 <_fflush_r>
 8002e32:	68e1      	ldr	r1, [r4, #12]
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <cleanup_stdio+0x3c>)
 8002e36:	4299      	cmp	r1, r3
 8002e38:	d004      	beq.n	8002e44 <cleanup_stdio+0x30>
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e40:	f000 be02 	b.w	8003a48 <_fflush_r>
 8002e44:	bd10      	pop	{r4, pc}
 8002e46:	bf00      	nop
 8002e48:	200000dc 	.word	0x200000dc
 8002e4c:	20000144 	.word	0x20000144
 8002e50:	200001ac 	.word	0x200001ac

08002e54 <global_stdio_init.part.0>:
 8002e54:	b510      	push	{r4, lr}
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <global_stdio_init.part.0+0x30>)
 8002e58:	4c0b      	ldr	r4, [pc, #44]	; (8002e88 <global_stdio_init.part.0+0x34>)
 8002e5a:	4a0c      	ldr	r2, [pc, #48]	; (8002e8c <global_stdio_init.part.0+0x38>)
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	4620      	mov	r0, r4
 8002e60:	2200      	movs	r2, #0
 8002e62:	2104      	movs	r1, #4
 8002e64:	f7ff ff94 	bl	8002d90 <std>
 8002e68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	2109      	movs	r1, #9
 8002e70:	f7ff ff8e 	bl	8002d90 <std>
 8002e74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002e78:	2202      	movs	r2, #2
 8002e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e7e:	2112      	movs	r1, #18
 8002e80:	f7ff bf86 	b.w	8002d90 <std>
 8002e84:	20000214 	.word	0x20000214
 8002e88:	200000dc 	.word	0x200000dc
 8002e8c:	08002dfd 	.word	0x08002dfd

08002e90 <__sfp_lock_acquire>:
 8002e90:	4801      	ldr	r0, [pc, #4]	; (8002e98 <__sfp_lock_acquire+0x8>)
 8002e92:	f000 ba1c 	b.w	80032ce <__retarget_lock_acquire_recursive>
 8002e96:	bf00      	nop
 8002e98:	2000021d 	.word	0x2000021d

08002e9c <__sfp_lock_release>:
 8002e9c:	4801      	ldr	r0, [pc, #4]	; (8002ea4 <__sfp_lock_release+0x8>)
 8002e9e:	f000 ba17 	b.w	80032d0 <__retarget_lock_release_recursive>
 8002ea2:	bf00      	nop
 8002ea4:	2000021d 	.word	0x2000021d

08002ea8 <__sinit>:
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	4604      	mov	r4, r0
 8002eac:	f7ff fff0 	bl	8002e90 <__sfp_lock_acquire>
 8002eb0:	6a23      	ldr	r3, [r4, #32]
 8002eb2:	b11b      	cbz	r3, 8002ebc <__sinit+0x14>
 8002eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002eb8:	f7ff bff0 	b.w	8002e9c <__sfp_lock_release>
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <__sinit+0x28>)
 8002ebe:	6223      	str	r3, [r4, #32]
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <__sinit+0x2c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f5      	bne.n	8002eb4 <__sinit+0xc>
 8002ec8:	f7ff ffc4 	bl	8002e54 <global_stdio_init.part.0>
 8002ecc:	e7f2      	b.n	8002eb4 <__sinit+0xc>
 8002ece:	bf00      	nop
 8002ed0:	08002e15 	.word	0x08002e15
 8002ed4:	20000214 	.word	0x20000214

08002ed8 <_fwalk_sglue>:
 8002ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002edc:	4607      	mov	r7, r0
 8002ede:	4688      	mov	r8, r1
 8002ee0:	4614      	mov	r4, r2
 8002ee2:	2600      	movs	r6, #0
 8002ee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002ee8:	f1b9 0901 	subs.w	r9, r9, #1
 8002eec:	d505      	bpl.n	8002efa <_fwalk_sglue+0x22>
 8002eee:	6824      	ldr	r4, [r4, #0]
 8002ef0:	2c00      	cmp	r4, #0
 8002ef2:	d1f7      	bne.n	8002ee4 <_fwalk_sglue+0xc>
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002efa:	89ab      	ldrh	r3, [r5, #12]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d907      	bls.n	8002f10 <_fwalk_sglue+0x38>
 8002f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f04:	3301      	adds	r3, #1
 8002f06:	d003      	beq.n	8002f10 <_fwalk_sglue+0x38>
 8002f08:	4629      	mov	r1, r5
 8002f0a:	4638      	mov	r0, r7
 8002f0c:	47c0      	blx	r8
 8002f0e:	4306      	orrs	r6, r0
 8002f10:	3568      	adds	r5, #104	; 0x68
 8002f12:	e7e9      	b.n	8002ee8 <_fwalk_sglue+0x10>

08002f14 <_puts_r>:
 8002f14:	6a03      	ldr	r3, [r0, #32]
 8002f16:	b570      	push	{r4, r5, r6, lr}
 8002f18:	6884      	ldr	r4, [r0, #8]
 8002f1a:	4605      	mov	r5, r0
 8002f1c:	460e      	mov	r6, r1
 8002f1e:	b90b      	cbnz	r3, 8002f24 <_puts_r+0x10>
 8002f20:	f7ff ffc2 	bl	8002ea8 <__sinit>
 8002f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f26:	07db      	lsls	r3, r3, #31
 8002f28:	d405      	bmi.n	8002f36 <_puts_r+0x22>
 8002f2a:	89a3      	ldrh	r3, [r4, #12]
 8002f2c:	0598      	lsls	r0, r3, #22
 8002f2e:	d402      	bmi.n	8002f36 <_puts_r+0x22>
 8002f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f32:	f000 f9cc 	bl	80032ce <__retarget_lock_acquire_recursive>
 8002f36:	89a3      	ldrh	r3, [r4, #12]
 8002f38:	0719      	lsls	r1, r3, #28
 8002f3a:	d513      	bpl.n	8002f64 <_puts_r+0x50>
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	b18b      	cbz	r3, 8002f64 <_puts_r+0x50>
 8002f40:	3e01      	subs	r6, #1
 8002f42:	68a3      	ldr	r3, [r4, #8]
 8002f44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	60a3      	str	r3, [r4, #8]
 8002f4c:	b9e9      	cbnz	r1, 8002f8a <_puts_r+0x76>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	da2e      	bge.n	8002fb0 <_puts_r+0x9c>
 8002f52:	4622      	mov	r2, r4
 8002f54:	210a      	movs	r1, #10
 8002f56:	4628      	mov	r0, r5
 8002f58:	f000 f89b 	bl	8003092 <__swbuf_r>
 8002f5c:	3001      	adds	r0, #1
 8002f5e:	d007      	beq.n	8002f70 <_puts_r+0x5c>
 8002f60:	250a      	movs	r5, #10
 8002f62:	e007      	b.n	8002f74 <_puts_r+0x60>
 8002f64:	4621      	mov	r1, r4
 8002f66:	4628      	mov	r0, r5
 8002f68:	f000 f8d0 	bl	800310c <__swsetup_r>
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	d0e7      	beq.n	8002f40 <_puts_r+0x2c>
 8002f70:	f04f 35ff 	mov.w	r5, #4294967295
 8002f74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f76:	07da      	lsls	r2, r3, #31
 8002f78:	d405      	bmi.n	8002f86 <_puts_r+0x72>
 8002f7a:	89a3      	ldrh	r3, [r4, #12]
 8002f7c:	059b      	lsls	r3, r3, #22
 8002f7e:	d402      	bmi.n	8002f86 <_puts_r+0x72>
 8002f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f82:	f000 f9a5 	bl	80032d0 <__retarget_lock_release_recursive>
 8002f86:	4628      	mov	r0, r5
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	da04      	bge.n	8002f98 <_puts_r+0x84>
 8002f8e:	69a2      	ldr	r2, [r4, #24]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	dc06      	bgt.n	8002fa2 <_puts_r+0x8e>
 8002f94:	290a      	cmp	r1, #10
 8002f96:	d004      	beq.n	8002fa2 <_puts_r+0x8e>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	6022      	str	r2, [r4, #0]
 8002f9e:	7019      	strb	r1, [r3, #0]
 8002fa0:	e7cf      	b.n	8002f42 <_puts_r+0x2e>
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f000 f874 	bl	8003092 <__swbuf_r>
 8002faa:	3001      	adds	r0, #1
 8002fac:	d1c9      	bne.n	8002f42 <_puts_r+0x2e>
 8002fae:	e7df      	b.n	8002f70 <_puts_r+0x5c>
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	250a      	movs	r5, #10
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	6022      	str	r2, [r4, #0]
 8002fb8:	701d      	strb	r5, [r3, #0]
 8002fba:	e7db      	b.n	8002f74 <_puts_r+0x60>

08002fbc <puts>:
 8002fbc:	4b02      	ldr	r3, [pc, #8]	; (8002fc8 <puts+0xc>)
 8002fbe:	4601      	mov	r1, r0
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	f7ff bfa7 	b.w	8002f14 <_puts_r>
 8002fc6:	bf00      	nop
 8002fc8:	20000064 	.word	0x20000064

08002fcc <siprintf>:
 8002fcc:	b40e      	push	{r1, r2, r3}
 8002fce:	b500      	push	{lr}
 8002fd0:	b09c      	sub	sp, #112	; 0x70
 8002fd2:	ab1d      	add	r3, sp, #116	; 0x74
 8002fd4:	9002      	str	r0, [sp, #8]
 8002fd6:	9006      	str	r0, [sp, #24]
 8002fd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fdc:	4809      	ldr	r0, [pc, #36]	; (8003004 <siprintf+0x38>)
 8002fde:	9107      	str	r1, [sp, #28]
 8002fe0:	9104      	str	r1, [sp, #16]
 8002fe2:	4909      	ldr	r1, [pc, #36]	; (8003008 <siprintf+0x3c>)
 8002fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fe8:	9105      	str	r1, [sp, #20]
 8002fea:	6800      	ldr	r0, [r0, #0]
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	a902      	add	r1, sp, #8
 8002ff0:	f000 fa16 	bl	8003420 <_svfiprintf_r>
 8002ff4:	9b02      	ldr	r3, [sp, #8]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
 8002ffa:	b01c      	add	sp, #112	; 0x70
 8002ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003000:	b003      	add	sp, #12
 8003002:	4770      	bx	lr
 8003004:	20000064 	.word	0x20000064
 8003008:	ffff0208 	.word	0xffff0208

0800300c <__sread>:
 800300c:	b510      	push	{r4, lr}
 800300e:	460c      	mov	r4, r1
 8003010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003014:	f000 f8fc 	bl	8003210 <_read_r>
 8003018:	2800      	cmp	r0, #0
 800301a:	bfab      	itete	ge
 800301c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800301e:	89a3      	ldrhlt	r3, [r4, #12]
 8003020:	181b      	addge	r3, r3, r0
 8003022:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003026:	bfac      	ite	ge
 8003028:	6563      	strge	r3, [r4, #84]	; 0x54
 800302a:	81a3      	strhlt	r3, [r4, #12]
 800302c:	bd10      	pop	{r4, pc}

0800302e <__swrite>:
 800302e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003032:	461f      	mov	r7, r3
 8003034:	898b      	ldrh	r3, [r1, #12]
 8003036:	05db      	lsls	r3, r3, #23
 8003038:	4605      	mov	r5, r0
 800303a:	460c      	mov	r4, r1
 800303c:	4616      	mov	r6, r2
 800303e:	d505      	bpl.n	800304c <__swrite+0x1e>
 8003040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003044:	2302      	movs	r3, #2
 8003046:	2200      	movs	r2, #0
 8003048:	f000 f8d0 	bl	80031ec <_lseek_r>
 800304c:	89a3      	ldrh	r3, [r4, #12]
 800304e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003056:	81a3      	strh	r3, [r4, #12]
 8003058:	4632      	mov	r2, r6
 800305a:	463b      	mov	r3, r7
 800305c:	4628      	mov	r0, r5
 800305e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003062:	f000 b8f7 	b.w	8003254 <_write_r>

08003066 <__sseek>:
 8003066:	b510      	push	{r4, lr}
 8003068:	460c      	mov	r4, r1
 800306a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800306e:	f000 f8bd 	bl	80031ec <_lseek_r>
 8003072:	1c43      	adds	r3, r0, #1
 8003074:	89a3      	ldrh	r3, [r4, #12]
 8003076:	bf15      	itete	ne
 8003078:	6560      	strne	r0, [r4, #84]	; 0x54
 800307a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800307e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003082:	81a3      	strheq	r3, [r4, #12]
 8003084:	bf18      	it	ne
 8003086:	81a3      	strhne	r3, [r4, #12]
 8003088:	bd10      	pop	{r4, pc}

0800308a <__sclose>:
 800308a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800308e:	f000 b89d 	b.w	80031cc <_close_r>

08003092 <__swbuf_r>:
 8003092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003094:	460e      	mov	r6, r1
 8003096:	4614      	mov	r4, r2
 8003098:	4605      	mov	r5, r0
 800309a:	b118      	cbz	r0, 80030a4 <__swbuf_r+0x12>
 800309c:	6a03      	ldr	r3, [r0, #32]
 800309e:	b90b      	cbnz	r3, 80030a4 <__swbuf_r+0x12>
 80030a0:	f7ff ff02 	bl	8002ea8 <__sinit>
 80030a4:	69a3      	ldr	r3, [r4, #24]
 80030a6:	60a3      	str	r3, [r4, #8]
 80030a8:	89a3      	ldrh	r3, [r4, #12]
 80030aa:	071a      	lsls	r2, r3, #28
 80030ac:	d525      	bpl.n	80030fa <__swbuf_r+0x68>
 80030ae:	6923      	ldr	r3, [r4, #16]
 80030b0:	b31b      	cbz	r3, 80030fa <__swbuf_r+0x68>
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	6922      	ldr	r2, [r4, #16]
 80030b6:	1a98      	subs	r0, r3, r2
 80030b8:	6963      	ldr	r3, [r4, #20]
 80030ba:	b2f6      	uxtb	r6, r6
 80030bc:	4283      	cmp	r3, r0
 80030be:	4637      	mov	r7, r6
 80030c0:	dc04      	bgt.n	80030cc <__swbuf_r+0x3a>
 80030c2:	4621      	mov	r1, r4
 80030c4:	4628      	mov	r0, r5
 80030c6:	f000 fcbf 	bl	8003a48 <_fflush_r>
 80030ca:	b9e0      	cbnz	r0, 8003106 <__swbuf_r+0x74>
 80030cc:	68a3      	ldr	r3, [r4, #8]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	60a3      	str	r3, [r4, #8]
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	6022      	str	r2, [r4, #0]
 80030d8:	701e      	strb	r6, [r3, #0]
 80030da:	6962      	ldr	r2, [r4, #20]
 80030dc:	1c43      	adds	r3, r0, #1
 80030de:	429a      	cmp	r2, r3
 80030e0:	d004      	beq.n	80030ec <__swbuf_r+0x5a>
 80030e2:	89a3      	ldrh	r3, [r4, #12]
 80030e4:	07db      	lsls	r3, r3, #31
 80030e6:	d506      	bpl.n	80030f6 <__swbuf_r+0x64>
 80030e8:	2e0a      	cmp	r6, #10
 80030ea:	d104      	bne.n	80030f6 <__swbuf_r+0x64>
 80030ec:	4621      	mov	r1, r4
 80030ee:	4628      	mov	r0, r5
 80030f0:	f000 fcaa 	bl	8003a48 <_fflush_r>
 80030f4:	b938      	cbnz	r0, 8003106 <__swbuf_r+0x74>
 80030f6:	4638      	mov	r0, r7
 80030f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030fa:	4621      	mov	r1, r4
 80030fc:	4628      	mov	r0, r5
 80030fe:	f000 f805 	bl	800310c <__swsetup_r>
 8003102:	2800      	cmp	r0, #0
 8003104:	d0d5      	beq.n	80030b2 <__swbuf_r+0x20>
 8003106:	f04f 37ff 	mov.w	r7, #4294967295
 800310a:	e7f4      	b.n	80030f6 <__swbuf_r+0x64>

0800310c <__swsetup_r>:
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <__swsetup_r+0xac>)
 8003110:	4605      	mov	r5, r0
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	460c      	mov	r4, r1
 8003116:	b118      	cbz	r0, 8003120 <__swsetup_r+0x14>
 8003118:	6a03      	ldr	r3, [r0, #32]
 800311a:	b90b      	cbnz	r3, 8003120 <__swsetup_r+0x14>
 800311c:	f7ff fec4 	bl	8002ea8 <__sinit>
 8003120:	89a3      	ldrh	r3, [r4, #12]
 8003122:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003126:	0718      	lsls	r0, r3, #28
 8003128:	d422      	bmi.n	8003170 <__swsetup_r+0x64>
 800312a:	06d9      	lsls	r1, r3, #27
 800312c:	d407      	bmi.n	800313e <__swsetup_r+0x32>
 800312e:	2309      	movs	r3, #9
 8003130:	602b      	str	r3, [r5, #0]
 8003132:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003136:	81a3      	strh	r3, [r4, #12]
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	e034      	b.n	80031a8 <__swsetup_r+0x9c>
 800313e:	0758      	lsls	r0, r3, #29
 8003140:	d512      	bpl.n	8003168 <__swsetup_r+0x5c>
 8003142:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003144:	b141      	cbz	r1, 8003158 <__swsetup_r+0x4c>
 8003146:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800314a:	4299      	cmp	r1, r3
 800314c:	d002      	beq.n	8003154 <__swsetup_r+0x48>
 800314e:	4628      	mov	r0, r5
 8003150:	f000 f8c0 	bl	80032d4 <_free_r>
 8003154:	2300      	movs	r3, #0
 8003156:	6363      	str	r3, [r4, #52]	; 0x34
 8003158:	89a3      	ldrh	r3, [r4, #12]
 800315a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800315e:	81a3      	strh	r3, [r4, #12]
 8003160:	2300      	movs	r3, #0
 8003162:	6063      	str	r3, [r4, #4]
 8003164:	6923      	ldr	r3, [r4, #16]
 8003166:	6023      	str	r3, [r4, #0]
 8003168:	89a3      	ldrh	r3, [r4, #12]
 800316a:	f043 0308 	orr.w	r3, r3, #8
 800316e:	81a3      	strh	r3, [r4, #12]
 8003170:	6923      	ldr	r3, [r4, #16]
 8003172:	b94b      	cbnz	r3, 8003188 <__swsetup_r+0x7c>
 8003174:	89a3      	ldrh	r3, [r4, #12]
 8003176:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800317a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317e:	d003      	beq.n	8003188 <__swsetup_r+0x7c>
 8003180:	4621      	mov	r1, r4
 8003182:	4628      	mov	r0, r5
 8003184:	f000 fcae 	bl	8003ae4 <__smakebuf_r>
 8003188:	89a0      	ldrh	r0, [r4, #12]
 800318a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800318e:	f010 0301 	ands.w	r3, r0, #1
 8003192:	d00a      	beq.n	80031aa <__swsetup_r+0x9e>
 8003194:	2300      	movs	r3, #0
 8003196:	60a3      	str	r3, [r4, #8]
 8003198:	6963      	ldr	r3, [r4, #20]
 800319a:	425b      	negs	r3, r3
 800319c:	61a3      	str	r3, [r4, #24]
 800319e:	6923      	ldr	r3, [r4, #16]
 80031a0:	b943      	cbnz	r3, 80031b4 <__swsetup_r+0xa8>
 80031a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031a6:	d1c4      	bne.n	8003132 <__swsetup_r+0x26>
 80031a8:	bd38      	pop	{r3, r4, r5, pc}
 80031aa:	0781      	lsls	r1, r0, #30
 80031ac:	bf58      	it	pl
 80031ae:	6963      	ldrpl	r3, [r4, #20]
 80031b0:	60a3      	str	r3, [r4, #8]
 80031b2:	e7f4      	b.n	800319e <__swsetup_r+0x92>
 80031b4:	2000      	movs	r0, #0
 80031b6:	e7f7      	b.n	80031a8 <__swsetup_r+0x9c>
 80031b8:	20000064 	.word	0x20000064

080031bc <memset>:
 80031bc:	4402      	add	r2, r0
 80031be:	4603      	mov	r3, r0
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d100      	bne.n	80031c6 <memset+0xa>
 80031c4:	4770      	bx	lr
 80031c6:	f803 1b01 	strb.w	r1, [r3], #1
 80031ca:	e7f9      	b.n	80031c0 <memset+0x4>

080031cc <_close_r>:
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	4d06      	ldr	r5, [pc, #24]	; (80031e8 <_close_r+0x1c>)
 80031d0:	2300      	movs	r3, #0
 80031d2:	4604      	mov	r4, r0
 80031d4:	4608      	mov	r0, r1
 80031d6:	602b      	str	r3, [r5, #0]
 80031d8:	f7fe f971 	bl	80014be <_close>
 80031dc:	1c43      	adds	r3, r0, #1
 80031de:	d102      	bne.n	80031e6 <_close_r+0x1a>
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	b103      	cbz	r3, 80031e6 <_close_r+0x1a>
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	bd38      	pop	{r3, r4, r5, pc}
 80031e8:	20000218 	.word	0x20000218

080031ec <_lseek_r>:
 80031ec:	b538      	push	{r3, r4, r5, lr}
 80031ee:	4d07      	ldr	r5, [pc, #28]	; (800320c <_lseek_r+0x20>)
 80031f0:	4604      	mov	r4, r0
 80031f2:	4608      	mov	r0, r1
 80031f4:	4611      	mov	r1, r2
 80031f6:	2200      	movs	r2, #0
 80031f8:	602a      	str	r2, [r5, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f7fe f986 	bl	800150c <_lseek>
 8003200:	1c43      	adds	r3, r0, #1
 8003202:	d102      	bne.n	800320a <_lseek_r+0x1e>
 8003204:	682b      	ldr	r3, [r5, #0]
 8003206:	b103      	cbz	r3, 800320a <_lseek_r+0x1e>
 8003208:	6023      	str	r3, [r4, #0]
 800320a:	bd38      	pop	{r3, r4, r5, pc}
 800320c:	20000218 	.word	0x20000218

08003210 <_read_r>:
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	4d07      	ldr	r5, [pc, #28]	; (8003230 <_read_r+0x20>)
 8003214:	4604      	mov	r4, r0
 8003216:	4608      	mov	r0, r1
 8003218:	4611      	mov	r1, r2
 800321a:	2200      	movs	r2, #0
 800321c:	602a      	str	r2, [r5, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	f7fe f914 	bl	800144c <_read>
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	d102      	bne.n	800322e <_read_r+0x1e>
 8003228:	682b      	ldr	r3, [r5, #0]
 800322a:	b103      	cbz	r3, 800322e <_read_r+0x1e>
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	bd38      	pop	{r3, r4, r5, pc}
 8003230:	20000218 	.word	0x20000218

08003234 <_sbrk_r>:
 8003234:	b538      	push	{r3, r4, r5, lr}
 8003236:	4d06      	ldr	r5, [pc, #24]	; (8003250 <_sbrk_r+0x1c>)
 8003238:	2300      	movs	r3, #0
 800323a:	4604      	mov	r4, r0
 800323c:	4608      	mov	r0, r1
 800323e:	602b      	str	r3, [r5, #0]
 8003240:	f7fe f972 	bl	8001528 <_sbrk>
 8003244:	1c43      	adds	r3, r0, #1
 8003246:	d102      	bne.n	800324e <_sbrk_r+0x1a>
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	b103      	cbz	r3, 800324e <_sbrk_r+0x1a>
 800324c:	6023      	str	r3, [r4, #0]
 800324e:	bd38      	pop	{r3, r4, r5, pc}
 8003250:	20000218 	.word	0x20000218

08003254 <_write_r>:
 8003254:	b538      	push	{r3, r4, r5, lr}
 8003256:	4d07      	ldr	r5, [pc, #28]	; (8003274 <_write_r+0x20>)
 8003258:	4604      	mov	r4, r0
 800325a:	4608      	mov	r0, r1
 800325c:	4611      	mov	r1, r2
 800325e:	2200      	movs	r2, #0
 8003260:	602a      	str	r2, [r5, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	f7fe f90f 	bl	8001486 <_write>
 8003268:	1c43      	adds	r3, r0, #1
 800326a:	d102      	bne.n	8003272 <_write_r+0x1e>
 800326c:	682b      	ldr	r3, [r5, #0]
 800326e:	b103      	cbz	r3, 8003272 <_write_r+0x1e>
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	bd38      	pop	{r3, r4, r5, pc}
 8003274:	20000218 	.word	0x20000218

08003278 <__errno>:
 8003278:	4b01      	ldr	r3, [pc, #4]	; (8003280 <__errno+0x8>)
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20000064 	.word	0x20000064

08003284 <__libc_init_array>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	4d0d      	ldr	r5, [pc, #52]	; (80032bc <__libc_init_array+0x38>)
 8003288:	4c0d      	ldr	r4, [pc, #52]	; (80032c0 <__libc_init_array+0x3c>)
 800328a:	1b64      	subs	r4, r4, r5
 800328c:	10a4      	asrs	r4, r4, #2
 800328e:	2600      	movs	r6, #0
 8003290:	42a6      	cmp	r6, r4
 8003292:	d109      	bne.n	80032a8 <__libc_init_array+0x24>
 8003294:	4d0b      	ldr	r5, [pc, #44]	; (80032c4 <__libc_init_array+0x40>)
 8003296:	4c0c      	ldr	r4, [pc, #48]	; (80032c8 <__libc_init_array+0x44>)
 8003298:	f000 fce2 	bl	8003c60 <_init>
 800329c:	1b64      	subs	r4, r4, r5
 800329e:	10a4      	asrs	r4, r4, #2
 80032a0:	2600      	movs	r6, #0
 80032a2:	42a6      	cmp	r6, r4
 80032a4:	d105      	bne.n	80032b2 <__libc_init_array+0x2e>
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ac:	4798      	blx	r3
 80032ae:	3601      	adds	r6, #1
 80032b0:	e7ee      	b.n	8003290 <__libc_init_array+0xc>
 80032b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b6:	4798      	blx	r3
 80032b8:	3601      	adds	r6, #1
 80032ba:	e7f2      	b.n	80032a2 <__libc_init_array+0x1e>
 80032bc:	08003d30 	.word	0x08003d30
 80032c0:	08003d30 	.word	0x08003d30
 80032c4:	08003d30 	.word	0x08003d30
 80032c8:	08003d34 	.word	0x08003d34

080032cc <__retarget_lock_init_recursive>:
 80032cc:	4770      	bx	lr

080032ce <__retarget_lock_acquire_recursive>:
 80032ce:	4770      	bx	lr

080032d0 <__retarget_lock_release_recursive>:
 80032d0:	4770      	bx	lr
	...

080032d4 <_free_r>:
 80032d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032d6:	2900      	cmp	r1, #0
 80032d8:	d044      	beq.n	8003364 <_free_r+0x90>
 80032da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032de:	9001      	str	r0, [sp, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f1a1 0404 	sub.w	r4, r1, #4
 80032e6:	bfb8      	it	lt
 80032e8:	18e4      	addlt	r4, r4, r3
 80032ea:	f7ff fd45 	bl	8002d78 <__malloc_lock>
 80032ee:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <_free_r+0x94>)
 80032f0:	9801      	ldr	r0, [sp, #4]
 80032f2:	6813      	ldr	r3, [r2, #0]
 80032f4:	b933      	cbnz	r3, 8003304 <_free_r+0x30>
 80032f6:	6063      	str	r3, [r4, #4]
 80032f8:	6014      	str	r4, [r2, #0]
 80032fa:	b003      	add	sp, #12
 80032fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003300:	f7ff bd40 	b.w	8002d84 <__malloc_unlock>
 8003304:	42a3      	cmp	r3, r4
 8003306:	d908      	bls.n	800331a <_free_r+0x46>
 8003308:	6825      	ldr	r5, [r4, #0]
 800330a:	1961      	adds	r1, r4, r5
 800330c:	428b      	cmp	r3, r1
 800330e:	bf01      	itttt	eq
 8003310:	6819      	ldreq	r1, [r3, #0]
 8003312:	685b      	ldreq	r3, [r3, #4]
 8003314:	1949      	addeq	r1, r1, r5
 8003316:	6021      	streq	r1, [r4, #0]
 8003318:	e7ed      	b.n	80032f6 <_free_r+0x22>
 800331a:	461a      	mov	r2, r3
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	b10b      	cbz	r3, 8003324 <_free_r+0x50>
 8003320:	42a3      	cmp	r3, r4
 8003322:	d9fa      	bls.n	800331a <_free_r+0x46>
 8003324:	6811      	ldr	r1, [r2, #0]
 8003326:	1855      	adds	r5, r2, r1
 8003328:	42a5      	cmp	r5, r4
 800332a:	d10b      	bne.n	8003344 <_free_r+0x70>
 800332c:	6824      	ldr	r4, [r4, #0]
 800332e:	4421      	add	r1, r4
 8003330:	1854      	adds	r4, r2, r1
 8003332:	42a3      	cmp	r3, r4
 8003334:	6011      	str	r1, [r2, #0]
 8003336:	d1e0      	bne.n	80032fa <_free_r+0x26>
 8003338:	681c      	ldr	r4, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	6053      	str	r3, [r2, #4]
 800333e:	440c      	add	r4, r1
 8003340:	6014      	str	r4, [r2, #0]
 8003342:	e7da      	b.n	80032fa <_free_r+0x26>
 8003344:	d902      	bls.n	800334c <_free_r+0x78>
 8003346:	230c      	movs	r3, #12
 8003348:	6003      	str	r3, [r0, #0]
 800334a:	e7d6      	b.n	80032fa <_free_r+0x26>
 800334c:	6825      	ldr	r5, [r4, #0]
 800334e:	1961      	adds	r1, r4, r5
 8003350:	428b      	cmp	r3, r1
 8003352:	bf04      	itt	eq
 8003354:	6819      	ldreq	r1, [r3, #0]
 8003356:	685b      	ldreq	r3, [r3, #4]
 8003358:	6063      	str	r3, [r4, #4]
 800335a:	bf04      	itt	eq
 800335c:	1949      	addeq	r1, r1, r5
 800335e:	6021      	streq	r1, [r4, #0]
 8003360:	6054      	str	r4, [r2, #4]
 8003362:	e7ca      	b.n	80032fa <_free_r+0x26>
 8003364:	b003      	add	sp, #12
 8003366:	bd30      	pop	{r4, r5, pc}
 8003368:	200000d4 	.word	0x200000d4

0800336c <__ssputs_r>:
 800336c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003370:	688e      	ldr	r6, [r1, #8]
 8003372:	461f      	mov	r7, r3
 8003374:	42be      	cmp	r6, r7
 8003376:	680b      	ldr	r3, [r1, #0]
 8003378:	4682      	mov	sl, r0
 800337a:	460c      	mov	r4, r1
 800337c:	4690      	mov	r8, r2
 800337e:	d82c      	bhi.n	80033da <__ssputs_r+0x6e>
 8003380:	898a      	ldrh	r2, [r1, #12]
 8003382:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003386:	d026      	beq.n	80033d6 <__ssputs_r+0x6a>
 8003388:	6965      	ldr	r5, [r4, #20]
 800338a:	6909      	ldr	r1, [r1, #16]
 800338c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003390:	eba3 0901 	sub.w	r9, r3, r1
 8003394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003398:	1c7b      	adds	r3, r7, #1
 800339a:	444b      	add	r3, r9
 800339c:	106d      	asrs	r5, r5, #1
 800339e:	429d      	cmp	r5, r3
 80033a0:	bf38      	it	cc
 80033a2:	461d      	movcc	r5, r3
 80033a4:	0553      	lsls	r3, r2, #21
 80033a6:	d527      	bpl.n	80033f8 <__ssputs_r+0x8c>
 80033a8:	4629      	mov	r1, r5
 80033aa:	f7ff fc65 	bl	8002c78 <_malloc_r>
 80033ae:	4606      	mov	r6, r0
 80033b0:	b360      	cbz	r0, 800340c <__ssputs_r+0xa0>
 80033b2:	6921      	ldr	r1, [r4, #16]
 80033b4:	464a      	mov	r2, r9
 80033b6:	f000 fc0d 	bl	8003bd4 <memcpy>
 80033ba:	89a3      	ldrh	r3, [r4, #12]
 80033bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c4:	81a3      	strh	r3, [r4, #12]
 80033c6:	6126      	str	r6, [r4, #16]
 80033c8:	6165      	str	r5, [r4, #20]
 80033ca:	444e      	add	r6, r9
 80033cc:	eba5 0509 	sub.w	r5, r5, r9
 80033d0:	6026      	str	r6, [r4, #0]
 80033d2:	60a5      	str	r5, [r4, #8]
 80033d4:	463e      	mov	r6, r7
 80033d6:	42be      	cmp	r6, r7
 80033d8:	d900      	bls.n	80033dc <__ssputs_r+0x70>
 80033da:	463e      	mov	r6, r7
 80033dc:	6820      	ldr	r0, [r4, #0]
 80033de:	4632      	mov	r2, r6
 80033e0:	4641      	mov	r1, r8
 80033e2:	f000 fbbb 	bl	8003b5c <memmove>
 80033e6:	68a3      	ldr	r3, [r4, #8]
 80033e8:	1b9b      	subs	r3, r3, r6
 80033ea:	60a3      	str	r3, [r4, #8]
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	4433      	add	r3, r6
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	2000      	movs	r0, #0
 80033f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f8:	462a      	mov	r2, r5
 80033fa:	f000 fbf9 	bl	8003bf0 <_realloc_r>
 80033fe:	4606      	mov	r6, r0
 8003400:	2800      	cmp	r0, #0
 8003402:	d1e0      	bne.n	80033c6 <__ssputs_r+0x5a>
 8003404:	6921      	ldr	r1, [r4, #16]
 8003406:	4650      	mov	r0, sl
 8003408:	f7ff ff64 	bl	80032d4 <_free_r>
 800340c:	230c      	movs	r3, #12
 800340e:	f8ca 3000 	str.w	r3, [sl]
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003418:	81a3      	strh	r3, [r4, #12]
 800341a:	f04f 30ff 	mov.w	r0, #4294967295
 800341e:	e7e9      	b.n	80033f4 <__ssputs_r+0x88>

08003420 <_svfiprintf_r>:
 8003420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003424:	4698      	mov	r8, r3
 8003426:	898b      	ldrh	r3, [r1, #12]
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	b09d      	sub	sp, #116	; 0x74
 800342c:	4607      	mov	r7, r0
 800342e:	460d      	mov	r5, r1
 8003430:	4614      	mov	r4, r2
 8003432:	d50e      	bpl.n	8003452 <_svfiprintf_r+0x32>
 8003434:	690b      	ldr	r3, [r1, #16]
 8003436:	b963      	cbnz	r3, 8003452 <_svfiprintf_r+0x32>
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	f7ff fc1d 	bl	8002c78 <_malloc_r>
 800343e:	6028      	str	r0, [r5, #0]
 8003440:	6128      	str	r0, [r5, #16]
 8003442:	b920      	cbnz	r0, 800344e <_svfiprintf_r+0x2e>
 8003444:	230c      	movs	r3, #12
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	e0d0      	b.n	80035f0 <_svfiprintf_r+0x1d0>
 800344e:	2340      	movs	r3, #64	; 0x40
 8003450:	616b      	str	r3, [r5, #20]
 8003452:	2300      	movs	r3, #0
 8003454:	9309      	str	r3, [sp, #36]	; 0x24
 8003456:	2320      	movs	r3, #32
 8003458:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800345c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003460:	2330      	movs	r3, #48	; 0x30
 8003462:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003608 <_svfiprintf_r+0x1e8>
 8003466:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800346a:	f04f 0901 	mov.w	r9, #1
 800346e:	4623      	mov	r3, r4
 8003470:	469a      	mov	sl, r3
 8003472:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003476:	b10a      	cbz	r2, 800347c <_svfiprintf_r+0x5c>
 8003478:	2a25      	cmp	r2, #37	; 0x25
 800347a:	d1f9      	bne.n	8003470 <_svfiprintf_r+0x50>
 800347c:	ebba 0b04 	subs.w	fp, sl, r4
 8003480:	d00b      	beq.n	800349a <_svfiprintf_r+0x7a>
 8003482:	465b      	mov	r3, fp
 8003484:	4622      	mov	r2, r4
 8003486:	4629      	mov	r1, r5
 8003488:	4638      	mov	r0, r7
 800348a:	f7ff ff6f 	bl	800336c <__ssputs_r>
 800348e:	3001      	adds	r0, #1
 8003490:	f000 80a9 	beq.w	80035e6 <_svfiprintf_r+0x1c6>
 8003494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003496:	445a      	add	r2, fp
 8003498:	9209      	str	r2, [sp, #36]	; 0x24
 800349a:	f89a 3000 	ldrb.w	r3, [sl]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80a1 	beq.w	80035e6 <_svfiprintf_r+0x1c6>
 80034a4:	2300      	movs	r3, #0
 80034a6:	f04f 32ff 	mov.w	r2, #4294967295
 80034aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034ae:	f10a 0a01 	add.w	sl, sl, #1
 80034b2:	9304      	str	r3, [sp, #16]
 80034b4:	9307      	str	r3, [sp, #28]
 80034b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034ba:	931a      	str	r3, [sp, #104]	; 0x68
 80034bc:	4654      	mov	r4, sl
 80034be:	2205      	movs	r2, #5
 80034c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c4:	4850      	ldr	r0, [pc, #320]	; (8003608 <_svfiprintf_r+0x1e8>)
 80034c6:	f7fc fe93 	bl	80001f0 <memchr>
 80034ca:	9a04      	ldr	r2, [sp, #16]
 80034cc:	b9d8      	cbnz	r0, 8003506 <_svfiprintf_r+0xe6>
 80034ce:	06d0      	lsls	r0, r2, #27
 80034d0:	bf44      	itt	mi
 80034d2:	2320      	movmi	r3, #32
 80034d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034d8:	0711      	lsls	r1, r2, #28
 80034da:	bf44      	itt	mi
 80034dc:	232b      	movmi	r3, #43	; 0x2b
 80034de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034e2:	f89a 3000 	ldrb.w	r3, [sl]
 80034e6:	2b2a      	cmp	r3, #42	; 0x2a
 80034e8:	d015      	beq.n	8003516 <_svfiprintf_r+0xf6>
 80034ea:	9a07      	ldr	r2, [sp, #28]
 80034ec:	4654      	mov	r4, sl
 80034ee:	2000      	movs	r0, #0
 80034f0:	f04f 0c0a 	mov.w	ip, #10
 80034f4:	4621      	mov	r1, r4
 80034f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034fa:	3b30      	subs	r3, #48	; 0x30
 80034fc:	2b09      	cmp	r3, #9
 80034fe:	d94d      	bls.n	800359c <_svfiprintf_r+0x17c>
 8003500:	b1b0      	cbz	r0, 8003530 <_svfiprintf_r+0x110>
 8003502:	9207      	str	r2, [sp, #28]
 8003504:	e014      	b.n	8003530 <_svfiprintf_r+0x110>
 8003506:	eba0 0308 	sub.w	r3, r0, r8
 800350a:	fa09 f303 	lsl.w	r3, r9, r3
 800350e:	4313      	orrs	r3, r2
 8003510:	9304      	str	r3, [sp, #16]
 8003512:	46a2      	mov	sl, r4
 8003514:	e7d2      	b.n	80034bc <_svfiprintf_r+0x9c>
 8003516:	9b03      	ldr	r3, [sp, #12]
 8003518:	1d19      	adds	r1, r3, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	9103      	str	r1, [sp, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	bfbb      	ittet	lt
 8003522:	425b      	neglt	r3, r3
 8003524:	f042 0202 	orrlt.w	r2, r2, #2
 8003528:	9307      	strge	r3, [sp, #28]
 800352a:	9307      	strlt	r3, [sp, #28]
 800352c:	bfb8      	it	lt
 800352e:	9204      	strlt	r2, [sp, #16]
 8003530:	7823      	ldrb	r3, [r4, #0]
 8003532:	2b2e      	cmp	r3, #46	; 0x2e
 8003534:	d10c      	bne.n	8003550 <_svfiprintf_r+0x130>
 8003536:	7863      	ldrb	r3, [r4, #1]
 8003538:	2b2a      	cmp	r3, #42	; 0x2a
 800353a:	d134      	bne.n	80035a6 <_svfiprintf_r+0x186>
 800353c:	9b03      	ldr	r3, [sp, #12]
 800353e:	1d1a      	adds	r2, r3, #4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	9203      	str	r2, [sp, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	bfb8      	it	lt
 8003548:	f04f 33ff 	movlt.w	r3, #4294967295
 800354c:	3402      	adds	r4, #2
 800354e:	9305      	str	r3, [sp, #20]
 8003550:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003618 <_svfiprintf_r+0x1f8>
 8003554:	7821      	ldrb	r1, [r4, #0]
 8003556:	2203      	movs	r2, #3
 8003558:	4650      	mov	r0, sl
 800355a:	f7fc fe49 	bl	80001f0 <memchr>
 800355e:	b138      	cbz	r0, 8003570 <_svfiprintf_r+0x150>
 8003560:	9b04      	ldr	r3, [sp, #16]
 8003562:	eba0 000a 	sub.w	r0, r0, sl
 8003566:	2240      	movs	r2, #64	; 0x40
 8003568:	4082      	lsls	r2, r0
 800356a:	4313      	orrs	r3, r2
 800356c:	3401      	adds	r4, #1
 800356e:	9304      	str	r3, [sp, #16]
 8003570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003574:	4825      	ldr	r0, [pc, #148]	; (800360c <_svfiprintf_r+0x1ec>)
 8003576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800357a:	2206      	movs	r2, #6
 800357c:	f7fc fe38 	bl	80001f0 <memchr>
 8003580:	2800      	cmp	r0, #0
 8003582:	d038      	beq.n	80035f6 <_svfiprintf_r+0x1d6>
 8003584:	4b22      	ldr	r3, [pc, #136]	; (8003610 <_svfiprintf_r+0x1f0>)
 8003586:	bb1b      	cbnz	r3, 80035d0 <_svfiprintf_r+0x1b0>
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	3307      	adds	r3, #7
 800358c:	f023 0307 	bic.w	r3, r3, #7
 8003590:	3308      	adds	r3, #8
 8003592:	9303      	str	r3, [sp, #12]
 8003594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003596:	4433      	add	r3, r6
 8003598:	9309      	str	r3, [sp, #36]	; 0x24
 800359a:	e768      	b.n	800346e <_svfiprintf_r+0x4e>
 800359c:	fb0c 3202 	mla	r2, ip, r2, r3
 80035a0:	460c      	mov	r4, r1
 80035a2:	2001      	movs	r0, #1
 80035a4:	e7a6      	b.n	80034f4 <_svfiprintf_r+0xd4>
 80035a6:	2300      	movs	r3, #0
 80035a8:	3401      	adds	r4, #1
 80035aa:	9305      	str	r3, [sp, #20]
 80035ac:	4619      	mov	r1, r3
 80035ae:	f04f 0c0a 	mov.w	ip, #10
 80035b2:	4620      	mov	r0, r4
 80035b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035b8:	3a30      	subs	r2, #48	; 0x30
 80035ba:	2a09      	cmp	r2, #9
 80035bc:	d903      	bls.n	80035c6 <_svfiprintf_r+0x1a6>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0c6      	beq.n	8003550 <_svfiprintf_r+0x130>
 80035c2:	9105      	str	r1, [sp, #20]
 80035c4:	e7c4      	b.n	8003550 <_svfiprintf_r+0x130>
 80035c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80035ca:	4604      	mov	r4, r0
 80035cc:	2301      	movs	r3, #1
 80035ce:	e7f0      	b.n	80035b2 <_svfiprintf_r+0x192>
 80035d0:	ab03      	add	r3, sp, #12
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	462a      	mov	r2, r5
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <_svfiprintf_r+0x1f4>)
 80035d8:	a904      	add	r1, sp, #16
 80035da:	4638      	mov	r0, r7
 80035dc:	f3af 8000 	nop.w
 80035e0:	1c42      	adds	r2, r0, #1
 80035e2:	4606      	mov	r6, r0
 80035e4:	d1d6      	bne.n	8003594 <_svfiprintf_r+0x174>
 80035e6:	89ab      	ldrh	r3, [r5, #12]
 80035e8:	065b      	lsls	r3, r3, #25
 80035ea:	f53f af2d 	bmi.w	8003448 <_svfiprintf_r+0x28>
 80035ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035f0:	b01d      	add	sp, #116	; 0x74
 80035f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f6:	ab03      	add	r3, sp, #12
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	462a      	mov	r2, r5
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <_svfiprintf_r+0x1f4>)
 80035fe:	a904      	add	r1, sp, #16
 8003600:	4638      	mov	r0, r7
 8003602:	f000 f879 	bl	80036f8 <_printf_i>
 8003606:	e7eb      	b.n	80035e0 <_svfiprintf_r+0x1c0>
 8003608:	08003cf4 	.word	0x08003cf4
 800360c:	08003cfe 	.word	0x08003cfe
 8003610:	00000000 	.word	0x00000000
 8003614:	0800336d 	.word	0x0800336d
 8003618:	08003cfa 	.word	0x08003cfa

0800361c <_printf_common>:
 800361c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003620:	4616      	mov	r6, r2
 8003622:	4699      	mov	r9, r3
 8003624:	688a      	ldr	r2, [r1, #8]
 8003626:	690b      	ldr	r3, [r1, #16]
 8003628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800362c:	4293      	cmp	r3, r2
 800362e:	bfb8      	it	lt
 8003630:	4613      	movlt	r3, r2
 8003632:	6033      	str	r3, [r6, #0]
 8003634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003638:	4607      	mov	r7, r0
 800363a:	460c      	mov	r4, r1
 800363c:	b10a      	cbz	r2, 8003642 <_printf_common+0x26>
 800363e:	3301      	adds	r3, #1
 8003640:	6033      	str	r3, [r6, #0]
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	0699      	lsls	r1, r3, #26
 8003646:	bf42      	ittt	mi
 8003648:	6833      	ldrmi	r3, [r6, #0]
 800364a:	3302      	addmi	r3, #2
 800364c:	6033      	strmi	r3, [r6, #0]
 800364e:	6825      	ldr	r5, [r4, #0]
 8003650:	f015 0506 	ands.w	r5, r5, #6
 8003654:	d106      	bne.n	8003664 <_printf_common+0x48>
 8003656:	f104 0a19 	add.w	sl, r4, #25
 800365a:	68e3      	ldr	r3, [r4, #12]
 800365c:	6832      	ldr	r2, [r6, #0]
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	42ab      	cmp	r3, r5
 8003662:	dc26      	bgt.n	80036b2 <_printf_common+0x96>
 8003664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003668:	1e13      	subs	r3, r2, #0
 800366a:	6822      	ldr	r2, [r4, #0]
 800366c:	bf18      	it	ne
 800366e:	2301      	movne	r3, #1
 8003670:	0692      	lsls	r2, r2, #26
 8003672:	d42b      	bmi.n	80036cc <_printf_common+0xb0>
 8003674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003678:	4649      	mov	r1, r9
 800367a:	4638      	mov	r0, r7
 800367c:	47c0      	blx	r8
 800367e:	3001      	adds	r0, #1
 8003680:	d01e      	beq.n	80036c0 <_printf_common+0xa4>
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	6922      	ldr	r2, [r4, #16]
 8003686:	f003 0306 	and.w	r3, r3, #6
 800368a:	2b04      	cmp	r3, #4
 800368c:	bf02      	ittt	eq
 800368e:	68e5      	ldreq	r5, [r4, #12]
 8003690:	6833      	ldreq	r3, [r6, #0]
 8003692:	1aed      	subeq	r5, r5, r3
 8003694:	68a3      	ldr	r3, [r4, #8]
 8003696:	bf0c      	ite	eq
 8003698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800369c:	2500      	movne	r5, #0
 800369e:	4293      	cmp	r3, r2
 80036a0:	bfc4      	itt	gt
 80036a2:	1a9b      	subgt	r3, r3, r2
 80036a4:	18ed      	addgt	r5, r5, r3
 80036a6:	2600      	movs	r6, #0
 80036a8:	341a      	adds	r4, #26
 80036aa:	42b5      	cmp	r5, r6
 80036ac:	d11a      	bne.n	80036e4 <_printf_common+0xc8>
 80036ae:	2000      	movs	r0, #0
 80036b0:	e008      	b.n	80036c4 <_printf_common+0xa8>
 80036b2:	2301      	movs	r3, #1
 80036b4:	4652      	mov	r2, sl
 80036b6:	4649      	mov	r1, r9
 80036b8:	4638      	mov	r0, r7
 80036ba:	47c0      	blx	r8
 80036bc:	3001      	adds	r0, #1
 80036be:	d103      	bne.n	80036c8 <_printf_common+0xac>
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c8:	3501      	adds	r5, #1
 80036ca:	e7c6      	b.n	800365a <_printf_common+0x3e>
 80036cc:	18e1      	adds	r1, r4, r3
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	2030      	movs	r0, #48	; 0x30
 80036d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036d6:	4422      	add	r2, r4
 80036d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036e0:	3302      	adds	r3, #2
 80036e2:	e7c7      	b.n	8003674 <_printf_common+0x58>
 80036e4:	2301      	movs	r3, #1
 80036e6:	4622      	mov	r2, r4
 80036e8:	4649      	mov	r1, r9
 80036ea:	4638      	mov	r0, r7
 80036ec:	47c0      	blx	r8
 80036ee:	3001      	adds	r0, #1
 80036f0:	d0e6      	beq.n	80036c0 <_printf_common+0xa4>
 80036f2:	3601      	adds	r6, #1
 80036f4:	e7d9      	b.n	80036aa <_printf_common+0x8e>
	...

080036f8 <_printf_i>:
 80036f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036fc:	7e0f      	ldrb	r7, [r1, #24]
 80036fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003700:	2f78      	cmp	r7, #120	; 0x78
 8003702:	4691      	mov	r9, r2
 8003704:	4680      	mov	r8, r0
 8003706:	460c      	mov	r4, r1
 8003708:	469a      	mov	sl, r3
 800370a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800370e:	d807      	bhi.n	8003720 <_printf_i+0x28>
 8003710:	2f62      	cmp	r7, #98	; 0x62
 8003712:	d80a      	bhi.n	800372a <_printf_i+0x32>
 8003714:	2f00      	cmp	r7, #0
 8003716:	f000 80d4 	beq.w	80038c2 <_printf_i+0x1ca>
 800371a:	2f58      	cmp	r7, #88	; 0x58
 800371c:	f000 80c0 	beq.w	80038a0 <_printf_i+0x1a8>
 8003720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003728:	e03a      	b.n	80037a0 <_printf_i+0xa8>
 800372a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800372e:	2b15      	cmp	r3, #21
 8003730:	d8f6      	bhi.n	8003720 <_printf_i+0x28>
 8003732:	a101      	add	r1, pc, #4	; (adr r1, 8003738 <_printf_i+0x40>)
 8003734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003738:	08003791 	.word	0x08003791
 800373c:	080037a5 	.word	0x080037a5
 8003740:	08003721 	.word	0x08003721
 8003744:	08003721 	.word	0x08003721
 8003748:	08003721 	.word	0x08003721
 800374c:	08003721 	.word	0x08003721
 8003750:	080037a5 	.word	0x080037a5
 8003754:	08003721 	.word	0x08003721
 8003758:	08003721 	.word	0x08003721
 800375c:	08003721 	.word	0x08003721
 8003760:	08003721 	.word	0x08003721
 8003764:	080038a9 	.word	0x080038a9
 8003768:	080037d1 	.word	0x080037d1
 800376c:	08003863 	.word	0x08003863
 8003770:	08003721 	.word	0x08003721
 8003774:	08003721 	.word	0x08003721
 8003778:	080038cb 	.word	0x080038cb
 800377c:	08003721 	.word	0x08003721
 8003780:	080037d1 	.word	0x080037d1
 8003784:	08003721 	.word	0x08003721
 8003788:	08003721 	.word	0x08003721
 800378c:	0800386b 	.word	0x0800386b
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	1d1a      	adds	r2, r3, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	602a      	str	r2, [r5, #0]
 8003798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800379c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037a0:	2301      	movs	r3, #1
 80037a2:	e09f      	b.n	80038e4 <_printf_i+0x1ec>
 80037a4:	6820      	ldr	r0, [r4, #0]
 80037a6:	682b      	ldr	r3, [r5, #0]
 80037a8:	0607      	lsls	r7, r0, #24
 80037aa:	f103 0104 	add.w	r1, r3, #4
 80037ae:	6029      	str	r1, [r5, #0]
 80037b0:	d501      	bpl.n	80037b6 <_printf_i+0xbe>
 80037b2:	681e      	ldr	r6, [r3, #0]
 80037b4:	e003      	b.n	80037be <_printf_i+0xc6>
 80037b6:	0646      	lsls	r6, r0, #25
 80037b8:	d5fb      	bpl.n	80037b2 <_printf_i+0xba>
 80037ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80037be:	2e00      	cmp	r6, #0
 80037c0:	da03      	bge.n	80037ca <_printf_i+0xd2>
 80037c2:	232d      	movs	r3, #45	; 0x2d
 80037c4:	4276      	negs	r6, r6
 80037c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ca:	485a      	ldr	r0, [pc, #360]	; (8003934 <_printf_i+0x23c>)
 80037cc:	230a      	movs	r3, #10
 80037ce:	e012      	b.n	80037f6 <_printf_i+0xfe>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	6820      	ldr	r0, [r4, #0]
 80037d4:	1d19      	adds	r1, r3, #4
 80037d6:	6029      	str	r1, [r5, #0]
 80037d8:	0605      	lsls	r5, r0, #24
 80037da:	d501      	bpl.n	80037e0 <_printf_i+0xe8>
 80037dc:	681e      	ldr	r6, [r3, #0]
 80037de:	e002      	b.n	80037e6 <_printf_i+0xee>
 80037e0:	0641      	lsls	r1, r0, #25
 80037e2:	d5fb      	bpl.n	80037dc <_printf_i+0xe4>
 80037e4:	881e      	ldrh	r6, [r3, #0]
 80037e6:	4853      	ldr	r0, [pc, #332]	; (8003934 <_printf_i+0x23c>)
 80037e8:	2f6f      	cmp	r7, #111	; 0x6f
 80037ea:	bf0c      	ite	eq
 80037ec:	2308      	moveq	r3, #8
 80037ee:	230a      	movne	r3, #10
 80037f0:	2100      	movs	r1, #0
 80037f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037f6:	6865      	ldr	r5, [r4, #4]
 80037f8:	60a5      	str	r5, [r4, #8]
 80037fa:	2d00      	cmp	r5, #0
 80037fc:	bfa2      	ittt	ge
 80037fe:	6821      	ldrge	r1, [r4, #0]
 8003800:	f021 0104 	bicge.w	r1, r1, #4
 8003804:	6021      	strge	r1, [r4, #0]
 8003806:	b90e      	cbnz	r6, 800380c <_printf_i+0x114>
 8003808:	2d00      	cmp	r5, #0
 800380a:	d04b      	beq.n	80038a4 <_printf_i+0x1ac>
 800380c:	4615      	mov	r5, r2
 800380e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003812:	fb03 6711 	mls	r7, r3, r1, r6
 8003816:	5dc7      	ldrb	r7, [r0, r7]
 8003818:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800381c:	4637      	mov	r7, r6
 800381e:	42bb      	cmp	r3, r7
 8003820:	460e      	mov	r6, r1
 8003822:	d9f4      	bls.n	800380e <_printf_i+0x116>
 8003824:	2b08      	cmp	r3, #8
 8003826:	d10b      	bne.n	8003840 <_printf_i+0x148>
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	07de      	lsls	r6, r3, #31
 800382c:	d508      	bpl.n	8003840 <_printf_i+0x148>
 800382e:	6923      	ldr	r3, [r4, #16]
 8003830:	6861      	ldr	r1, [r4, #4]
 8003832:	4299      	cmp	r1, r3
 8003834:	bfde      	ittt	le
 8003836:	2330      	movle	r3, #48	; 0x30
 8003838:	f805 3c01 	strble.w	r3, [r5, #-1]
 800383c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003840:	1b52      	subs	r2, r2, r5
 8003842:	6122      	str	r2, [r4, #16]
 8003844:	f8cd a000 	str.w	sl, [sp]
 8003848:	464b      	mov	r3, r9
 800384a:	aa03      	add	r2, sp, #12
 800384c:	4621      	mov	r1, r4
 800384e:	4640      	mov	r0, r8
 8003850:	f7ff fee4 	bl	800361c <_printf_common>
 8003854:	3001      	adds	r0, #1
 8003856:	d14a      	bne.n	80038ee <_printf_i+0x1f6>
 8003858:	f04f 30ff 	mov.w	r0, #4294967295
 800385c:	b004      	add	sp, #16
 800385e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	f043 0320 	orr.w	r3, r3, #32
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	4833      	ldr	r0, [pc, #204]	; (8003938 <_printf_i+0x240>)
 800386c:	2778      	movs	r7, #120	; 0x78
 800386e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	6829      	ldr	r1, [r5, #0]
 8003876:	061f      	lsls	r7, r3, #24
 8003878:	f851 6b04 	ldr.w	r6, [r1], #4
 800387c:	d402      	bmi.n	8003884 <_printf_i+0x18c>
 800387e:	065f      	lsls	r7, r3, #25
 8003880:	bf48      	it	mi
 8003882:	b2b6      	uxthmi	r6, r6
 8003884:	07df      	lsls	r7, r3, #31
 8003886:	bf48      	it	mi
 8003888:	f043 0320 	orrmi.w	r3, r3, #32
 800388c:	6029      	str	r1, [r5, #0]
 800388e:	bf48      	it	mi
 8003890:	6023      	strmi	r3, [r4, #0]
 8003892:	b91e      	cbnz	r6, 800389c <_printf_i+0x1a4>
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	f023 0320 	bic.w	r3, r3, #32
 800389a:	6023      	str	r3, [r4, #0]
 800389c:	2310      	movs	r3, #16
 800389e:	e7a7      	b.n	80037f0 <_printf_i+0xf8>
 80038a0:	4824      	ldr	r0, [pc, #144]	; (8003934 <_printf_i+0x23c>)
 80038a2:	e7e4      	b.n	800386e <_printf_i+0x176>
 80038a4:	4615      	mov	r5, r2
 80038a6:	e7bd      	b.n	8003824 <_printf_i+0x12c>
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	6826      	ldr	r6, [r4, #0]
 80038ac:	6961      	ldr	r1, [r4, #20]
 80038ae:	1d18      	adds	r0, r3, #4
 80038b0:	6028      	str	r0, [r5, #0]
 80038b2:	0635      	lsls	r5, r6, #24
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	d501      	bpl.n	80038bc <_printf_i+0x1c4>
 80038b8:	6019      	str	r1, [r3, #0]
 80038ba:	e002      	b.n	80038c2 <_printf_i+0x1ca>
 80038bc:	0670      	lsls	r0, r6, #25
 80038be:	d5fb      	bpl.n	80038b8 <_printf_i+0x1c0>
 80038c0:	8019      	strh	r1, [r3, #0]
 80038c2:	2300      	movs	r3, #0
 80038c4:	6123      	str	r3, [r4, #16]
 80038c6:	4615      	mov	r5, r2
 80038c8:	e7bc      	b.n	8003844 <_printf_i+0x14c>
 80038ca:	682b      	ldr	r3, [r5, #0]
 80038cc:	1d1a      	adds	r2, r3, #4
 80038ce:	602a      	str	r2, [r5, #0]
 80038d0:	681d      	ldr	r5, [r3, #0]
 80038d2:	6862      	ldr	r2, [r4, #4]
 80038d4:	2100      	movs	r1, #0
 80038d6:	4628      	mov	r0, r5
 80038d8:	f7fc fc8a 	bl	80001f0 <memchr>
 80038dc:	b108      	cbz	r0, 80038e2 <_printf_i+0x1ea>
 80038de:	1b40      	subs	r0, r0, r5
 80038e0:	6060      	str	r0, [r4, #4]
 80038e2:	6863      	ldr	r3, [r4, #4]
 80038e4:	6123      	str	r3, [r4, #16]
 80038e6:	2300      	movs	r3, #0
 80038e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ec:	e7aa      	b.n	8003844 <_printf_i+0x14c>
 80038ee:	6923      	ldr	r3, [r4, #16]
 80038f0:	462a      	mov	r2, r5
 80038f2:	4649      	mov	r1, r9
 80038f4:	4640      	mov	r0, r8
 80038f6:	47d0      	blx	sl
 80038f8:	3001      	adds	r0, #1
 80038fa:	d0ad      	beq.n	8003858 <_printf_i+0x160>
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	079b      	lsls	r3, r3, #30
 8003900:	d413      	bmi.n	800392a <_printf_i+0x232>
 8003902:	68e0      	ldr	r0, [r4, #12]
 8003904:	9b03      	ldr	r3, [sp, #12]
 8003906:	4298      	cmp	r0, r3
 8003908:	bfb8      	it	lt
 800390a:	4618      	movlt	r0, r3
 800390c:	e7a6      	b.n	800385c <_printf_i+0x164>
 800390e:	2301      	movs	r3, #1
 8003910:	4632      	mov	r2, r6
 8003912:	4649      	mov	r1, r9
 8003914:	4640      	mov	r0, r8
 8003916:	47d0      	blx	sl
 8003918:	3001      	adds	r0, #1
 800391a:	d09d      	beq.n	8003858 <_printf_i+0x160>
 800391c:	3501      	adds	r5, #1
 800391e:	68e3      	ldr	r3, [r4, #12]
 8003920:	9903      	ldr	r1, [sp, #12]
 8003922:	1a5b      	subs	r3, r3, r1
 8003924:	42ab      	cmp	r3, r5
 8003926:	dcf2      	bgt.n	800390e <_printf_i+0x216>
 8003928:	e7eb      	b.n	8003902 <_printf_i+0x20a>
 800392a:	2500      	movs	r5, #0
 800392c:	f104 0619 	add.w	r6, r4, #25
 8003930:	e7f5      	b.n	800391e <_printf_i+0x226>
 8003932:	bf00      	nop
 8003934:	08003d05 	.word	0x08003d05
 8003938:	08003d16 	.word	0x08003d16

0800393c <__sflush_r>:
 800393c:	898a      	ldrh	r2, [r1, #12]
 800393e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003942:	4605      	mov	r5, r0
 8003944:	0710      	lsls	r0, r2, #28
 8003946:	460c      	mov	r4, r1
 8003948:	d458      	bmi.n	80039fc <__sflush_r+0xc0>
 800394a:	684b      	ldr	r3, [r1, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	dc05      	bgt.n	800395c <__sflush_r+0x20>
 8003950:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	dc02      	bgt.n	800395c <__sflush_r+0x20>
 8003956:	2000      	movs	r0, #0
 8003958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800395c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800395e:	2e00      	cmp	r6, #0
 8003960:	d0f9      	beq.n	8003956 <__sflush_r+0x1a>
 8003962:	2300      	movs	r3, #0
 8003964:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003968:	682f      	ldr	r7, [r5, #0]
 800396a:	6a21      	ldr	r1, [r4, #32]
 800396c:	602b      	str	r3, [r5, #0]
 800396e:	d032      	beq.n	80039d6 <__sflush_r+0x9a>
 8003970:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003972:	89a3      	ldrh	r3, [r4, #12]
 8003974:	075a      	lsls	r2, r3, #29
 8003976:	d505      	bpl.n	8003984 <__sflush_r+0x48>
 8003978:	6863      	ldr	r3, [r4, #4]
 800397a:	1ac0      	subs	r0, r0, r3
 800397c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800397e:	b10b      	cbz	r3, 8003984 <__sflush_r+0x48>
 8003980:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003982:	1ac0      	subs	r0, r0, r3
 8003984:	2300      	movs	r3, #0
 8003986:	4602      	mov	r2, r0
 8003988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800398a:	6a21      	ldr	r1, [r4, #32]
 800398c:	4628      	mov	r0, r5
 800398e:	47b0      	blx	r6
 8003990:	1c43      	adds	r3, r0, #1
 8003992:	89a3      	ldrh	r3, [r4, #12]
 8003994:	d106      	bne.n	80039a4 <__sflush_r+0x68>
 8003996:	6829      	ldr	r1, [r5, #0]
 8003998:	291d      	cmp	r1, #29
 800399a:	d82b      	bhi.n	80039f4 <__sflush_r+0xb8>
 800399c:	4a29      	ldr	r2, [pc, #164]	; (8003a44 <__sflush_r+0x108>)
 800399e:	410a      	asrs	r2, r1
 80039a0:	07d6      	lsls	r6, r2, #31
 80039a2:	d427      	bmi.n	80039f4 <__sflush_r+0xb8>
 80039a4:	2200      	movs	r2, #0
 80039a6:	6062      	str	r2, [r4, #4]
 80039a8:	04d9      	lsls	r1, r3, #19
 80039aa:	6922      	ldr	r2, [r4, #16]
 80039ac:	6022      	str	r2, [r4, #0]
 80039ae:	d504      	bpl.n	80039ba <__sflush_r+0x7e>
 80039b0:	1c42      	adds	r2, r0, #1
 80039b2:	d101      	bne.n	80039b8 <__sflush_r+0x7c>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	b903      	cbnz	r3, 80039ba <__sflush_r+0x7e>
 80039b8:	6560      	str	r0, [r4, #84]	; 0x54
 80039ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039bc:	602f      	str	r7, [r5, #0]
 80039be:	2900      	cmp	r1, #0
 80039c0:	d0c9      	beq.n	8003956 <__sflush_r+0x1a>
 80039c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039c6:	4299      	cmp	r1, r3
 80039c8:	d002      	beq.n	80039d0 <__sflush_r+0x94>
 80039ca:	4628      	mov	r0, r5
 80039cc:	f7ff fc82 	bl	80032d4 <_free_r>
 80039d0:	2000      	movs	r0, #0
 80039d2:	6360      	str	r0, [r4, #52]	; 0x34
 80039d4:	e7c0      	b.n	8003958 <__sflush_r+0x1c>
 80039d6:	2301      	movs	r3, #1
 80039d8:	4628      	mov	r0, r5
 80039da:	47b0      	blx	r6
 80039dc:	1c41      	adds	r1, r0, #1
 80039de:	d1c8      	bne.n	8003972 <__sflush_r+0x36>
 80039e0:	682b      	ldr	r3, [r5, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0c5      	beq.n	8003972 <__sflush_r+0x36>
 80039e6:	2b1d      	cmp	r3, #29
 80039e8:	d001      	beq.n	80039ee <__sflush_r+0xb2>
 80039ea:	2b16      	cmp	r3, #22
 80039ec:	d101      	bne.n	80039f2 <__sflush_r+0xb6>
 80039ee:	602f      	str	r7, [r5, #0]
 80039f0:	e7b1      	b.n	8003956 <__sflush_r+0x1a>
 80039f2:	89a3      	ldrh	r3, [r4, #12]
 80039f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f8:	81a3      	strh	r3, [r4, #12]
 80039fa:	e7ad      	b.n	8003958 <__sflush_r+0x1c>
 80039fc:	690f      	ldr	r7, [r1, #16]
 80039fe:	2f00      	cmp	r7, #0
 8003a00:	d0a9      	beq.n	8003956 <__sflush_r+0x1a>
 8003a02:	0793      	lsls	r3, r2, #30
 8003a04:	680e      	ldr	r6, [r1, #0]
 8003a06:	bf08      	it	eq
 8003a08:	694b      	ldreq	r3, [r1, #20]
 8003a0a:	600f      	str	r7, [r1, #0]
 8003a0c:	bf18      	it	ne
 8003a0e:	2300      	movne	r3, #0
 8003a10:	eba6 0807 	sub.w	r8, r6, r7
 8003a14:	608b      	str	r3, [r1, #8]
 8003a16:	f1b8 0f00 	cmp.w	r8, #0
 8003a1a:	dd9c      	ble.n	8003956 <__sflush_r+0x1a>
 8003a1c:	6a21      	ldr	r1, [r4, #32]
 8003a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a20:	4643      	mov	r3, r8
 8003a22:	463a      	mov	r2, r7
 8003a24:	4628      	mov	r0, r5
 8003a26:	47b0      	blx	r6
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	dc06      	bgt.n	8003a3a <__sflush_r+0xfe>
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a32:	81a3      	strh	r3, [r4, #12]
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	e78e      	b.n	8003958 <__sflush_r+0x1c>
 8003a3a:	4407      	add	r7, r0
 8003a3c:	eba8 0800 	sub.w	r8, r8, r0
 8003a40:	e7e9      	b.n	8003a16 <__sflush_r+0xda>
 8003a42:	bf00      	nop
 8003a44:	dfbffffe 	.word	0xdfbffffe

08003a48 <_fflush_r>:
 8003a48:	b538      	push	{r3, r4, r5, lr}
 8003a4a:	690b      	ldr	r3, [r1, #16]
 8003a4c:	4605      	mov	r5, r0
 8003a4e:	460c      	mov	r4, r1
 8003a50:	b913      	cbnz	r3, 8003a58 <_fflush_r+0x10>
 8003a52:	2500      	movs	r5, #0
 8003a54:	4628      	mov	r0, r5
 8003a56:	bd38      	pop	{r3, r4, r5, pc}
 8003a58:	b118      	cbz	r0, 8003a62 <_fflush_r+0x1a>
 8003a5a:	6a03      	ldr	r3, [r0, #32]
 8003a5c:	b90b      	cbnz	r3, 8003a62 <_fflush_r+0x1a>
 8003a5e:	f7ff fa23 	bl	8002ea8 <__sinit>
 8003a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f3      	beq.n	8003a52 <_fflush_r+0xa>
 8003a6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a6c:	07d0      	lsls	r0, r2, #31
 8003a6e:	d404      	bmi.n	8003a7a <_fflush_r+0x32>
 8003a70:	0599      	lsls	r1, r3, #22
 8003a72:	d402      	bmi.n	8003a7a <_fflush_r+0x32>
 8003a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a76:	f7ff fc2a 	bl	80032ce <__retarget_lock_acquire_recursive>
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	f7ff ff5d 	bl	800393c <__sflush_r>
 8003a82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a84:	07da      	lsls	r2, r3, #31
 8003a86:	4605      	mov	r5, r0
 8003a88:	d4e4      	bmi.n	8003a54 <_fflush_r+0xc>
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	059b      	lsls	r3, r3, #22
 8003a8e:	d4e1      	bmi.n	8003a54 <_fflush_r+0xc>
 8003a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a92:	f7ff fc1d 	bl	80032d0 <__retarget_lock_release_recursive>
 8003a96:	e7dd      	b.n	8003a54 <_fflush_r+0xc>

08003a98 <__swhatbuf_r>:
 8003a98:	b570      	push	{r4, r5, r6, lr}
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa0:	2900      	cmp	r1, #0
 8003aa2:	b096      	sub	sp, #88	; 0x58
 8003aa4:	4615      	mov	r5, r2
 8003aa6:	461e      	mov	r6, r3
 8003aa8:	da0d      	bge.n	8003ac6 <__swhatbuf_r+0x2e>
 8003aaa:	89a3      	ldrh	r3, [r4, #12]
 8003aac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	bf0c      	ite	eq
 8003ab6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003aba:	2340      	movne	r3, #64	; 0x40
 8003abc:	2000      	movs	r0, #0
 8003abe:	6031      	str	r1, [r6, #0]
 8003ac0:	602b      	str	r3, [r5, #0]
 8003ac2:	b016      	add	sp, #88	; 0x58
 8003ac4:	bd70      	pop	{r4, r5, r6, pc}
 8003ac6:	466a      	mov	r2, sp
 8003ac8:	f000 f862 	bl	8003b90 <_fstat_r>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	dbec      	blt.n	8003aaa <__swhatbuf_r+0x12>
 8003ad0:	9901      	ldr	r1, [sp, #4]
 8003ad2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003ad6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003ada:	4259      	negs	r1, r3
 8003adc:	4159      	adcs	r1, r3
 8003ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae2:	e7eb      	b.n	8003abc <__swhatbuf_r+0x24>

08003ae4 <__smakebuf_r>:
 8003ae4:	898b      	ldrh	r3, [r1, #12]
 8003ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ae8:	079d      	lsls	r5, r3, #30
 8003aea:	4606      	mov	r6, r0
 8003aec:	460c      	mov	r4, r1
 8003aee:	d507      	bpl.n	8003b00 <__smakebuf_r+0x1c>
 8003af0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	6123      	str	r3, [r4, #16]
 8003af8:	2301      	movs	r3, #1
 8003afa:	6163      	str	r3, [r4, #20]
 8003afc:	b002      	add	sp, #8
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
 8003b00:	ab01      	add	r3, sp, #4
 8003b02:	466a      	mov	r2, sp
 8003b04:	f7ff ffc8 	bl	8003a98 <__swhatbuf_r>
 8003b08:	9900      	ldr	r1, [sp, #0]
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	f7ff f8b3 	bl	8002c78 <_malloc_r>
 8003b12:	b948      	cbnz	r0, 8003b28 <__smakebuf_r+0x44>
 8003b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b18:	059a      	lsls	r2, r3, #22
 8003b1a:	d4ef      	bmi.n	8003afc <__smakebuf_r+0x18>
 8003b1c:	f023 0303 	bic.w	r3, r3, #3
 8003b20:	f043 0302 	orr.w	r3, r3, #2
 8003b24:	81a3      	strh	r3, [r4, #12]
 8003b26:	e7e3      	b.n	8003af0 <__smakebuf_r+0xc>
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	6020      	str	r0, [r4, #0]
 8003b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	9b00      	ldr	r3, [sp, #0]
 8003b34:	6163      	str	r3, [r4, #20]
 8003b36:	9b01      	ldr	r3, [sp, #4]
 8003b38:	6120      	str	r0, [r4, #16]
 8003b3a:	b15b      	cbz	r3, 8003b54 <__smakebuf_r+0x70>
 8003b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b40:	4630      	mov	r0, r6
 8003b42:	f000 f837 	bl	8003bb4 <_isatty_r>
 8003b46:	b128      	cbz	r0, 8003b54 <__smakebuf_r+0x70>
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	81a3      	strh	r3, [r4, #12]
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	431d      	orrs	r5, r3
 8003b58:	81a5      	strh	r5, [r4, #12]
 8003b5a:	e7cf      	b.n	8003afc <__smakebuf_r+0x18>

08003b5c <memmove>:
 8003b5c:	4288      	cmp	r0, r1
 8003b5e:	b510      	push	{r4, lr}
 8003b60:	eb01 0402 	add.w	r4, r1, r2
 8003b64:	d902      	bls.n	8003b6c <memmove+0x10>
 8003b66:	4284      	cmp	r4, r0
 8003b68:	4623      	mov	r3, r4
 8003b6a:	d807      	bhi.n	8003b7c <memmove+0x20>
 8003b6c:	1e43      	subs	r3, r0, #1
 8003b6e:	42a1      	cmp	r1, r4
 8003b70:	d008      	beq.n	8003b84 <memmove+0x28>
 8003b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b7a:	e7f8      	b.n	8003b6e <memmove+0x12>
 8003b7c:	4402      	add	r2, r0
 8003b7e:	4601      	mov	r1, r0
 8003b80:	428a      	cmp	r2, r1
 8003b82:	d100      	bne.n	8003b86 <memmove+0x2a>
 8003b84:	bd10      	pop	{r4, pc}
 8003b86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b8e:	e7f7      	b.n	8003b80 <memmove+0x24>

08003b90 <_fstat_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4d07      	ldr	r5, [pc, #28]	; (8003bb0 <_fstat_r+0x20>)
 8003b94:	2300      	movs	r3, #0
 8003b96:	4604      	mov	r4, r0
 8003b98:	4608      	mov	r0, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	602b      	str	r3, [r5, #0]
 8003b9e:	f7fd fc9a 	bl	80014d6 <_fstat>
 8003ba2:	1c43      	adds	r3, r0, #1
 8003ba4:	d102      	bne.n	8003bac <_fstat_r+0x1c>
 8003ba6:	682b      	ldr	r3, [r5, #0]
 8003ba8:	b103      	cbz	r3, 8003bac <_fstat_r+0x1c>
 8003baa:	6023      	str	r3, [r4, #0]
 8003bac:	bd38      	pop	{r3, r4, r5, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000218 	.word	0x20000218

08003bb4 <_isatty_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	4d06      	ldr	r5, [pc, #24]	; (8003bd0 <_isatty_r+0x1c>)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	4604      	mov	r4, r0
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	602b      	str	r3, [r5, #0]
 8003bc0:	f7fd fc99 	bl	80014f6 <_isatty>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d102      	bne.n	8003bce <_isatty_r+0x1a>
 8003bc8:	682b      	ldr	r3, [r5, #0]
 8003bca:	b103      	cbz	r3, 8003bce <_isatty_r+0x1a>
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	bd38      	pop	{r3, r4, r5, pc}
 8003bd0:	20000218 	.word	0x20000218

08003bd4 <memcpy>:
 8003bd4:	440a      	add	r2, r1
 8003bd6:	4291      	cmp	r1, r2
 8003bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bdc:	d100      	bne.n	8003be0 <memcpy+0xc>
 8003bde:	4770      	bx	lr
 8003be0:	b510      	push	{r4, lr}
 8003be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bea:	4291      	cmp	r1, r2
 8003bec:	d1f9      	bne.n	8003be2 <memcpy+0xe>
 8003bee:	bd10      	pop	{r4, pc}

08003bf0 <_realloc_r>:
 8003bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf4:	4680      	mov	r8, r0
 8003bf6:	4614      	mov	r4, r2
 8003bf8:	460e      	mov	r6, r1
 8003bfa:	b921      	cbnz	r1, 8003c06 <_realloc_r+0x16>
 8003bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c00:	4611      	mov	r1, r2
 8003c02:	f7ff b839 	b.w	8002c78 <_malloc_r>
 8003c06:	b92a      	cbnz	r2, 8003c14 <_realloc_r+0x24>
 8003c08:	f7ff fb64 	bl	80032d4 <_free_r>
 8003c0c:	4625      	mov	r5, r4
 8003c0e:	4628      	mov	r0, r5
 8003c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c14:	f000 f81b 	bl	8003c4e <_malloc_usable_size_r>
 8003c18:	4284      	cmp	r4, r0
 8003c1a:	4607      	mov	r7, r0
 8003c1c:	d802      	bhi.n	8003c24 <_realloc_r+0x34>
 8003c1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c22:	d812      	bhi.n	8003c4a <_realloc_r+0x5a>
 8003c24:	4621      	mov	r1, r4
 8003c26:	4640      	mov	r0, r8
 8003c28:	f7ff f826 	bl	8002c78 <_malloc_r>
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d0ed      	beq.n	8003c0e <_realloc_r+0x1e>
 8003c32:	42bc      	cmp	r4, r7
 8003c34:	4622      	mov	r2, r4
 8003c36:	4631      	mov	r1, r6
 8003c38:	bf28      	it	cs
 8003c3a:	463a      	movcs	r2, r7
 8003c3c:	f7ff ffca 	bl	8003bd4 <memcpy>
 8003c40:	4631      	mov	r1, r6
 8003c42:	4640      	mov	r0, r8
 8003c44:	f7ff fb46 	bl	80032d4 <_free_r>
 8003c48:	e7e1      	b.n	8003c0e <_realloc_r+0x1e>
 8003c4a:	4635      	mov	r5, r6
 8003c4c:	e7df      	b.n	8003c0e <_realloc_r+0x1e>

08003c4e <_malloc_usable_size_r>:
 8003c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c52:	1f18      	subs	r0, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bfbc      	itt	lt
 8003c58:	580b      	ldrlt	r3, [r1, r0]
 8003c5a:	18c0      	addlt	r0, r0, r3
 8003c5c:	4770      	bx	lr
	...

08003c60 <_init>:
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c62:	bf00      	nop
 8003c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c66:	bc08      	pop	{r3}
 8003c68:	469e      	mov	lr, r3
 8003c6a:	4770      	bx	lr

08003c6c <_fini>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	bf00      	nop
 8003c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c72:	bc08      	pop	{r3}
 8003c74:	469e      	mov	lr, r3
 8003c76:	4770      	bx	lr

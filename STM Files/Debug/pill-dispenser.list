
pill-dispenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003668  08003668  00013668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003718  08003718  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003720  08003720  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003720  08003720  00013720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08003790  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08003790  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000090ca  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb2  00000000  00000000  000291a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  0002ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081b  00000000  00000000  0002b800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001725b  00000000  00000000  0002c01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c78c  00000000  00000000  00043276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cade  00000000  00000000  0004fa02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033d8  00000000  00000000  000dc4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000df8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003650 	.word	0x08003650

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003650 	.word	0x08003650

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b46      	ldr	r3, [pc, #280]	; (80006c0 <MX_GPIO_Init+0x134>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a45      	ldr	r2, [pc, #276]	; (80006c0 <MX_GPIO_Init+0x134>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b43      	ldr	r3, [pc, #268]	; (80006c0 <MX_GPIO_Init+0x134>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b3f      	ldr	r3, [pc, #252]	; (80006c0 <MX_GPIO_Init+0x134>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a3e      	ldr	r2, [pc, #248]	; (80006c0 <MX_GPIO_Init+0x134>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b3c      	ldr	r3, [pc, #240]	; (80006c0 <MX_GPIO_Init+0x134>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	4b38      	ldr	r3, [pc, #224]	; (80006c0 <MX_GPIO_Init+0x134>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a37      	ldr	r2, [pc, #220]	; (80006c0 <MX_GPIO_Init+0x134>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b35      	ldr	r3, [pc, #212]	; (80006c0 <MX_GPIO_Init+0x134>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <MX_GPIO_Init+0x134>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a30      	ldr	r2, [pc, #192]	; (80006c0 <MX_GPIO_Init+0x134>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <MX_GPIO_Init+0x134>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2101      	movs	r1, #1
 8000616:	482b      	ldr	r0, [pc, #172]	; (80006c4 <MX_GPIO_Init+0x138>)
 8000618:	f001 f8d0 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2120      	movs	r1, #32
 8000620:	4829      	ldr	r0, [pc, #164]	; (80006c8 <MX_GPIO_Init+0x13c>)
 8000622:	f001 f8cb 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|D6_Pin|D5_Pin|D4_Pin
 8000626:	2200      	movs	r2, #0
 8000628:	217e      	movs	r1, #126	; 0x7e
 800062a:	4828      	ldr	r0, [pc, #160]	; (80006cc <MX_GPIO_Init+0x140>)
 800062c:	f001 f8c6 	bl	80017bc <HAL_GPIO_WritePin>
                          |EN_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000630:	2301      	movs	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	481f      	ldr	r0, [pc, #124]	; (80006c4 <MX_GPIO_Init+0x138>)
 8000648:	f000 ff1c 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800064c:	2320      	movs	r3, #32
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	4819      	ldr	r0, [pc, #100]	; (80006c8 <MX_GPIO_Init+0x13c>)
 8000664:	f000 ff0e 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|D4_Pin
 8000668:	237e      	movs	r3, #126	; 0x7e
 800066a:	617b      	str	r3, [r7, #20]
                          |EN_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4813      	ldr	r0, [pc, #76]	; (80006cc <MX_GPIO_Init+0x140>)
 8000680:	f000 ff00 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Left_Button_Pin|Right_Button_Pin;
 8000684:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800068e:	2301      	movs	r3, #1
 8000690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	480a      	ldr	r0, [pc, #40]	; (80006c4 <MX_GPIO_Init+0x138>)
 800069a:	f000 fef3 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rightmost_Button_Pin;
 800069e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rightmost_Button_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_GPIO_Init+0x13c>)
 80006b4:	f000 fee6 	bl	8001484 <HAL_GPIO_Init>

}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020800 	.word	0x40020800
 80006c8:	40020000 	.word	0x40020000
 80006cc:	40020400 	.word	0x40020400

080006d0 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80006d0:	b5b0      	push	{r4, r5, r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80006de:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80006e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80006e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80006ea:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80006ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ee:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80006f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80006f2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f80e 	bl	8000726 <Lcd_init>

	return lcd;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	461d      	mov	r5, r3
 800070e:	f107 0410 	add.w	r4, r7, #16
 8000712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000716:	e894 0003 	ldmia.w	r4, {r0, r1}
 800071a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800071e:	68f8      	ldr	r0, [r7, #12]
 8000720:	3728      	adds	r7, #40	; 0x28
 8000722:	46bd      	mov	sp, r7
 8000724:	bdb0      	pop	{r4, r5, r7, pc}

08000726 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	7d9b      	ldrb	r3, [r3, #22]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d10c      	bne.n	8000750 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000736:	2133      	movs	r1, #51	; 0x33
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f87b 	bl	8000834 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800073e:	2132      	movs	r1, #50	; 0x32
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f000 f877 	bl	8000834 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000746:	2128      	movs	r1, #40	; 0x28
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f873 	bl	8000834 <lcd_write_command>
 800074e:	e003      	b.n	8000758 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000750:	2138      	movs	r1, #56	; 0x38
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f000 f86e 	bl	8000834 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000758:	2101      	movs	r1, #1
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f86a 	bl	8000834 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000760:	210c      	movs	r1, #12
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f000 f866 	bl	8000834 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000768:	2106      	movs	r1, #6
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f000 f862 	bl	8000834 <lcd_write_command>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	4906      	ldr	r1, [pc, #24]	; (80007a4 <Lcd_int+0x2c>)
 800078a:	4618      	mov	r0, r3
 800078c:	f002 f916 	bl	80029bc <siprintf>

	Lcd_string(lcd, buffer);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f000 f806 	bl	80007a8 <Lcd_string>
}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	08003668 	.word	0x08003668

080007a8 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e00a      	b.n	80007ce <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 f864 	bl	8000890 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	3301      	adds	r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	7bfc      	ldrb	r4, [r7, #15]
 80007d0:	6838      	ldr	r0, [r7, #0]
 80007d2:	f7ff fd05 	bl	80001e0 <strlen>
 80007d6:	4603      	mov	r3, r0
 80007d8:	429c      	cmp	r4, r3
 80007da:	d3ed      	bcc.n	80007b8 <Lcd_string+0x10>
	}
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd90      	pop	{r4, r7, pc}
	...

080007e8 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	70fb      	strb	r3, [r7, #3]
 80007f4:	4613      	mov	r3, r2
 80007f6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	4a07      	ldr	r2, [pc, #28]	; (8000818 <Lcd_cursor+0x30>)
 80007fc:	5cd2      	ldrb	r2, [r2, r3]
 80007fe:	78bb      	ldrb	r3, [r7, #2]
 8000800:	4413      	add	r3, r2
 8000802:	b2db      	uxtb	r3, r3
 8000804:	3b80      	subs	r3, #128	; 0x80
 8000806:	b2db      	uxtb	r3, r3
 8000808:	4619      	mov	r1, r3
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f812 	bl	8000834 <lcd_write_command>
	#endif
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	080036d0 	.word	0x080036d0

0800081c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000824:	2101      	movs	r1, #1
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f000 f804 	bl	8000834 <lcd_write_command>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6898      	ldr	r0, [r3, #8]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	899b      	ldrh	r3, [r3, #12]
 8000848:	2200      	movs	r2, #0
 800084a:	4619      	mov	r1, r3
 800084c:	f000 ffb6 	bl	80017bc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7d9b      	ldrb	r3, [r3, #22]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d111      	bne.n	800087c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	091b      	lsrs	r3, r3, #4
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2204      	movs	r2, #4
 8000860:	4619      	mov	r1, r3
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f842 	bl	80008ec <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000868:	78fb      	ldrb	r3, [r7, #3]
 800086a:	f003 030f 	and.w	r3, r3, #15
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2204      	movs	r2, #4
 8000872:	4619      	mov	r1, r3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 f839 	bl	80008ec <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800087a:	e005      	b.n	8000888 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	2208      	movs	r2, #8
 8000880:	4619      	mov	r1, r3
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 f832 	bl	80008ec <lcd_write>
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6898      	ldr	r0, [r3, #8]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	899b      	ldrh	r3, [r3, #12]
 80008a4:	2201      	movs	r2, #1
 80008a6:	4619      	mov	r1, r3
 80008a8:	f000 ff88 	bl	80017bc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	7d9b      	ldrb	r3, [r3, #22]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d111      	bne.n	80008d8 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80008b4:	78fb      	ldrb	r3, [r7, #3]
 80008b6:	091b      	lsrs	r3, r3, #4
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2204      	movs	r2, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 f814 	bl	80008ec <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2204      	movs	r2, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 f80b 	bl	80008ec <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80008d6:	e005      	b.n	80008e4 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2208      	movs	r2, #8
 80008dc:	4619      	mov	r1, r3
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f000 f804 	bl	80008ec <lcd_write>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
 80008f8:	4613      	mov	r3, r2
 80008fa:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	e019      	b.n	8000936 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	6818      	ldr	r0, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	4413      	add	r3, r2
 8000918:	8819      	ldrh	r1, [r3, #0]
 800091a:	78fa      	ldrb	r2, [r7, #3]
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	fa42 f303 	asr.w	r3, r2, r3
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	f000 ff46 	bl	80017bc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	3301      	adds	r3, #1
 8000934:	73fb      	strb	r3, [r7, #15]
 8000936:	7bfa      	ldrb	r2, [r7, #15]
 8000938:	78bb      	ldrb	r3, [r7, #2]
 800093a:	429a      	cmp	r2, r3
 800093c:	d3e1      	bcc.n	8000902 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6918      	ldr	r0, [r3, #16]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	8a9b      	ldrh	r3, [r3, #20]
 8000946:	2201      	movs	r2, #1
 8000948:	4619      	mov	r1, r3
 800094a:	f000 ff37 	bl	80017bc <HAL_GPIO_WritePin>
	DELAY(1);
 800094e:	2001      	movs	r0, #1
 8000950:	f000 fc8e 	bl	8001270 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6918      	ldr	r0, [r3, #16]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	8a9b      	ldrh	r3, [r3, #20]
 800095c:	2200      	movs	r2, #0
 800095e:	4619      	mov	r1, r3
 8000960:	f000 ff2c 	bl	80017bc <HAL_GPIO_WritePin>
}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <convertTo24HourFormat>:
	uint32_t time_pressed;
	int state;
};

// Function to convert minutes to 24-hour time format and return as a string
char* convertTo24HourFormat(int minutes) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
    int hours = minutes / 60;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <convertTo24HourFormat+0x68>)
 8000978:	fb82 1203 	smull	r1, r2, r2, r3
 800097c:	441a      	add	r2, r3
 800097e:	1152      	asrs	r2, r2, #5
 8000980:	17db      	asrs	r3, r3, #31
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	617b      	str	r3, [r7, #20]
    int mins = minutes % 60;
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <convertTo24HourFormat+0x68>)
 800098a:	fb83 1302 	smull	r1, r3, r3, r2
 800098e:	4413      	add	r3, r2
 8000990:	1159      	asrs	r1, r3, #5
 8000992:	17d3      	asrs	r3, r2, #31
 8000994:	1ac9      	subs	r1, r1, r3
 8000996:	460b      	mov	r3, r1
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	1a5b      	subs	r3, r3, r1
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	613b      	str	r3, [r7, #16]

    // Allocate memory for the result string
    char* result = (char*)malloc(6); // HH:MM\0
 80009a2:	2006      	movs	r0, #6
 80009a4:	f001 fe38 	bl	8002618 <malloc>
 80009a8:	4603      	mov	r3, r0
 80009aa:	60fb      	str	r3, [r7, #12]

    // Check if memory allocation was successful
    if (result == NULL) {
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d105      	bne.n	80009be <convertTo24HourFormat+0x52>
        printf("Memory allocation failed.\n");
 80009b2:	4809      	ldr	r0, [pc, #36]	; (80009d8 <convertTo24HourFormat+0x6c>)
 80009b4:	f001 fffa 	bl	80029ac <puts>
        exit(1); // Exit with an error code
 80009b8:	2001      	movs	r0, #1
 80009ba:	f001 fe1b 	bl	80025f4 <exit>
    }

    // Format the result string
    sprintf(result, "%02d:%02d", hours, mins);
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	4906      	ldr	r1, [pc, #24]	; (80009dc <convertTo24HourFormat+0x70>)
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f001 fff9 	bl	80029bc <siprintf>

    return result;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	88888889 	.word	0x88888889
 80009d8:	0800366c 	.word	0x0800366c
 80009dc:	08003688 	.word	0x08003688

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b0a8      	sub	sp, #160	; 0xa0
 80009e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e6:	f000 fbd1 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ea:	f000 f9a7 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ee:	f7ff fdcd 	bl	800058c <MX_GPIO_Init>
  MX_TIM2_Init();
 80009f2:	f000 fb35 	bl	8001060 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  unsigned int pill_count = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  unsigned int dispense_time = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  unsigned int input_state = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
 8000a08:	4bc4      	ldr	r3, [pc, #784]	; (8000d1c <main+0x33c>)
 8000a0a:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8000a0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 8000a14:	4ac2      	ldr	r2, [pc, #776]	; (8000d20 <main+0x340>)
 8000a16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1e:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
 8000a22:	4638      	mov	r0, r7
 8000a24:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000a28:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	9303      	str	r3, [sp, #12]
 8000a30:	2320      	movs	r3, #32
 8000a32:	9302      	str	r3, [sp, #8]
 8000a34:	4bbb      	ldr	r3, [pc, #748]	; (8000d24 <main+0x344>)
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	2340      	movs	r3, #64	; 0x40
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	4bb9      	ldr	r3, [pc, #740]	; (8000d24 <main+0x344>)
 8000a3e:	f7ff fe47 	bl	80006d0 <Lcd_create>
 8000a42:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000a46:	463d      	mov	r5, r7
 8000a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a50:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_cursor(&lcd, 0, 1);
 8000a54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fec3 	bl	80007e8 <Lcd_cursor>
  Lcd_string(&lcd, "# to dispense:");
 8000a62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a66:	49b0      	ldr	r1, [pc, #704]	; (8000d28 <main+0x348>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fe9d 	bl	80007a8 <Lcd_string>
  Lcd_cursor(&lcd, 1, 7);
 8000a6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a72:	2207      	movs	r2, #7
 8000a74:	2101      	movs	r1, #1
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff feb6 	bl	80007e8 <Lcd_cursor>
  Lcd_int(&lcd, pill_count);
 8000a7c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000a80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fe76 	bl	8000778 <Lcd_int>

  struct Button buttons[3];
  buttons[0].port = Left_Button_GPIO_Port;
 8000a8c:	4ba7      	ldr	r3, [pc, #668]	; (8000d2c <main+0x34c>)
 8000a8e:	61fb      	str	r3, [r7, #28]
  buttons[0].pin = Left_Button_Pin;
 8000a90:	2340      	movs	r3, #64	; 0x40
 8000a92:	843b      	strh	r3, [r7, #32]
  buttons[1].port = Right_Button_GPIO_Port;
 8000a94:	4ba5      	ldr	r3, [pc, #660]	; (8000d2c <main+0x34c>)
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  buttons[1].pin = Right_Button_Pin;
 8000a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9c:	863b      	strh	r3, [r7, #48]	; 0x30
  buttons[2].port = Rightmost_Button_GPIO_Port;
 8000a9e:	4ba4      	ldr	r3, [pc, #656]	; (8000d30 <main+0x350>)
 8000aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  buttons[2].pin = Rightmost_Button_Pin;
 8000aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  for (int i = 0; i < 3; i++){
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000ab0:	e014      	b.n	8000adc <main+0xfc>
	  buttons[i].time_pressed = 0;
 8000ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	3390      	adds	r3, #144	; 0x90
 8000aba:	443b      	add	r3, r7
 8000abc:	3b6c      	subs	r3, #108	; 0x6c
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
	  buttons[i].state = GPIO_PIN_SET;
 8000ac2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	3390      	adds	r3, #144	; 0x90
 8000aca:	443b      	add	r3, r7
 8000acc:	3b68      	subs	r3, #104	; 0x68
 8000ace:	2201      	movs	r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < 3; i++){
 8000ad2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000adc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	dde6      	ble.n	8000ab2 <main+0xd2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (int i = 0; i < 3; i++){
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ae8:	e112      	b.n	8000d10 <main+0x330>
		  if(HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin) == GPIO_PIN_RESET){
 8000aea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	3390      	adds	r3, #144	; 0x90
 8000af0:	443b      	add	r3, r7
 8000af2:	3b74      	subs	r3, #116	; 0x74
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000af8:	011b      	lsls	r3, r3, #4
 8000afa:	3390      	adds	r3, #144	; 0x90
 8000afc:	443b      	add	r3, r7
 8000afe:	3b70      	subs	r3, #112	; 0x70
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4610      	mov	r0, r2
 8000b06:	f000 fe41 	bl	800178c <HAL_GPIO_ReadPin>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d119      	bne.n	8000b44 <main+0x164>
			  if(buttons[i].state == GPIO_PIN_SET){
 8000b10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	3390      	adds	r3, #144	; 0x90
 8000b16:	443b      	add	r3, r7
 8000b18:	3b68      	subs	r3, #104	; 0x68
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	f040 80f4 	bne.w	8000d0a <main+0x32a>
				  buttons[i].time_pressed = HAL_GetTick();
 8000b22:	f000 fb99 	bl	8001258 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b2a:	011b      	lsls	r3, r3, #4
 8000b2c:	3390      	adds	r3, #144	; 0x90
 8000b2e:	443b      	add	r3, r7
 8000b30:	3b6c      	subs	r3, #108	; 0x6c
 8000b32:	601a      	str	r2, [r3, #0]
				  buttons[i].state = GPIO_PIN_RESET;
 8000b34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b36:	011b      	lsls	r3, r3, #4
 8000b38:	3390      	adds	r3, #144	; 0x90
 8000b3a:	443b      	add	r3, r7
 8000b3c:	3b68      	subs	r3, #104	; 0x68
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	e0e2      	b.n	8000d0a <main+0x32a>
			  }
		  }
		  else{
			  if(buttons[i].state == GPIO_PIN_RESET){
 8000b44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	3390      	adds	r3, #144	; 0x90
 8000b4a:	443b      	add	r3, r7
 8000b4c:	3b68      	subs	r3, #104	; 0x68
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f040 80da 	bne.w	8000d0a <main+0x32a>
				  if(HAL_GetTick() - buttons[i].time_pressed < 750){ //held less than 3 seconds
 8000b56:	f000 fb7f 	bl	8001258 <HAL_GetTick>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	3390      	adds	r3, #144	; 0x90
 8000b62:	443b      	add	r3, r7
 8000b64:	3b6c      	subs	r3, #108	; 0x6c
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	f240 22ed 	movw	r2, #749	; 0x2ed
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	f200 8093 	bhi.w	8000c9a <main+0x2ba>
					  if(input_state == 0){
 8000b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d149      	bne.n	8000c10 <main+0x230>
						  if(i == 0){
 8000b7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d129      	bne.n	8000bd6 <main+0x1f6>
							  if(pill_count == 10){
 8000b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b86:	2b0a      	cmp	r3, #10
 8000b88:	d10c      	bne.n	8000ba4 <main+0x1c4>
								  Lcd_cursor(&lcd, 1, 8);
 8000b8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b8e:	2208      	movs	r2, #8
 8000b90:	2101      	movs	r1, #1
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fe28 	bl	80007e8 <Lcd_cursor>
								  Lcd_string(&lcd, " ");
 8000b98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b9c:	4965      	ldr	r1, [pc, #404]	; (8000d34 <main+0x354>)
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fe02 	bl	80007a8 <Lcd_string>
							  }
							  if(pill_count > 0) pill_count--;
 8000ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d004      	beq.n	8000bb6 <main+0x1d6>
 8000bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
							  Lcd_cursor(&lcd, 1, 7);
 8000bb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bba:	2207      	movs	r2, #7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fe12 	bl	80007e8 <Lcd_cursor>
							  Lcd_int(&lcd, pill_count);
 8000bc4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000bc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fdd2 	bl	8000778 <Lcd_int>
 8000bd4:	e092      	b.n	8000cfc <main+0x31c>
						  }
						  else if(i == 1){
 8000bd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	f040 808f 	bne.w	8000cfc <main+0x31c>
							  if(pill_count < 10) pill_count++;
 8000bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000be2:	2b09      	cmp	r3, #9
 8000be4:	d804      	bhi.n	8000bf0 <main+0x210>
 8000be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000bea:	3301      	adds	r3, #1
 8000bec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
							  Lcd_cursor(&lcd, 1, 7);
 8000bf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fdf5 	bl	80007e8 <Lcd_cursor>
							  Lcd_int(&lcd, pill_count);
 8000bfe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000c02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fdb5 	bl	8000778 <Lcd_int>
 8000c0e:	e075      	b.n	8000cfc <main+0x31c>
						  }
					  }
					  else if(input_state == 1){
 8000c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d171      	bne.n	8000cfc <main+0x31c>
						  if(i == 0){
 8000c18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d11c      	bne.n	8000c58 <main+0x278>
							  if(dispense_time > 0) dispense_time -= 30;
 8000c1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d004      	beq.n	8000c30 <main+0x250>
 8000c26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c2a:	3b1e      	subs	r3, #30
 8000c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
							  Lcd_cursor(&lcd, 1, 5);
 8000c30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c34:	2205      	movs	r2, #5
 8000c36:	2101      	movs	r1, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fdd5 	bl	80007e8 <Lcd_cursor>
							  Lcd_string(&lcd, convertTo24HourFormat(dispense_time));
 8000c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fe92 	bl	800096c <convertTo24HourFormat>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fda9 	bl	80007a8 <Lcd_string>
 8000c56:	e051      	b.n	8000cfc <main+0x31c>
						  }
						  else if(i == 1){
 8000c58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d14e      	bne.n	8000cfc <main+0x31c>
							  if(dispense_time < 1440) dispense_time += 30;
 8000c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c62:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8000c66:	d204      	bcs.n	8000c72 <main+0x292>
 8000c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c6c:	331e      	adds	r3, #30
 8000c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
							  Lcd_cursor(&lcd, 1, 5);
 8000c72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c76:	2205      	movs	r2, #5
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fdb4 	bl	80007e8 <Lcd_cursor>
							  Lcd_string(&lcd, convertTo24HourFormat(dispense_time));
 8000c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fe71 	bl	800096c <convertTo24HourFormat>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fd88 	bl	80007a8 <Lcd_string>
 8000c98:	e030      	b.n	8000cfc <main+0x31c>
						  }
					  }
				  }
				  else{
					  if(input_state == 0 && i == 2){
 8000c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d12c      	bne.n	8000cfc <main+0x31c>
 8000ca2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d129      	bne.n	8000cfc <main+0x31c>
						  input_state++;
 8000ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000cac:	3301      	adds	r3, #1
 8000cae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						  Lcd_clear(&lcd);
 8000cb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fdb0 	bl	800081c <Lcd_clear>
						  Lcd_cursor(&lcd, 0, 1);
 8000cbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fd8f 	bl	80007e8 <Lcd_cursor>
						  Lcd_string(&lcd, "Dispense time:");
 8000cca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cce:	491a      	ldr	r1, [pc, #104]	; (8000d38 <main+0x358>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fd69 	bl	80007a8 <Lcd_string>
						  Lcd_cursor(&lcd, 1, 5);
 8000cd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cda:	2205      	movs	r2, #5
 8000cdc:	2101      	movs	r1, #1
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd82 	bl	80007e8 <Lcd_cursor>
						  Lcd_string(&lcd, convertTo24HourFormat(dispense_time));
 8000ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fe3f 	bl	800096c <convertTo24HourFormat>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fd56 	bl	80007a8 <Lcd_string>
					  }
				  }
				  buttons[i].state = GPIO_PIN_SET;
 8000cfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cfe:	011b      	lsls	r3, r3, #4
 8000d00:	3390      	adds	r3, #144	; 0x90
 8000d02:	443b      	add	r3, r7
 8000d04:	3b68      	subs	r3, #104	; 0x68
 8000d06:	2201      	movs	r2, #1
 8000d08:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < 3; i++){
 8000d0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	f77f aee9 	ble.w	8000aea <main+0x10a>
 8000d18:	e6e4      	b.n	8000ae4 <main+0x104>
 8000d1a:	bf00      	nop
 8000d1c:	080036b8 	.word	0x080036b8
 8000d20:	080036c8 	.word	0x080036c8
 8000d24:	40020400 	.word	0x40020400
 8000d28:	08003694 	.word	0x08003694
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40020000 	.word	0x40020000
 8000d34:	080036a4 	.word	0x080036a4
 8000d38:	080036a8 	.word	0x080036a8

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	; 0x50
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	2230      	movs	r2, #48	; 0x30
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 ff2e 	bl	8002bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <SystemClock_Config+0xcc>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <SystemClock_Config+0xcc>)
 8000d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <SystemClock_Config+0xcc>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d88:	4a20      	ldr	r2, [pc, #128]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da0:	2301      	movs	r3, #1
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da4:	2310      	movs	r3, #16
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da8:	2302      	movs	r3, #2
 8000daa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000db0:	2308      	movs	r3, #8
 8000db2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000db4:	2348      	movs	r3, #72	; 0x48
 8000db6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fd13 	bl	80017f0 <HAL_RCC_OscConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dd0:	f000 f81e 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	2102      	movs	r1, #2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 ff75 	bl	8001ce0 <HAL_RCC_ClockConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dfc:	f000 f808 	bl	8000e10 <Error_Handler>
  }
}
 8000e00:	bf00      	nop
 8000e02:	3750      	adds	r7, #80	; 0x50
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40007000 	.word	0x40007000

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>
	...

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f000 fade 	bl	800141c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800

08000e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <NMI_Handler+0x4>

08000e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <HardFault_Handler+0x4>

08000e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <MemManage_Handler+0x4>

08000e7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <BusFault_Handler+0x4>

08000e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <UsageFault_Handler+0x4>

08000e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 f9ba 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000eca:	f001 fecd 	bl	8002c68 <__errno>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2216      	movs	r2, #22
 8000ed2:	601a      	str	r2, [r3, #0]
  return -1;
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_exit>:

void _exit (int status)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ffe7 	bl	8000ec0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ef2:	e7fe      	b.n	8000ef2 <_exit+0x12>

08000ef4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e00a      	b.n	8000f1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f06:	f3af 8000 	nop.w
 8000f0a:	4601      	mov	r1, r0
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	60ba      	str	r2, [r7, #8]
 8000f12:	b2ca      	uxtb	r2, r1
 8000f14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbf0      	blt.n	8000f06 <_read+0x12>
  }

  return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e009      	b.n	8000f54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	60ba      	str	r2, [r7, #8]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbf1      	blt.n	8000f40 <_write+0x12>
  }
  return len;
 8000f5c:	687b      	ldr	r3, [r7, #4]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_close>:

int _close(int file)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_isatty>:

int _isatty(int file)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f001 fe32 	bl	8002c68 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20018000 	.word	0x20018000
 8001030:	00000400 	.word	0x00000400
 8001034:	20000084 	.word	0x20000084
 8001038:	20000220 	.word	0x20000220

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	463b      	mov	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_TIM2_Init+0x94>)
 800107e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001082:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_TIM2_Init+0x94>)
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_TIM2_Init+0x94>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_TIM2_Init+0x94>)
 8001092:	f04f 32ff 	mov.w	r2, #4294967295
 8001096:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_TIM2_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010a6:	f001 f807 	bl	80020b8 <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b0:	f7ff feae 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010c2:	f001 f848 	bl	8002156 <HAL_TIM_ConfigClockSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010cc:	f7ff fea0 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010de:	f001 fa1b 	bl	8002518 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010e8:	f7ff fe92 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000088 	.word	0x20000088

080010f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001108:	d10d      	bne.n	8001126 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_TIM_Base_MspInit+0x3c>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_TIM_Base_MspInit+0x3c>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_TIM_Base_MspInit+0x3c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001170 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800113e:	490e      	ldr	r1, [pc, #56]	; (8001178 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001140:	4a0e      	ldr	r2, [pc, #56]	; (800117c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001154:	4c0b      	ldr	r4, [pc, #44]	; (8001184 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001162:	f7ff ff6b 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001166:	f001 fd85 	bl	8002c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116a:	f7ff fc39 	bl	80009e0 <main>
  bx  lr    
 800116e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001170:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800117c:	08003728 	.word	0x08003728
  ldr r2, =_sbss
 8001180:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001184:	20000220 	.word	0x20000220

08001188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC_IRQHandler>
	...

0800118c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <HAL_Init+0x40>)
 8001196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_Init+0x40>)
 80011a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <HAL_Init+0x40>)
 80011ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 f931 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 f808 	bl	80011d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c0:	f7ff fe2c 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023c00 	.word	0x40023c00

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_InitTick+0x54>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x58>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f93b 	bl	800146a <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00e      	b.n	800121c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d80a      	bhi.n	800121a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f000 f911 	bl	8001432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <HAL_InitTick+0x5c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000000 	.word	0x20000000
 8001228:	20000008 	.word	0x20000008
 800122c:	20000004 	.word	0x20000004

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x20>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_IncTick+0x24>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008
 8001254:	200000d0 	.word	0x200000d0

08001258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_GetTick+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	200000d0 	.word	0x200000d0

08001270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff ffee 	bl	8001258 <HAL_GetTick>
 800127c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d005      	beq.n	8001296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_Delay+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001296:	bf00      	nop
 8001298:	f7ff ffde 	bl	8001258 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d8f7      	bhi.n	8001298 <HAL_Delay+0x28>
  {
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	; (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <__NVIC_GetPriorityGrouping+0x18>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f003 0307 	and.w	r3, r3, #7
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0a      	blt.n	8001346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <__NVIC_SetPriority+0x4c>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	0112      	lsls	r2, r2, #4
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	440b      	add	r3, r1
 8001340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001344:	e00a      	b.n	800135c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4908      	ldr	r1, [pc, #32]	; (800136c <__NVIC_SetPriority+0x50>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	3b04      	subs	r3, #4
 8001354:	0112      	lsls	r2, r2, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	440b      	add	r3, r1
 800135a:	761a      	strb	r2, [r3, #24]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000e100 	.word	0xe000e100
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f1c3 0307 	rsb	r3, r3, #7
 800138a:	2b04      	cmp	r3, #4
 800138c:	bf28      	it	cs
 800138e:	2304      	movcs	r3, #4
 8001390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3304      	adds	r3, #4
 8001396:	2b06      	cmp	r3, #6
 8001398:	d902      	bls.n	80013a0 <NVIC_EncodePriority+0x30>
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3b03      	subs	r3, #3
 800139e:	e000      	b.n	80013a2 <NVIC_EncodePriority+0x32>
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	401a      	ands	r2, r3
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43d9      	mvns	r1, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	4313      	orrs	r3, r2
         );
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	; 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f7ff ff8e 	bl	800131c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff47 	bl	80012b8 <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff5c 	bl	8001300 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff8e 	bl	8001370 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5d 	bl	800131c <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffb0 	bl	80013d8 <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
 800149e:	e159      	b.n	8001754 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	f040 8148 	bne.w	800174e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d005      	beq.n	80014d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d130      	bne.n	8001538 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800150c:	2201      	movs	r2, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 0201 	and.w	r2, r3, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b03      	cmp	r3, #3
 8001542:	d017      	beq.n	8001574 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d123      	bne.n	80015c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	08da      	lsrs	r2, r3, #3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3208      	adds	r2, #8
 8001588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	220f      	movs	r2, #15
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	08da      	lsrs	r2, r3, #3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3208      	adds	r2, #8
 80015c2:	69b9      	ldr	r1, [r7, #24]
 80015c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	2203      	movs	r2, #3
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0203 	and.w	r2, r3, #3
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 80a2 	beq.w	800174e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b57      	ldr	r3, [pc, #348]	; (800176c <HAL_GPIO_Init+0x2e8>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	4a56      	ldr	r2, [pc, #344]	; (800176c <HAL_GPIO_Init+0x2e8>)
 8001614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001618:	6453      	str	r3, [r2, #68]	; 0x44
 800161a:	4b54      	ldr	r3, [pc, #336]	; (800176c <HAL_GPIO_Init+0x2e8>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001626:	4a52      	ldr	r2, [pc, #328]	; (8001770 <HAL_GPIO_Init+0x2ec>)
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3302      	adds	r3, #2
 800162e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	220f      	movs	r2, #15
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a49      	ldr	r2, [pc, #292]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d019      	beq.n	8001686 <HAL_GPIO_Init+0x202>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a48      	ldr	r2, [pc, #288]	; (8001778 <HAL_GPIO_Init+0x2f4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d013      	beq.n	8001682 <HAL_GPIO_Init+0x1fe>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a47      	ldr	r2, [pc, #284]	; (800177c <HAL_GPIO_Init+0x2f8>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d00d      	beq.n	800167e <HAL_GPIO_Init+0x1fa>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a46      	ldr	r2, [pc, #280]	; (8001780 <HAL_GPIO_Init+0x2fc>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d007      	beq.n	800167a <HAL_GPIO_Init+0x1f6>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a45      	ldr	r2, [pc, #276]	; (8001784 <HAL_GPIO_Init+0x300>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d101      	bne.n	8001676 <HAL_GPIO_Init+0x1f2>
 8001672:	2304      	movs	r3, #4
 8001674:	e008      	b.n	8001688 <HAL_GPIO_Init+0x204>
 8001676:	2307      	movs	r3, #7
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x204>
 800167a:	2303      	movs	r3, #3
 800167c:	e004      	b.n	8001688 <HAL_GPIO_Init+0x204>
 800167e:	2302      	movs	r3, #2
 8001680:	e002      	b.n	8001688 <HAL_GPIO_Init+0x204>
 8001682:	2301      	movs	r3, #1
 8001684:	e000      	b.n	8001688 <HAL_GPIO_Init+0x204>
 8001686:	2300      	movs	r3, #0
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	f002 0203 	and.w	r2, r2, #3
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	4093      	lsls	r3, r2
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001698:	4935      	ldr	r1, [pc, #212]	; (8001770 <HAL_GPIO_Init+0x2ec>)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	3302      	adds	r3, #2
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a6:	4b38      	ldr	r3, [pc, #224]	; (8001788 <HAL_GPIO_Init+0x304>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ca:	4a2f      	ldr	r2, [pc, #188]	; (8001788 <HAL_GPIO_Init+0x304>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_GPIO_Init+0x304>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016f4:	4a24      	ldr	r2, [pc, #144]	; (8001788 <HAL_GPIO_Init+0x304>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_GPIO_Init+0x304>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800171e:	4a1a      	ldr	r2, [pc, #104]	; (8001788 <HAL_GPIO_Init+0x304>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_GPIO_Init+0x304>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001748:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <HAL_GPIO_Init+0x304>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3301      	adds	r3, #1
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	2b0f      	cmp	r3, #15
 8001758:	f67f aea2 	bls.w	80014a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	40013800 	.word	0x40013800
 8001774:	40020000 	.word	0x40020000
 8001778:	40020400 	.word	0x40020400
 800177c:	40020800 	.word	0x40020800
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40021000 	.word	0x40021000
 8001788:	40013c00 	.word	0x40013c00

0800178c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e001      	b.n	80017ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
 80017c8:	4613      	mov	r3, r2
 80017ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017cc:	787b      	ldrb	r3, [r7, #1]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017d8:	e003      	b.n	80017e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	041a      	lsls	r2, r3, #16
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	619a      	str	r2, [r3, #24]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e267      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d075      	beq.n	80018fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800180e:	4b88      	ldr	r3, [pc, #544]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b04      	cmp	r3, #4
 8001818:	d00c      	beq.n	8001834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800181a:	4b85      	ldr	r3, [pc, #532]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001822:	2b08      	cmp	r3, #8
 8001824:	d112      	bne.n	800184c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001826:	4b82      	ldr	r3, [pc, #520]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001832:	d10b      	bne.n	800184c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001834:	4b7e      	ldr	r3, [pc, #504]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d05b      	beq.n	80018f8 <HAL_RCC_OscConfig+0x108>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d157      	bne.n	80018f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e242      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001854:	d106      	bne.n	8001864 <HAL_RCC_OscConfig+0x74>
 8001856:	4b76      	ldr	r3, [pc, #472]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a75      	ldr	r2, [pc, #468]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e01d      	b.n	80018a0 <HAL_RCC_OscConfig+0xb0>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x98>
 800186e:	4b70      	ldr	r3, [pc, #448]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6f      	ldr	r2, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b6d      	ldr	r3, [pc, #436]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a6c      	ldr	r2, [pc, #432]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e00b      	b.n	80018a0 <HAL_RCC_OscConfig+0xb0>
 8001888:	4b69      	ldr	r3, [pc, #420]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a68      	ldr	r2, [pc, #416]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800188e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a65      	ldr	r2, [pc, #404]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800189a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d013      	beq.n	80018d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fcd6 	bl	8001258 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fcd2 	bl	8001258 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e207      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c2:	4b5b      	ldr	r3, [pc, #364]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0xc0>
 80018ce:	e014      	b.n	80018fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fcc2 	bl	8001258 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff fcbe 	bl	8001258 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e1f3      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ea:	4b51      	ldr	r3, [pc, #324]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0xe8>
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d063      	beq.n	80019ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001906:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00b      	beq.n	800192a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001912:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800191a:	2b08      	cmp	r3, #8
 800191c:	d11c      	bne.n	8001958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800191e:	4b44      	ldr	r3, [pc, #272]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d116      	bne.n	8001958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	4b41      	ldr	r3, [pc, #260]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d005      	beq.n	8001942 <HAL_RCC_OscConfig+0x152>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d001      	beq.n	8001942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e1c7      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001942:	4b3b      	ldr	r3, [pc, #236]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4937      	ldr	r1, [pc, #220]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001956:	e03a      	b.n	80019ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <HAL_RCC_OscConfig+0x244>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff fc77 	bl	8001258 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196e:	f7ff fc73 	bl	8001258 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1a8      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001980:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198c:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4925      	ldr	r1, [pc, #148]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 800199c:	4313      	orrs	r3, r2
 800199e:	600b      	str	r3, [r1, #0]
 80019a0:	e015      	b.n	80019ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_RCC_OscConfig+0x244>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff fc56 	bl	8001258 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b0:	f7ff fc52 	bl	8001258 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e187      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c2:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d036      	beq.n	8001a48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d016      	beq.n	8001a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_RCC_OscConfig+0x248>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e8:	f7ff fc36 	bl	8001258 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f0:	f7ff fc32 	bl	8001258 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e167      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a02:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_RCC_OscConfig+0x240>)
 8001a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x200>
 8001a0e:	e01b      	b.n	8001a48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_OscConfig+0x248>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7ff fc1f 	bl	8001258 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1c:	e00e      	b.n	8001a3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fc1b 	bl	8001258 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d907      	bls.n	8001a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e150      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
 8001a30:	40023800 	.word	0x40023800
 8001a34:	42470000 	.word	0x42470000
 8001a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	4b88      	ldr	r3, [pc, #544]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1ea      	bne.n	8001a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 8097 	beq.w	8001b84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a5a:	4b81      	ldr	r3, [pc, #516]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10f      	bne.n	8001a86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	4b7d      	ldr	r3, [pc, #500]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a7c      	ldr	r2, [pc, #496]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b7a      	ldr	r3, [pc, #488]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a82:	2301      	movs	r3, #1
 8001a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a86:	4b77      	ldr	r3, [pc, #476]	; (8001c64 <HAL_RCC_OscConfig+0x474>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d118      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a92:	4b74      	ldr	r3, [pc, #464]	; (8001c64 <HAL_RCC_OscConfig+0x474>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a73      	ldr	r2, [pc, #460]	; (8001c64 <HAL_RCC_OscConfig+0x474>)
 8001a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a9e:	f7ff fbdb 	bl	8001258 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa6:	f7ff fbd7 	bl	8001258 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e10c      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <HAL_RCC_OscConfig+0x474>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x2ea>
 8001acc:	4b64      	ldr	r3, [pc, #400]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad0:	4a63      	ldr	r2, [pc, #396]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad8:	e01c      	b.n	8001b14 <HAL_RCC_OscConfig+0x324>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x30c>
 8001ae2:	4b5f      	ldr	r3, [pc, #380]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a5e      	ldr	r2, [pc, #376]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	4b5c      	ldr	r3, [pc, #368]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af2:	4a5b      	ldr	r2, [pc, #364]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6713      	str	r3, [r2, #112]	; 0x70
 8001afa:	e00b      	b.n	8001b14 <HAL_RCC_OscConfig+0x324>
 8001afc:	4b58      	ldr	r3, [pc, #352]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	4a57      	ldr	r2, [pc, #348]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	6713      	str	r3, [r2, #112]	; 0x70
 8001b08:	4b55      	ldr	r3, [pc, #340]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	4a54      	ldr	r2, [pc, #336]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d015      	beq.n	8001b48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fb9c 	bl	8001258 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b24:	f7ff fb98 	bl	8001258 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e0cb      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3a:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0ee      	beq.n	8001b24 <HAL_RCC_OscConfig+0x334>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7ff fb86 	bl	8001258 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b50:	f7ff fb82 	bl	8001258 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e0b5      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b66:	4b3e      	ldr	r3, [pc, #248]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ee      	bne.n	8001b50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d105      	bne.n	8001b84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b78:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	4a38      	ldr	r2, [pc, #224]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80a1 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d05c      	beq.n	8001c54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d141      	bne.n	8001c26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba2:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <HAL_RCC_OscConfig+0x478>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fb56 	bl	8001258 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff fb52 	bl	8001258 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e087      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc2:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	3b01      	subs	r3, #1
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	061b      	lsls	r3, r3, #24
 8001bf2:	491b      	ldr	r1, [pc, #108]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_RCC_OscConfig+0x478>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fb2b 	bl	8001258 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c06:	f7ff fb27 	bl	8001258 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e05c      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x416>
 8001c24:	e054      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_RCC_OscConfig+0x478>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fb14 	bl	8001258 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c34:	f7ff fb10 	bl	8001258 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e045      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_RCC_OscConfig+0x470>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x444>
 8001c52:	e03d      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e038      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40007000 	.word	0x40007000
 8001c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_RCC_OscConfig+0x4ec>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d028      	beq.n	8001ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d121      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d11a      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d111      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	085b      	lsrs	r3, r3, #1
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0cc      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b68      	ldr	r3, [pc, #416]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d90c      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b65      	ldr	r3, [pc, #404]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0b8      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d4c:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d58:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	494d      	ldr	r1, [pc, #308]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d044      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d119      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e07f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9e:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e06f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dae:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e067      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f023 0203 	bic.w	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4934      	ldr	r1, [pc, #208]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7ff fa42 	bl	8001258 <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7ff fa3e 	bl	8001258 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e04f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 020c 	and.w	r2, r3, #12
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d1eb      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e00:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d20c      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e032      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4916      	ldr	r1, [pc, #88]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	490e      	ldr	r1, [pc, #56]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e66:	f000 f821 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	490a      	ldr	r1, [pc, #40]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	5ccb      	ldrb	r3, [r1, r3]
 8001e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f9a2 	bl	80011d0 <HAL_InitTick>

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023c00 	.word	0x40023c00
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	080036d4 	.word	0x080036d4
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	20000004 	.word	0x20000004

08001eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eb0:	b094      	sub	sp, #80	; 0x50
 8001eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8001eb8:	2300      	movs	r3, #0
 8001eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec4:	4b79      	ldr	r3, [pc, #484]	; (80020ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d00d      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x40>
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	f200 80e1 	bhi.w	8002098 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d003      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ede:	e0db      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ee0:	4b73      	ldr	r3, [pc, #460]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ee2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ee4:	e0db      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ee6:	4b73      	ldr	r3, [pc, #460]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ee8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eea:	e0d8      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eec:	4b6f      	ldr	r3, [pc, #444]	; (80020ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ef4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ef6:	4b6d      	ldr	r3, [pc, #436]	; (80020ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d063      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f02:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	099b      	lsrs	r3, r3, #6
 8001f08:	2200      	movs	r2, #0
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f14:	633b      	str	r3, [r7, #48]	; 0x30
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34
 8001f1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f1e:	4622      	mov	r2, r4
 8001f20:	462b      	mov	r3, r5
 8001f22:	f04f 0000 	mov.w	r0, #0
 8001f26:	f04f 0100 	mov.w	r1, #0
 8001f2a:	0159      	lsls	r1, r3, #5
 8001f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f30:	0150      	lsls	r0, r2, #5
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4621      	mov	r1, r4
 8001f38:	1a51      	subs	r1, r2, r1
 8001f3a:	6139      	str	r1, [r7, #16]
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f50:	4659      	mov	r1, fp
 8001f52:	018b      	lsls	r3, r1, #6
 8001f54:	4651      	mov	r1, sl
 8001f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f5a:	4651      	mov	r1, sl
 8001f5c:	018a      	lsls	r2, r1, #6
 8001f5e:	4651      	mov	r1, sl
 8001f60:	ebb2 0801 	subs.w	r8, r2, r1
 8001f64:	4659      	mov	r1, fp
 8001f66:	eb63 0901 	sbc.w	r9, r3, r1
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f7e:	4690      	mov	r8, r2
 8001f80:	4699      	mov	r9, r3
 8001f82:	4623      	mov	r3, r4
 8001f84:	eb18 0303 	adds.w	r3, r8, r3
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	462b      	mov	r3, r5
 8001f8c:	eb49 0303 	adc.w	r3, r9, r3
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	024b      	lsls	r3, r1, #9
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fa8:	4621      	mov	r1, r4
 8001faa:	024a      	lsls	r2, r1, #9
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fbc:	f7fe f968 	bl	8000290 <__aeabi_uldivmod>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fc8:	e058      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fca:	4b38      	ldr	r3, [pc, #224]	; (80020ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	099b      	lsrs	r3, r3, #6
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fda:	623b      	str	r3, [r7, #32]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fe4:	4642      	mov	r2, r8
 8001fe6:	464b      	mov	r3, r9
 8001fe8:	f04f 0000 	mov.w	r0, #0
 8001fec:	f04f 0100 	mov.w	r1, #0
 8001ff0:	0159      	lsls	r1, r3, #5
 8001ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ff6:	0150      	lsls	r0, r2, #5
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4641      	mov	r1, r8
 8001ffe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002002:	4649      	mov	r1, r9
 8002004:	eb63 0b01 	sbc.w	fp, r3, r1
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002014:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002018:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800201c:	ebb2 040a 	subs.w	r4, r2, sl
 8002020:	eb63 050b 	sbc.w	r5, r3, fp
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	00eb      	lsls	r3, r5, #3
 800202e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002032:	00e2      	lsls	r2, r4, #3
 8002034:	4614      	mov	r4, r2
 8002036:	461d      	mov	r5, r3
 8002038:	4643      	mov	r3, r8
 800203a:	18e3      	adds	r3, r4, r3
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	464b      	mov	r3, r9
 8002040:	eb45 0303 	adc.w	r3, r5, r3
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002052:	4629      	mov	r1, r5
 8002054:	028b      	lsls	r3, r1, #10
 8002056:	4621      	mov	r1, r4
 8002058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800205c:	4621      	mov	r1, r4
 800205e:	028a      	lsls	r2, r1, #10
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002066:	2200      	movs	r2, #0
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	61fa      	str	r2, [r7, #28]
 800206c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002070:	f7fe f90e 	bl	8000290 <__aeabi_uldivmod>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4613      	mov	r3, r2
 800207a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_RCC_GetSysClockFreq+0x200>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	3301      	adds	r3, #1
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800208c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800208e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002096:	e002      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800209a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800209c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800209e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3750      	adds	r7, #80	; 0x50
 80020a4:	46bd      	mov	sp, r7
 80020a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800
 80020b0:	00f42400 	.word	0x00f42400
 80020b4:	007a1200 	.word	0x007a1200

080020b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e041      	b.n	800214e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff f80a 	bl	80010f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	4619      	mov	r1, r3
 80020f6:	4610      	mov	r0, r2
 80020f8:	f000 f8f4 	bl	80022e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_TIM_ConfigClockSource+0x1c>
 800216e:	2302      	movs	r3, #2
 8002170:	e0b4      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x186>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002190:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002198:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021aa:	d03e      	beq.n	800222a <HAL_TIM_ConfigClockSource+0xd4>
 80021ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b0:	f200 8087 	bhi.w	80022c2 <HAL_TIM_ConfigClockSource+0x16c>
 80021b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b8:	f000 8086 	beq.w	80022c8 <HAL_TIM_ConfigClockSource+0x172>
 80021bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c0:	d87f      	bhi.n	80022c2 <HAL_TIM_ConfigClockSource+0x16c>
 80021c2:	2b70      	cmp	r3, #112	; 0x70
 80021c4:	d01a      	beq.n	80021fc <HAL_TIM_ConfigClockSource+0xa6>
 80021c6:	2b70      	cmp	r3, #112	; 0x70
 80021c8:	d87b      	bhi.n	80022c2 <HAL_TIM_ConfigClockSource+0x16c>
 80021ca:	2b60      	cmp	r3, #96	; 0x60
 80021cc:	d050      	beq.n	8002270 <HAL_TIM_ConfigClockSource+0x11a>
 80021ce:	2b60      	cmp	r3, #96	; 0x60
 80021d0:	d877      	bhi.n	80022c2 <HAL_TIM_ConfigClockSource+0x16c>
 80021d2:	2b50      	cmp	r3, #80	; 0x50
 80021d4:	d03c      	beq.n	8002250 <HAL_TIM_ConfigClockSource+0xfa>
 80021d6:	2b50      	cmp	r3, #80	; 0x50
 80021d8:	d873      	bhi.n	80022c2 <HAL_TIM_ConfigClockSource+0x16c>
 80021da:	2b40      	cmp	r3, #64	; 0x40
 80021dc:	d058      	beq.n	8002290 <HAL_TIM_ConfigClockSource+0x13a>
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d86f      	bhi.n	80022c2 <HAL_TIM_ConfigClockSource+0x16c>
 80021e2:	2b30      	cmp	r3, #48	; 0x30
 80021e4:	d064      	beq.n	80022b0 <HAL_TIM_ConfigClockSource+0x15a>
 80021e6:	2b30      	cmp	r3, #48	; 0x30
 80021e8:	d86b      	bhi.n	80022c2 <HAL_TIM_ConfigClockSource+0x16c>
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d060      	beq.n	80022b0 <HAL_TIM_ConfigClockSource+0x15a>
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d867      	bhi.n	80022c2 <HAL_TIM_ConfigClockSource+0x16c>
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d05c      	beq.n	80022b0 <HAL_TIM_ConfigClockSource+0x15a>
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d05a      	beq.n	80022b0 <HAL_TIM_ConfigClockSource+0x15a>
 80021fa:	e062      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6899      	ldr	r1, [r3, #8]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f000 f964 	bl	80024d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800221e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	609a      	str	r2, [r3, #8]
      break;
 8002228:	e04f      	b.n	80022ca <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6899      	ldr	r1, [r3, #8]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f000 f94d 	bl	80024d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800224c:	609a      	str	r2, [r3, #8]
      break;
 800224e:	e03c      	b.n	80022ca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	461a      	mov	r2, r3
 800225e:	f000 f8c1 	bl	80023e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2150      	movs	r1, #80	; 0x50
 8002268:	4618      	mov	r0, r3
 800226a:	f000 f91a 	bl	80024a2 <TIM_ITRx_SetConfig>
      break;
 800226e:	e02c      	b.n	80022ca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	461a      	mov	r2, r3
 800227e:	f000 f8e0 	bl	8002442 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2160      	movs	r1, #96	; 0x60
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f90a 	bl	80024a2 <TIM_ITRx_SetConfig>
      break;
 800228e:	e01c      	b.n	80022ca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	461a      	mov	r2, r3
 800229e:	f000 f8a1 	bl	80023e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2140      	movs	r1, #64	; 0x40
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f8fa 	bl	80024a2 <TIM_ITRx_SetConfig>
      break;
 80022ae:	e00c      	b.n	80022ca <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	4610      	mov	r0, r2
 80022bc:	f000 f8f1 	bl	80024a2 <TIM_ITRx_SetConfig>
      break;
 80022c0:	e003      	b.n	80022ca <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
      break;
 80022c6:	e000      	b.n	80022ca <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a34      	ldr	r2, [pc, #208]	; (80023c8 <TIM_Base_SetConfig+0xe4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00f      	beq.n	800231c <TIM_Base_SetConfig+0x38>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002302:	d00b      	beq.n	800231c <TIM_Base_SetConfig+0x38>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a31      	ldr	r2, [pc, #196]	; (80023cc <TIM_Base_SetConfig+0xe8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <TIM_Base_SetConfig+0x38>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a30      	ldr	r2, [pc, #192]	; (80023d0 <TIM_Base_SetConfig+0xec>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d003      	beq.n	800231c <TIM_Base_SetConfig+0x38>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a2f      	ldr	r2, [pc, #188]	; (80023d4 <TIM_Base_SetConfig+0xf0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d108      	bne.n	800232e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a25      	ldr	r2, [pc, #148]	; (80023c8 <TIM_Base_SetConfig+0xe4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01b      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233c:	d017      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a22      	ldr	r2, [pc, #136]	; (80023cc <TIM_Base_SetConfig+0xe8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a21      	ldr	r2, [pc, #132]	; (80023d0 <TIM_Base_SetConfig+0xec>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00f      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a20      	ldr	r2, [pc, #128]	; (80023d4 <TIM_Base_SetConfig+0xf0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00b      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <TIM_Base_SetConfig+0xf4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d007      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <TIM_Base_SetConfig+0xf8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d003      	beq.n	800236e <TIM_Base_SetConfig+0x8a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <TIM_Base_SetConfig+0xfc>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d108      	bne.n	8002380 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <TIM_Base_SetConfig+0xe4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d103      	bne.n	80023b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	615a      	str	r2, [r3, #20]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40010000 	.word	0x40010000
 80023cc:	40000400 	.word	0x40000400
 80023d0:	40000800 	.word	0x40000800
 80023d4:	40000c00 	.word	0x40000c00
 80023d8:	40014000 	.word	0x40014000
 80023dc:	40014400 	.word	0x40014400
 80023e0:	40014800 	.word	0x40014800

080023e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	f023 0201 	bic.w	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800240e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f023 030a 	bic.w	r3, r3, #10
 8002420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4313      	orrs	r3, r2
 8002428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	621a      	str	r2, [r3, #32]
}
 8002436:	bf00      	nop
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002442:	b480      	push	{r7}
 8002444:	b087      	sub	sp, #28
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	f023 0210 	bic.w	r2, r3, #16
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800246c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	031b      	lsls	r3, r3, #12
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800247e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	621a      	str	r2, [r3, #32]
}
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	f043 0307 	orr.w	r3, r3, #7
 80024c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	021a      	lsls	r2, r3, #8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4313      	orrs	r3, r2
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	609a      	str	r2, [r3, #8]
}
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800252c:	2302      	movs	r3, #2
 800252e:	e050      	b.n	80025d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1c      	ldr	r2, [pc, #112]	; (80025e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d018      	beq.n	80025a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257c:	d013      	beq.n	80025a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00e      	beq.n	80025a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a15      	ldr	r2, [pc, #84]	; (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d004      	beq.n	80025a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10c      	bne.n	80025c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40010000 	.word	0x40010000
 80025e4:	40000400 	.word	0x40000400
 80025e8:	40000800 	.word	0x40000800
 80025ec:	40000c00 	.word	0x40000c00
 80025f0:	40014000 	.word	0x40014000

080025f4 <exit>:
 80025f4:	b508      	push	{r3, lr}
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <exit+0x1c>)
 80025f8:	4604      	mov	r4, r0
 80025fa:	b113      	cbz	r3, 8002602 <exit+0xe>
 80025fc:	2100      	movs	r1, #0
 80025fe:	f3af 8000 	nop.w
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <exit+0x20>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	b103      	cbz	r3, 800260a <exit+0x16>
 8002608:	4798      	blx	r3
 800260a:	4620      	mov	r0, r4
 800260c:	f7fe fc68 	bl	8000ee0 <_exit>
 8002610:	00000000 	.word	0x00000000
 8002614:	20000214 	.word	0x20000214

08002618 <malloc>:
 8002618:	4b02      	ldr	r3, [pc, #8]	; (8002624 <malloc+0xc>)
 800261a:	4601      	mov	r1, r0
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	f000 b823 	b.w	8002668 <_malloc_r>
 8002622:	bf00      	nop
 8002624:	20000064 	.word	0x20000064

08002628 <sbrk_aligned>:
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	4e0e      	ldr	r6, [pc, #56]	; (8002664 <sbrk_aligned+0x3c>)
 800262c:	460c      	mov	r4, r1
 800262e:	6831      	ldr	r1, [r6, #0]
 8002630:	4605      	mov	r5, r0
 8002632:	b911      	cbnz	r1, 800263a <sbrk_aligned+0x12>
 8002634:	f000 faf6 	bl	8002c24 <_sbrk_r>
 8002638:	6030      	str	r0, [r6, #0]
 800263a:	4621      	mov	r1, r4
 800263c:	4628      	mov	r0, r5
 800263e:	f000 faf1 	bl	8002c24 <_sbrk_r>
 8002642:	1c43      	adds	r3, r0, #1
 8002644:	d00a      	beq.n	800265c <sbrk_aligned+0x34>
 8002646:	1cc4      	adds	r4, r0, #3
 8002648:	f024 0403 	bic.w	r4, r4, #3
 800264c:	42a0      	cmp	r0, r4
 800264e:	d007      	beq.n	8002660 <sbrk_aligned+0x38>
 8002650:	1a21      	subs	r1, r4, r0
 8002652:	4628      	mov	r0, r5
 8002654:	f000 fae6 	bl	8002c24 <_sbrk_r>
 8002658:	3001      	adds	r0, #1
 800265a:	d101      	bne.n	8002660 <sbrk_aligned+0x38>
 800265c:	f04f 34ff 	mov.w	r4, #4294967295
 8002660:	4620      	mov	r0, r4
 8002662:	bd70      	pop	{r4, r5, r6, pc}
 8002664:	200000d8 	.word	0x200000d8

08002668 <_malloc_r>:
 8002668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800266c:	1ccd      	adds	r5, r1, #3
 800266e:	f025 0503 	bic.w	r5, r5, #3
 8002672:	3508      	adds	r5, #8
 8002674:	2d0c      	cmp	r5, #12
 8002676:	bf38      	it	cc
 8002678:	250c      	movcc	r5, #12
 800267a:	2d00      	cmp	r5, #0
 800267c:	4607      	mov	r7, r0
 800267e:	db01      	blt.n	8002684 <_malloc_r+0x1c>
 8002680:	42a9      	cmp	r1, r5
 8002682:	d905      	bls.n	8002690 <_malloc_r+0x28>
 8002684:	230c      	movs	r3, #12
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	2600      	movs	r6, #0
 800268a:	4630      	mov	r0, r6
 800268c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002690:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002764 <_malloc_r+0xfc>
 8002694:	f000 f868 	bl	8002768 <__malloc_lock>
 8002698:	f8d8 3000 	ldr.w	r3, [r8]
 800269c:	461c      	mov	r4, r3
 800269e:	bb5c      	cbnz	r4, 80026f8 <_malloc_r+0x90>
 80026a0:	4629      	mov	r1, r5
 80026a2:	4638      	mov	r0, r7
 80026a4:	f7ff ffc0 	bl	8002628 <sbrk_aligned>
 80026a8:	1c43      	adds	r3, r0, #1
 80026aa:	4604      	mov	r4, r0
 80026ac:	d155      	bne.n	800275a <_malloc_r+0xf2>
 80026ae:	f8d8 4000 	ldr.w	r4, [r8]
 80026b2:	4626      	mov	r6, r4
 80026b4:	2e00      	cmp	r6, #0
 80026b6:	d145      	bne.n	8002744 <_malloc_r+0xdc>
 80026b8:	2c00      	cmp	r4, #0
 80026ba:	d048      	beq.n	800274e <_malloc_r+0xe6>
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	4631      	mov	r1, r6
 80026c0:	4638      	mov	r0, r7
 80026c2:	eb04 0903 	add.w	r9, r4, r3
 80026c6:	f000 faad 	bl	8002c24 <_sbrk_r>
 80026ca:	4581      	cmp	r9, r0
 80026cc:	d13f      	bne.n	800274e <_malloc_r+0xe6>
 80026ce:	6821      	ldr	r1, [r4, #0]
 80026d0:	1a6d      	subs	r5, r5, r1
 80026d2:	4629      	mov	r1, r5
 80026d4:	4638      	mov	r0, r7
 80026d6:	f7ff ffa7 	bl	8002628 <sbrk_aligned>
 80026da:	3001      	adds	r0, #1
 80026dc:	d037      	beq.n	800274e <_malloc_r+0xe6>
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	442b      	add	r3, r5
 80026e2:	6023      	str	r3, [r4, #0]
 80026e4:	f8d8 3000 	ldr.w	r3, [r8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d038      	beq.n	800275e <_malloc_r+0xf6>
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	42a2      	cmp	r2, r4
 80026f0:	d12b      	bne.n	800274a <_malloc_r+0xe2>
 80026f2:	2200      	movs	r2, #0
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	e00f      	b.n	8002718 <_malloc_r+0xb0>
 80026f8:	6822      	ldr	r2, [r4, #0]
 80026fa:	1b52      	subs	r2, r2, r5
 80026fc:	d41f      	bmi.n	800273e <_malloc_r+0xd6>
 80026fe:	2a0b      	cmp	r2, #11
 8002700:	d917      	bls.n	8002732 <_malloc_r+0xca>
 8002702:	1961      	adds	r1, r4, r5
 8002704:	42a3      	cmp	r3, r4
 8002706:	6025      	str	r5, [r4, #0]
 8002708:	bf18      	it	ne
 800270a:	6059      	strne	r1, [r3, #4]
 800270c:	6863      	ldr	r3, [r4, #4]
 800270e:	bf08      	it	eq
 8002710:	f8c8 1000 	streq.w	r1, [r8]
 8002714:	5162      	str	r2, [r4, r5]
 8002716:	604b      	str	r3, [r1, #4]
 8002718:	4638      	mov	r0, r7
 800271a:	f104 060b 	add.w	r6, r4, #11
 800271e:	f000 f829 	bl	8002774 <__malloc_unlock>
 8002722:	f026 0607 	bic.w	r6, r6, #7
 8002726:	1d23      	adds	r3, r4, #4
 8002728:	1af2      	subs	r2, r6, r3
 800272a:	d0ae      	beq.n	800268a <_malloc_r+0x22>
 800272c:	1b9b      	subs	r3, r3, r6
 800272e:	50a3      	str	r3, [r4, r2]
 8002730:	e7ab      	b.n	800268a <_malloc_r+0x22>
 8002732:	42a3      	cmp	r3, r4
 8002734:	6862      	ldr	r2, [r4, #4]
 8002736:	d1dd      	bne.n	80026f4 <_malloc_r+0x8c>
 8002738:	f8c8 2000 	str.w	r2, [r8]
 800273c:	e7ec      	b.n	8002718 <_malloc_r+0xb0>
 800273e:	4623      	mov	r3, r4
 8002740:	6864      	ldr	r4, [r4, #4]
 8002742:	e7ac      	b.n	800269e <_malloc_r+0x36>
 8002744:	4634      	mov	r4, r6
 8002746:	6876      	ldr	r6, [r6, #4]
 8002748:	e7b4      	b.n	80026b4 <_malloc_r+0x4c>
 800274a:	4613      	mov	r3, r2
 800274c:	e7cc      	b.n	80026e8 <_malloc_r+0x80>
 800274e:	230c      	movs	r3, #12
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	4638      	mov	r0, r7
 8002754:	f000 f80e 	bl	8002774 <__malloc_unlock>
 8002758:	e797      	b.n	800268a <_malloc_r+0x22>
 800275a:	6025      	str	r5, [r4, #0]
 800275c:	e7dc      	b.n	8002718 <_malloc_r+0xb0>
 800275e:	605b      	str	r3, [r3, #4]
 8002760:	deff      	udf	#255	; 0xff
 8002762:	bf00      	nop
 8002764:	200000d4 	.word	0x200000d4

08002768 <__malloc_lock>:
 8002768:	4801      	ldr	r0, [pc, #4]	; (8002770 <__malloc_lock+0x8>)
 800276a:	f000 baa8 	b.w	8002cbe <__retarget_lock_acquire_recursive>
 800276e:	bf00      	nop
 8002770:	2000021c 	.word	0x2000021c

08002774 <__malloc_unlock>:
 8002774:	4801      	ldr	r0, [pc, #4]	; (800277c <__malloc_unlock+0x8>)
 8002776:	f000 baa3 	b.w	8002cc0 <__retarget_lock_release_recursive>
 800277a:	bf00      	nop
 800277c:	2000021c 	.word	0x2000021c

08002780 <std>:
 8002780:	2300      	movs	r3, #0
 8002782:	b510      	push	{r4, lr}
 8002784:	4604      	mov	r4, r0
 8002786:	e9c0 3300 	strd	r3, r3, [r0]
 800278a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800278e:	6083      	str	r3, [r0, #8]
 8002790:	8181      	strh	r1, [r0, #12]
 8002792:	6643      	str	r3, [r0, #100]	; 0x64
 8002794:	81c2      	strh	r2, [r0, #14]
 8002796:	6183      	str	r3, [r0, #24]
 8002798:	4619      	mov	r1, r3
 800279a:	2208      	movs	r2, #8
 800279c:	305c      	adds	r0, #92	; 0x5c
 800279e:	f000 fa05 	bl	8002bac <memset>
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <std+0x58>)
 80027a4:	6263      	str	r3, [r4, #36]	; 0x24
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <std+0x5c>)
 80027a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80027aa:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <std+0x60>)
 80027ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027ae:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <std+0x64>)
 80027b0:	6323      	str	r3, [r4, #48]	; 0x30
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <std+0x68>)
 80027b4:	6224      	str	r4, [r4, #32]
 80027b6:	429c      	cmp	r4, r3
 80027b8:	d006      	beq.n	80027c8 <std+0x48>
 80027ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80027be:	4294      	cmp	r4, r2
 80027c0:	d002      	beq.n	80027c8 <std+0x48>
 80027c2:	33d0      	adds	r3, #208	; 0xd0
 80027c4:	429c      	cmp	r4, r3
 80027c6:	d105      	bne.n	80027d4 <std+0x54>
 80027c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80027cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027d0:	f000 ba74 	b.w	8002cbc <__retarget_lock_init_recursive>
 80027d4:	bd10      	pop	{r4, pc}
 80027d6:	bf00      	nop
 80027d8:	080029fd 	.word	0x080029fd
 80027dc:	08002a1f 	.word	0x08002a1f
 80027e0:	08002a57 	.word	0x08002a57
 80027e4:	08002a7b 	.word	0x08002a7b
 80027e8:	200000dc 	.word	0x200000dc

080027ec <stdio_exit_handler>:
 80027ec:	4a02      	ldr	r2, [pc, #8]	; (80027f8 <stdio_exit_handler+0xc>)
 80027ee:	4903      	ldr	r1, [pc, #12]	; (80027fc <stdio_exit_handler+0x10>)
 80027f0:	4803      	ldr	r0, [pc, #12]	; (8002800 <stdio_exit_handler+0x14>)
 80027f2:	f000 b869 	b.w	80028c8 <_fwalk_sglue>
 80027f6:	bf00      	nop
 80027f8:	2000000c 	.word	0x2000000c
 80027fc:	08003439 	.word	0x08003439
 8002800:	20000018 	.word	0x20000018

08002804 <cleanup_stdio>:
 8002804:	6841      	ldr	r1, [r0, #4]
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <cleanup_stdio+0x34>)
 8002808:	4299      	cmp	r1, r3
 800280a:	b510      	push	{r4, lr}
 800280c:	4604      	mov	r4, r0
 800280e:	d001      	beq.n	8002814 <cleanup_stdio+0x10>
 8002810:	f000 fe12 	bl	8003438 <_fflush_r>
 8002814:	68a1      	ldr	r1, [r4, #8]
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <cleanup_stdio+0x38>)
 8002818:	4299      	cmp	r1, r3
 800281a:	d002      	beq.n	8002822 <cleanup_stdio+0x1e>
 800281c:	4620      	mov	r0, r4
 800281e:	f000 fe0b 	bl	8003438 <_fflush_r>
 8002822:	68e1      	ldr	r1, [r4, #12]
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <cleanup_stdio+0x3c>)
 8002826:	4299      	cmp	r1, r3
 8002828:	d004      	beq.n	8002834 <cleanup_stdio+0x30>
 800282a:	4620      	mov	r0, r4
 800282c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002830:	f000 be02 	b.w	8003438 <_fflush_r>
 8002834:	bd10      	pop	{r4, pc}
 8002836:	bf00      	nop
 8002838:	200000dc 	.word	0x200000dc
 800283c:	20000144 	.word	0x20000144
 8002840:	200001ac 	.word	0x200001ac

08002844 <global_stdio_init.part.0>:
 8002844:	b510      	push	{r4, lr}
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <global_stdio_init.part.0+0x30>)
 8002848:	4c0b      	ldr	r4, [pc, #44]	; (8002878 <global_stdio_init.part.0+0x34>)
 800284a:	4a0c      	ldr	r2, [pc, #48]	; (800287c <global_stdio_init.part.0+0x38>)
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	4620      	mov	r0, r4
 8002850:	2200      	movs	r2, #0
 8002852:	2104      	movs	r1, #4
 8002854:	f7ff ff94 	bl	8002780 <std>
 8002858:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800285c:	2201      	movs	r2, #1
 800285e:	2109      	movs	r1, #9
 8002860:	f7ff ff8e 	bl	8002780 <std>
 8002864:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002868:	2202      	movs	r2, #2
 800286a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800286e:	2112      	movs	r1, #18
 8002870:	f7ff bf86 	b.w	8002780 <std>
 8002874:	20000214 	.word	0x20000214
 8002878:	200000dc 	.word	0x200000dc
 800287c:	080027ed 	.word	0x080027ed

08002880 <__sfp_lock_acquire>:
 8002880:	4801      	ldr	r0, [pc, #4]	; (8002888 <__sfp_lock_acquire+0x8>)
 8002882:	f000 ba1c 	b.w	8002cbe <__retarget_lock_acquire_recursive>
 8002886:	bf00      	nop
 8002888:	2000021d 	.word	0x2000021d

0800288c <__sfp_lock_release>:
 800288c:	4801      	ldr	r0, [pc, #4]	; (8002894 <__sfp_lock_release+0x8>)
 800288e:	f000 ba17 	b.w	8002cc0 <__retarget_lock_release_recursive>
 8002892:	bf00      	nop
 8002894:	2000021d 	.word	0x2000021d

08002898 <__sinit>:
 8002898:	b510      	push	{r4, lr}
 800289a:	4604      	mov	r4, r0
 800289c:	f7ff fff0 	bl	8002880 <__sfp_lock_acquire>
 80028a0:	6a23      	ldr	r3, [r4, #32]
 80028a2:	b11b      	cbz	r3, 80028ac <__sinit+0x14>
 80028a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028a8:	f7ff bff0 	b.w	800288c <__sfp_lock_release>
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__sinit+0x28>)
 80028ae:	6223      	str	r3, [r4, #32]
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <__sinit+0x2c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f5      	bne.n	80028a4 <__sinit+0xc>
 80028b8:	f7ff ffc4 	bl	8002844 <global_stdio_init.part.0>
 80028bc:	e7f2      	b.n	80028a4 <__sinit+0xc>
 80028be:	bf00      	nop
 80028c0:	08002805 	.word	0x08002805
 80028c4:	20000214 	.word	0x20000214

080028c8 <_fwalk_sglue>:
 80028c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028cc:	4607      	mov	r7, r0
 80028ce:	4688      	mov	r8, r1
 80028d0:	4614      	mov	r4, r2
 80028d2:	2600      	movs	r6, #0
 80028d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028d8:	f1b9 0901 	subs.w	r9, r9, #1
 80028dc:	d505      	bpl.n	80028ea <_fwalk_sglue+0x22>
 80028de:	6824      	ldr	r4, [r4, #0]
 80028e0:	2c00      	cmp	r4, #0
 80028e2:	d1f7      	bne.n	80028d4 <_fwalk_sglue+0xc>
 80028e4:	4630      	mov	r0, r6
 80028e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028ea:	89ab      	ldrh	r3, [r5, #12]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d907      	bls.n	8002900 <_fwalk_sglue+0x38>
 80028f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028f4:	3301      	adds	r3, #1
 80028f6:	d003      	beq.n	8002900 <_fwalk_sglue+0x38>
 80028f8:	4629      	mov	r1, r5
 80028fa:	4638      	mov	r0, r7
 80028fc:	47c0      	blx	r8
 80028fe:	4306      	orrs	r6, r0
 8002900:	3568      	adds	r5, #104	; 0x68
 8002902:	e7e9      	b.n	80028d8 <_fwalk_sglue+0x10>

08002904 <_puts_r>:
 8002904:	6a03      	ldr	r3, [r0, #32]
 8002906:	b570      	push	{r4, r5, r6, lr}
 8002908:	6884      	ldr	r4, [r0, #8]
 800290a:	4605      	mov	r5, r0
 800290c:	460e      	mov	r6, r1
 800290e:	b90b      	cbnz	r3, 8002914 <_puts_r+0x10>
 8002910:	f7ff ffc2 	bl	8002898 <__sinit>
 8002914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002916:	07db      	lsls	r3, r3, #31
 8002918:	d405      	bmi.n	8002926 <_puts_r+0x22>
 800291a:	89a3      	ldrh	r3, [r4, #12]
 800291c:	0598      	lsls	r0, r3, #22
 800291e:	d402      	bmi.n	8002926 <_puts_r+0x22>
 8002920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002922:	f000 f9cc 	bl	8002cbe <__retarget_lock_acquire_recursive>
 8002926:	89a3      	ldrh	r3, [r4, #12]
 8002928:	0719      	lsls	r1, r3, #28
 800292a:	d513      	bpl.n	8002954 <_puts_r+0x50>
 800292c:	6923      	ldr	r3, [r4, #16]
 800292e:	b18b      	cbz	r3, 8002954 <_puts_r+0x50>
 8002930:	3e01      	subs	r6, #1
 8002932:	68a3      	ldr	r3, [r4, #8]
 8002934:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002938:	3b01      	subs	r3, #1
 800293a:	60a3      	str	r3, [r4, #8]
 800293c:	b9e9      	cbnz	r1, 800297a <_puts_r+0x76>
 800293e:	2b00      	cmp	r3, #0
 8002940:	da2e      	bge.n	80029a0 <_puts_r+0x9c>
 8002942:	4622      	mov	r2, r4
 8002944:	210a      	movs	r1, #10
 8002946:	4628      	mov	r0, r5
 8002948:	f000 f89b 	bl	8002a82 <__swbuf_r>
 800294c:	3001      	adds	r0, #1
 800294e:	d007      	beq.n	8002960 <_puts_r+0x5c>
 8002950:	250a      	movs	r5, #10
 8002952:	e007      	b.n	8002964 <_puts_r+0x60>
 8002954:	4621      	mov	r1, r4
 8002956:	4628      	mov	r0, r5
 8002958:	f000 f8d0 	bl	8002afc <__swsetup_r>
 800295c:	2800      	cmp	r0, #0
 800295e:	d0e7      	beq.n	8002930 <_puts_r+0x2c>
 8002960:	f04f 35ff 	mov.w	r5, #4294967295
 8002964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002966:	07da      	lsls	r2, r3, #31
 8002968:	d405      	bmi.n	8002976 <_puts_r+0x72>
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	059b      	lsls	r3, r3, #22
 800296e:	d402      	bmi.n	8002976 <_puts_r+0x72>
 8002970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002972:	f000 f9a5 	bl	8002cc0 <__retarget_lock_release_recursive>
 8002976:	4628      	mov	r0, r5
 8002978:	bd70      	pop	{r4, r5, r6, pc}
 800297a:	2b00      	cmp	r3, #0
 800297c:	da04      	bge.n	8002988 <_puts_r+0x84>
 800297e:	69a2      	ldr	r2, [r4, #24]
 8002980:	429a      	cmp	r2, r3
 8002982:	dc06      	bgt.n	8002992 <_puts_r+0x8e>
 8002984:	290a      	cmp	r1, #10
 8002986:	d004      	beq.n	8002992 <_puts_r+0x8e>
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	6022      	str	r2, [r4, #0]
 800298e:	7019      	strb	r1, [r3, #0]
 8002990:	e7cf      	b.n	8002932 <_puts_r+0x2e>
 8002992:	4622      	mov	r2, r4
 8002994:	4628      	mov	r0, r5
 8002996:	f000 f874 	bl	8002a82 <__swbuf_r>
 800299a:	3001      	adds	r0, #1
 800299c:	d1c9      	bne.n	8002932 <_puts_r+0x2e>
 800299e:	e7df      	b.n	8002960 <_puts_r+0x5c>
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	250a      	movs	r5, #10
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	6022      	str	r2, [r4, #0]
 80029a8:	701d      	strb	r5, [r3, #0]
 80029aa:	e7db      	b.n	8002964 <_puts_r+0x60>

080029ac <puts>:
 80029ac:	4b02      	ldr	r3, [pc, #8]	; (80029b8 <puts+0xc>)
 80029ae:	4601      	mov	r1, r0
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	f7ff bfa7 	b.w	8002904 <_puts_r>
 80029b6:	bf00      	nop
 80029b8:	20000064 	.word	0x20000064

080029bc <siprintf>:
 80029bc:	b40e      	push	{r1, r2, r3}
 80029be:	b500      	push	{lr}
 80029c0:	b09c      	sub	sp, #112	; 0x70
 80029c2:	ab1d      	add	r3, sp, #116	; 0x74
 80029c4:	9002      	str	r0, [sp, #8]
 80029c6:	9006      	str	r0, [sp, #24]
 80029c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029cc:	4809      	ldr	r0, [pc, #36]	; (80029f4 <siprintf+0x38>)
 80029ce:	9107      	str	r1, [sp, #28]
 80029d0:	9104      	str	r1, [sp, #16]
 80029d2:	4909      	ldr	r1, [pc, #36]	; (80029f8 <siprintf+0x3c>)
 80029d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80029d8:	9105      	str	r1, [sp, #20]
 80029da:	6800      	ldr	r0, [r0, #0]
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	a902      	add	r1, sp, #8
 80029e0:	f000 fa16 	bl	8002e10 <_svfiprintf_r>
 80029e4:	9b02      	ldr	r3, [sp, #8]
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	b01c      	add	sp, #112	; 0x70
 80029ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80029f0:	b003      	add	sp, #12
 80029f2:	4770      	bx	lr
 80029f4:	20000064 	.word	0x20000064
 80029f8:	ffff0208 	.word	0xffff0208

080029fc <__sread>:
 80029fc:	b510      	push	{r4, lr}
 80029fe:	460c      	mov	r4, r1
 8002a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a04:	f000 f8fc 	bl	8002c00 <_read_r>
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	bfab      	itete	ge
 8002a0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8002a10:	181b      	addge	r3, r3, r0
 8002a12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002a16:	bfac      	ite	ge
 8002a18:	6563      	strge	r3, [r4, #84]	; 0x54
 8002a1a:	81a3      	strhlt	r3, [r4, #12]
 8002a1c:	bd10      	pop	{r4, pc}

08002a1e <__swrite>:
 8002a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a22:	461f      	mov	r7, r3
 8002a24:	898b      	ldrh	r3, [r1, #12]
 8002a26:	05db      	lsls	r3, r3, #23
 8002a28:	4605      	mov	r5, r0
 8002a2a:	460c      	mov	r4, r1
 8002a2c:	4616      	mov	r6, r2
 8002a2e:	d505      	bpl.n	8002a3c <__swrite+0x1e>
 8002a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a34:	2302      	movs	r3, #2
 8002a36:	2200      	movs	r2, #0
 8002a38:	f000 f8d0 	bl	8002bdc <_lseek_r>
 8002a3c:	89a3      	ldrh	r3, [r4, #12]
 8002a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a46:	81a3      	strh	r3, [r4, #12]
 8002a48:	4632      	mov	r2, r6
 8002a4a:	463b      	mov	r3, r7
 8002a4c:	4628      	mov	r0, r5
 8002a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a52:	f000 b8f7 	b.w	8002c44 <_write_r>

08002a56 <__sseek>:
 8002a56:	b510      	push	{r4, lr}
 8002a58:	460c      	mov	r4, r1
 8002a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a5e:	f000 f8bd 	bl	8002bdc <_lseek_r>
 8002a62:	1c43      	adds	r3, r0, #1
 8002a64:	89a3      	ldrh	r3, [r4, #12]
 8002a66:	bf15      	itete	ne
 8002a68:	6560      	strne	r0, [r4, #84]	; 0x54
 8002a6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002a6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002a72:	81a3      	strheq	r3, [r4, #12]
 8002a74:	bf18      	it	ne
 8002a76:	81a3      	strhne	r3, [r4, #12]
 8002a78:	bd10      	pop	{r4, pc}

08002a7a <__sclose>:
 8002a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a7e:	f000 b89d 	b.w	8002bbc <_close_r>

08002a82 <__swbuf_r>:
 8002a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a84:	460e      	mov	r6, r1
 8002a86:	4614      	mov	r4, r2
 8002a88:	4605      	mov	r5, r0
 8002a8a:	b118      	cbz	r0, 8002a94 <__swbuf_r+0x12>
 8002a8c:	6a03      	ldr	r3, [r0, #32]
 8002a8e:	b90b      	cbnz	r3, 8002a94 <__swbuf_r+0x12>
 8002a90:	f7ff ff02 	bl	8002898 <__sinit>
 8002a94:	69a3      	ldr	r3, [r4, #24]
 8002a96:	60a3      	str	r3, [r4, #8]
 8002a98:	89a3      	ldrh	r3, [r4, #12]
 8002a9a:	071a      	lsls	r2, r3, #28
 8002a9c:	d525      	bpl.n	8002aea <__swbuf_r+0x68>
 8002a9e:	6923      	ldr	r3, [r4, #16]
 8002aa0:	b31b      	cbz	r3, 8002aea <__swbuf_r+0x68>
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	6922      	ldr	r2, [r4, #16]
 8002aa6:	1a98      	subs	r0, r3, r2
 8002aa8:	6963      	ldr	r3, [r4, #20]
 8002aaa:	b2f6      	uxtb	r6, r6
 8002aac:	4283      	cmp	r3, r0
 8002aae:	4637      	mov	r7, r6
 8002ab0:	dc04      	bgt.n	8002abc <__swbuf_r+0x3a>
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	f000 fcbf 	bl	8003438 <_fflush_r>
 8002aba:	b9e0      	cbnz	r0, 8002af6 <__swbuf_r+0x74>
 8002abc:	68a3      	ldr	r3, [r4, #8]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	60a3      	str	r3, [r4, #8]
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	6022      	str	r2, [r4, #0]
 8002ac8:	701e      	strb	r6, [r3, #0]
 8002aca:	6962      	ldr	r2, [r4, #20]
 8002acc:	1c43      	adds	r3, r0, #1
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d004      	beq.n	8002adc <__swbuf_r+0x5a>
 8002ad2:	89a3      	ldrh	r3, [r4, #12]
 8002ad4:	07db      	lsls	r3, r3, #31
 8002ad6:	d506      	bpl.n	8002ae6 <__swbuf_r+0x64>
 8002ad8:	2e0a      	cmp	r6, #10
 8002ada:	d104      	bne.n	8002ae6 <__swbuf_r+0x64>
 8002adc:	4621      	mov	r1, r4
 8002ade:	4628      	mov	r0, r5
 8002ae0:	f000 fcaa 	bl	8003438 <_fflush_r>
 8002ae4:	b938      	cbnz	r0, 8002af6 <__swbuf_r+0x74>
 8002ae6:	4638      	mov	r0, r7
 8002ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aea:	4621      	mov	r1, r4
 8002aec:	4628      	mov	r0, r5
 8002aee:	f000 f805 	bl	8002afc <__swsetup_r>
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d0d5      	beq.n	8002aa2 <__swbuf_r+0x20>
 8002af6:	f04f 37ff 	mov.w	r7, #4294967295
 8002afa:	e7f4      	b.n	8002ae6 <__swbuf_r+0x64>

08002afc <__swsetup_r>:
 8002afc:	b538      	push	{r3, r4, r5, lr}
 8002afe:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <__swsetup_r+0xac>)
 8002b00:	4605      	mov	r5, r0
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	460c      	mov	r4, r1
 8002b06:	b118      	cbz	r0, 8002b10 <__swsetup_r+0x14>
 8002b08:	6a03      	ldr	r3, [r0, #32]
 8002b0a:	b90b      	cbnz	r3, 8002b10 <__swsetup_r+0x14>
 8002b0c:	f7ff fec4 	bl	8002898 <__sinit>
 8002b10:	89a3      	ldrh	r3, [r4, #12]
 8002b12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b16:	0718      	lsls	r0, r3, #28
 8002b18:	d422      	bmi.n	8002b60 <__swsetup_r+0x64>
 8002b1a:	06d9      	lsls	r1, r3, #27
 8002b1c:	d407      	bmi.n	8002b2e <__swsetup_r+0x32>
 8002b1e:	2309      	movs	r3, #9
 8002b20:	602b      	str	r3, [r5, #0]
 8002b22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002b26:	81a3      	strh	r3, [r4, #12]
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	e034      	b.n	8002b98 <__swsetup_r+0x9c>
 8002b2e:	0758      	lsls	r0, r3, #29
 8002b30:	d512      	bpl.n	8002b58 <__swsetup_r+0x5c>
 8002b32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b34:	b141      	cbz	r1, 8002b48 <__swsetup_r+0x4c>
 8002b36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b3a:	4299      	cmp	r1, r3
 8002b3c:	d002      	beq.n	8002b44 <__swsetup_r+0x48>
 8002b3e:	4628      	mov	r0, r5
 8002b40:	f000 f8c0 	bl	8002cc4 <_free_r>
 8002b44:	2300      	movs	r3, #0
 8002b46:	6363      	str	r3, [r4, #52]	; 0x34
 8002b48:	89a3      	ldrh	r3, [r4, #12]
 8002b4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b4e:	81a3      	strh	r3, [r4, #12]
 8002b50:	2300      	movs	r3, #0
 8002b52:	6063      	str	r3, [r4, #4]
 8002b54:	6923      	ldr	r3, [r4, #16]
 8002b56:	6023      	str	r3, [r4, #0]
 8002b58:	89a3      	ldrh	r3, [r4, #12]
 8002b5a:	f043 0308 	orr.w	r3, r3, #8
 8002b5e:	81a3      	strh	r3, [r4, #12]
 8002b60:	6923      	ldr	r3, [r4, #16]
 8002b62:	b94b      	cbnz	r3, 8002b78 <__swsetup_r+0x7c>
 8002b64:	89a3      	ldrh	r3, [r4, #12]
 8002b66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b6e:	d003      	beq.n	8002b78 <__swsetup_r+0x7c>
 8002b70:	4621      	mov	r1, r4
 8002b72:	4628      	mov	r0, r5
 8002b74:	f000 fcae 	bl	80034d4 <__smakebuf_r>
 8002b78:	89a0      	ldrh	r0, [r4, #12]
 8002b7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b7e:	f010 0301 	ands.w	r3, r0, #1
 8002b82:	d00a      	beq.n	8002b9a <__swsetup_r+0x9e>
 8002b84:	2300      	movs	r3, #0
 8002b86:	60a3      	str	r3, [r4, #8]
 8002b88:	6963      	ldr	r3, [r4, #20]
 8002b8a:	425b      	negs	r3, r3
 8002b8c:	61a3      	str	r3, [r4, #24]
 8002b8e:	6923      	ldr	r3, [r4, #16]
 8002b90:	b943      	cbnz	r3, 8002ba4 <__swsetup_r+0xa8>
 8002b92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b96:	d1c4      	bne.n	8002b22 <__swsetup_r+0x26>
 8002b98:	bd38      	pop	{r3, r4, r5, pc}
 8002b9a:	0781      	lsls	r1, r0, #30
 8002b9c:	bf58      	it	pl
 8002b9e:	6963      	ldrpl	r3, [r4, #20]
 8002ba0:	60a3      	str	r3, [r4, #8]
 8002ba2:	e7f4      	b.n	8002b8e <__swsetup_r+0x92>
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	e7f7      	b.n	8002b98 <__swsetup_r+0x9c>
 8002ba8:	20000064 	.word	0x20000064

08002bac <memset>:
 8002bac:	4402      	add	r2, r0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d100      	bne.n	8002bb6 <memset+0xa>
 8002bb4:	4770      	bx	lr
 8002bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bba:	e7f9      	b.n	8002bb0 <memset+0x4>

08002bbc <_close_r>:
 8002bbc:	b538      	push	{r3, r4, r5, lr}
 8002bbe:	4d06      	ldr	r5, [pc, #24]	; (8002bd8 <_close_r+0x1c>)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	602b      	str	r3, [r5, #0]
 8002bc8:	f7fe f9cd 	bl	8000f66 <_close>
 8002bcc:	1c43      	adds	r3, r0, #1
 8002bce:	d102      	bne.n	8002bd6 <_close_r+0x1a>
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	b103      	cbz	r3, 8002bd6 <_close_r+0x1a>
 8002bd4:	6023      	str	r3, [r4, #0]
 8002bd6:	bd38      	pop	{r3, r4, r5, pc}
 8002bd8:	20000218 	.word	0x20000218

08002bdc <_lseek_r>:
 8002bdc:	b538      	push	{r3, r4, r5, lr}
 8002bde:	4d07      	ldr	r5, [pc, #28]	; (8002bfc <_lseek_r+0x20>)
 8002be0:	4604      	mov	r4, r0
 8002be2:	4608      	mov	r0, r1
 8002be4:	4611      	mov	r1, r2
 8002be6:	2200      	movs	r2, #0
 8002be8:	602a      	str	r2, [r5, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f7fe f9e2 	bl	8000fb4 <_lseek>
 8002bf0:	1c43      	adds	r3, r0, #1
 8002bf2:	d102      	bne.n	8002bfa <_lseek_r+0x1e>
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	b103      	cbz	r3, 8002bfa <_lseek_r+0x1e>
 8002bf8:	6023      	str	r3, [r4, #0]
 8002bfa:	bd38      	pop	{r3, r4, r5, pc}
 8002bfc:	20000218 	.word	0x20000218

08002c00 <_read_r>:
 8002c00:	b538      	push	{r3, r4, r5, lr}
 8002c02:	4d07      	ldr	r5, [pc, #28]	; (8002c20 <_read_r+0x20>)
 8002c04:	4604      	mov	r4, r0
 8002c06:	4608      	mov	r0, r1
 8002c08:	4611      	mov	r1, r2
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	602a      	str	r2, [r5, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f7fe f970 	bl	8000ef4 <_read>
 8002c14:	1c43      	adds	r3, r0, #1
 8002c16:	d102      	bne.n	8002c1e <_read_r+0x1e>
 8002c18:	682b      	ldr	r3, [r5, #0]
 8002c1a:	b103      	cbz	r3, 8002c1e <_read_r+0x1e>
 8002c1c:	6023      	str	r3, [r4, #0]
 8002c1e:	bd38      	pop	{r3, r4, r5, pc}
 8002c20:	20000218 	.word	0x20000218

08002c24 <_sbrk_r>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	4d06      	ldr	r5, [pc, #24]	; (8002c40 <_sbrk_r+0x1c>)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	602b      	str	r3, [r5, #0]
 8002c30:	f7fe f9ce 	bl	8000fd0 <_sbrk>
 8002c34:	1c43      	adds	r3, r0, #1
 8002c36:	d102      	bne.n	8002c3e <_sbrk_r+0x1a>
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	b103      	cbz	r3, 8002c3e <_sbrk_r+0x1a>
 8002c3c:	6023      	str	r3, [r4, #0]
 8002c3e:	bd38      	pop	{r3, r4, r5, pc}
 8002c40:	20000218 	.word	0x20000218

08002c44 <_write_r>:
 8002c44:	b538      	push	{r3, r4, r5, lr}
 8002c46:	4d07      	ldr	r5, [pc, #28]	; (8002c64 <_write_r+0x20>)
 8002c48:	4604      	mov	r4, r0
 8002c4a:	4608      	mov	r0, r1
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	2200      	movs	r2, #0
 8002c50:	602a      	str	r2, [r5, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	f7fe f96b 	bl	8000f2e <_write>
 8002c58:	1c43      	adds	r3, r0, #1
 8002c5a:	d102      	bne.n	8002c62 <_write_r+0x1e>
 8002c5c:	682b      	ldr	r3, [r5, #0]
 8002c5e:	b103      	cbz	r3, 8002c62 <_write_r+0x1e>
 8002c60:	6023      	str	r3, [r4, #0]
 8002c62:	bd38      	pop	{r3, r4, r5, pc}
 8002c64:	20000218 	.word	0x20000218

08002c68 <__errno>:
 8002c68:	4b01      	ldr	r3, [pc, #4]	; (8002c70 <__errno+0x8>)
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000064 	.word	0x20000064

08002c74 <__libc_init_array>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	4d0d      	ldr	r5, [pc, #52]	; (8002cac <__libc_init_array+0x38>)
 8002c78:	4c0d      	ldr	r4, [pc, #52]	; (8002cb0 <__libc_init_array+0x3c>)
 8002c7a:	1b64      	subs	r4, r4, r5
 8002c7c:	10a4      	asrs	r4, r4, #2
 8002c7e:	2600      	movs	r6, #0
 8002c80:	42a6      	cmp	r6, r4
 8002c82:	d109      	bne.n	8002c98 <__libc_init_array+0x24>
 8002c84:	4d0b      	ldr	r5, [pc, #44]	; (8002cb4 <__libc_init_array+0x40>)
 8002c86:	4c0c      	ldr	r4, [pc, #48]	; (8002cb8 <__libc_init_array+0x44>)
 8002c88:	f000 fce2 	bl	8003650 <_init>
 8002c8c:	1b64      	subs	r4, r4, r5
 8002c8e:	10a4      	asrs	r4, r4, #2
 8002c90:	2600      	movs	r6, #0
 8002c92:	42a6      	cmp	r6, r4
 8002c94:	d105      	bne.n	8002ca2 <__libc_init_array+0x2e>
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
 8002c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9c:	4798      	blx	r3
 8002c9e:	3601      	adds	r6, #1
 8002ca0:	e7ee      	b.n	8002c80 <__libc_init_array+0xc>
 8002ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca6:	4798      	blx	r3
 8002ca8:	3601      	adds	r6, #1
 8002caa:	e7f2      	b.n	8002c92 <__libc_init_array+0x1e>
 8002cac:	08003720 	.word	0x08003720
 8002cb0:	08003720 	.word	0x08003720
 8002cb4:	08003720 	.word	0x08003720
 8002cb8:	08003724 	.word	0x08003724

08002cbc <__retarget_lock_init_recursive>:
 8002cbc:	4770      	bx	lr

08002cbe <__retarget_lock_acquire_recursive>:
 8002cbe:	4770      	bx	lr

08002cc0 <__retarget_lock_release_recursive>:
 8002cc0:	4770      	bx	lr
	...

08002cc4 <_free_r>:
 8002cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cc6:	2900      	cmp	r1, #0
 8002cc8:	d044      	beq.n	8002d54 <_free_r+0x90>
 8002cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cce:	9001      	str	r0, [sp, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8002cd6:	bfb8      	it	lt
 8002cd8:	18e4      	addlt	r4, r4, r3
 8002cda:	f7ff fd45 	bl	8002768 <__malloc_lock>
 8002cde:	4a1e      	ldr	r2, [pc, #120]	; (8002d58 <_free_r+0x94>)
 8002ce0:	9801      	ldr	r0, [sp, #4]
 8002ce2:	6813      	ldr	r3, [r2, #0]
 8002ce4:	b933      	cbnz	r3, 8002cf4 <_free_r+0x30>
 8002ce6:	6063      	str	r3, [r4, #4]
 8002ce8:	6014      	str	r4, [r2, #0]
 8002cea:	b003      	add	sp, #12
 8002cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002cf0:	f7ff bd40 	b.w	8002774 <__malloc_unlock>
 8002cf4:	42a3      	cmp	r3, r4
 8002cf6:	d908      	bls.n	8002d0a <_free_r+0x46>
 8002cf8:	6825      	ldr	r5, [r4, #0]
 8002cfa:	1961      	adds	r1, r4, r5
 8002cfc:	428b      	cmp	r3, r1
 8002cfe:	bf01      	itttt	eq
 8002d00:	6819      	ldreq	r1, [r3, #0]
 8002d02:	685b      	ldreq	r3, [r3, #4]
 8002d04:	1949      	addeq	r1, r1, r5
 8002d06:	6021      	streq	r1, [r4, #0]
 8002d08:	e7ed      	b.n	8002ce6 <_free_r+0x22>
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	b10b      	cbz	r3, 8002d14 <_free_r+0x50>
 8002d10:	42a3      	cmp	r3, r4
 8002d12:	d9fa      	bls.n	8002d0a <_free_r+0x46>
 8002d14:	6811      	ldr	r1, [r2, #0]
 8002d16:	1855      	adds	r5, r2, r1
 8002d18:	42a5      	cmp	r5, r4
 8002d1a:	d10b      	bne.n	8002d34 <_free_r+0x70>
 8002d1c:	6824      	ldr	r4, [r4, #0]
 8002d1e:	4421      	add	r1, r4
 8002d20:	1854      	adds	r4, r2, r1
 8002d22:	42a3      	cmp	r3, r4
 8002d24:	6011      	str	r1, [r2, #0]
 8002d26:	d1e0      	bne.n	8002cea <_free_r+0x26>
 8002d28:	681c      	ldr	r4, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	6053      	str	r3, [r2, #4]
 8002d2e:	440c      	add	r4, r1
 8002d30:	6014      	str	r4, [r2, #0]
 8002d32:	e7da      	b.n	8002cea <_free_r+0x26>
 8002d34:	d902      	bls.n	8002d3c <_free_r+0x78>
 8002d36:	230c      	movs	r3, #12
 8002d38:	6003      	str	r3, [r0, #0]
 8002d3a:	e7d6      	b.n	8002cea <_free_r+0x26>
 8002d3c:	6825      	ldr	r5, [r4, #0]
 8002d3e:	1961      	adds	r1, r4, r5
 8002d40:	428b      	cmp	r3, r1
 8002d42:	bf04      	itt	eq
 8002d44:	6819      	ldreq	r1, [r3, #0]
 8002d46:	685b      	ldreq	r3, [r3, #4]
 8002d48:	6063      	str	r3, [r4, #4]
 8002d4a:	bf04      	itt	eq
 8002d4c:	1949      	addeq	r1, r1, r5
 8002d4e:	6021      	streq	r1, [r4, #0]
 8002d50:	6054      	str	r4, [r2, #4]
 8002d52:	e7ca      	b.n	8002cea <_free_r+0x26>
 8002d54:	b003      	add	sp, #12
 8002d56:	bd30      	pop	{r4, r5, pc}
 8002d58:	200000d4 	.word	0x200000d4

08002d5c <__ssputs_r>:
 8002d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d60:	688e      	ldr	r6, [r1, #8]
 8002d62:	461f      	mov	r7, r3
 8002d64:	42be      	cmp	r6, r7
 8002d66:	680b      	ldr	r3, [r1, #0]
 8002d68:	4682      	mov	sl, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	4690      	mov	r8, r2
 8002d6e:	d82c      	bhi.n	8002dca <__ssputs_r+0x6e>
 8002d70:	898a      	ldrh	r2, [r1, #12]
 8002d72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d76:	d026      	beq.n	8002dc6 <__ssputs_r+0x6a>
 8002d78:	6965      	ldr	r5, [r4, #20]
 8002d7a:	6909      	ldr	r1, [r1, #16]
 8002d7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d80:	eba3 0901 	sub.w	r9, r3, r1
 8002d84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d88:	1c7b      	adds	r3, r7, #1
 8002d8a:	444b      	add	r3, r9
 8002d8c:	106d      	asrs	r5, r5, #1
 8002d8e:	429d      	cmp	r5, r3
 8002d90:	bf38      	it	cc
 8002d92:	461d      	movcc	r5, r3
 8002d94:	0553      	lsls	r3, r2, #21
 8002d96:	d527      	bpl.n	8002de8 <__ssputs_r+0x8c>
 8002d98:	4629      	mov	r1, r5
 8002d9a:	f7ff fc65 	bl	8002668 <_malloc_r>
 8002d9e:	4606      	mov	r6, r0
 8002da0:	b360      	cbz	r0, 8002dfc <__ssputs_r+0xa0>
 8002da2:	6921      	ldr	r1, [r4, #16]
 8002da4:	464a      	mov	r2, r9
 8002da6:	f000 fc0d 	bl	80035c4 <memcpy>
 8002daa:	89a3      	ldrh	r3, [r4, #12]
 8002dac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db4:	81a3      	strh	r3, [r4, #12]
 8002db6:	6126      	str	r6, [r4, #16]
 8002db8:	6165      	str	r5, [r4, #20]
 8002dba:	444e      	add	r6, r9
 8002dbc:	eba5 0509 	sub.w	r5, r5, r9
 8002dc0:	6026      	str	r6, [r4, #0]
 8002dc2:	60a5      	str	r5, [r4, #8]
 8002dc4:	463e      	mov	r6, r7
 8002dc6:	42be      	cmp	r6, r7
 8002dc8:	d900      	bls.n	8002dcc <__ssputs_r+0x70>
 8002dca:	463e      	mov	r6, r7
 8002dcc:	6820      	ldr	r0, [r4, #0]
 8002dce:	4632      	mov	r2, r6
 8002dd0:	4641      	mov	r1, r8
 8002dd2:	f000 fbbb 	bl	800354c <memmove>
 8002dd6:	68a3      	ldr	r3, [r4, #8]
 8002dd8:	1b9b      	subs	r3, r3, r6
 8002dda:	60a3      	str	r3, [r4, #8]
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	4433      	add	r3, r6
 8002de0:	6023      	str	r3, [r4, #0]
 8002de2:	2000      	movs	r0, #0
 8002de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002de8:	462a      	mov	r2, r5
 8002dea:	f000 fbf9 	bl	80035e0 <_realloc_r>
 8002dee:	4606      	mov	r6, r0
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d1e0      	bne.n	8002db6 <__ssputs_r+0x5a>
 8002df4:	6921      	ldr	r1, [r4, #16]
 8002df6:	4650      	mov	r0, sl
 8002df8:	f7ff ff64 	bl	8002cc4 <_free_r>
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	f8ca 3000 	str.w	r3, [sl]
 8002e02:	89a3      	ldrh	r3, [r4, #12]
 8002e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e08:	81a3      	strh	r3, [r4, #12]
 8002e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0e:	e7e9      	b.n	8002de4 <__ssputs_r+0x88>

08002e10 <_svfiprintf_r>:
 8002e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e14:	4698      	mov	r8, r3
 8002e16:	898b      	ldrh	r3, [r1, #12]
 8002e18:	061b      	lsls	r3, r3, #24
 8002e1a:	b09d      	sub	sp, #116	; 0x74
 8002e1c:	4607      	mov	r7, r0
 8002e1e:	460d      	mov	r5, r1
 8002e20:	4614      	mov	r4, r2
 8002e22:	d50e      	bpl.n	8002e42 <_svfiprintf_r+0x32>
 8002e24:	690b      	ldr	r3, [r1, #16]
 8002e26:	b963      	cbnz	r3, 8002e42 <_svfiprintf_r+0x32>
 8002e28:	2140      	movs	r1, #64	; 0x40
 8002e2a:	f7ff fc1d 	bl	8002668 <_malloc_r>
 8002e2e:	6028      	str	r0, [r5, #0]
 8002e30:	6128      	str	r0, [r5, #16]
 8002e32:	b920      	cbnz	r0, 8002e3e <_svfiprintf_r+0x2e>
 8002e34:	230c      	movs	r3, #12
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	e0d0      	b.n	8002fe0 <_svfiprintf_r+0x1d0>
 8002e3e:	2340      	movs	r3, #64	; 0x40
 8002e40:	616b      	str	r3, [r5, #20]
 8002e42:	2300      	movs	r3, #0
 8002e44:	9309      	str	r3, [sp, #36]	; 0x24
 8002e46:	2320      	movs	r3, #32
 8002e48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e50:	2330      	movs	r3, #48	; 0x30
 8002e52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002ff8 <_svfiprintf_r+0x1e8>
 8002e56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e5a:	f04f 0901 	mov.w	r9, #1
 8002e5e:	4623      	mov	r3, r4
 8002e60:	469a      	mov	sl, r3
 8002e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e66:	b10a      	cbz	r2, 8002e6c <_svfiprintf_r+0x5c>
 8002e68:	2a25      	cmp	r2, #37	; 0x25
 8002e6a:	d1f9      	bne.n	8002e60 <_svfiprintf_r+0x50>
 8002e6c:	ebba 0b04 	subs.w	fp, sl, r4
 8002e70:	d00b      	beq.n	8002e8a <_svfiprintf_r+0x7a>
 8002e72:	465b      	mov	r3, fp
 8002e74:	4622      	mov	r2, r4
 8002e76:	4629      	mov	r1, r5
 8002e78:	4638      	mov	r0, r7
 8002e7a:	f7ff ff6f 	bl	8002d5c <__ssputs_r>
 8002e7e:	3001      	adds	r0, #1
 8002e80:	f000 80a9 	beq.w	8002fd6 <_svfiprintf_r+0x1c6>
 8002e84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e86:	445a      	add	r2, fp
 8002e88:	9209      	str	r2, [sp, #36]	; 0x24
 8002e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80a1 	beq.w	8002fd6 <_svfiprintf_r+0x1c6>
 8002e94:	2300      	movs	r3, #0
 8002e96:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e9e:	f10a 0a01 	add.w	sl, sl, #1
 8002ea2:	9304      	str	r3, [sp, #16]
 8002ea4:	9307      	str	r3, [sp, #28]
 8002ea6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002eaa:	931a      	str	r3, [sp, #104]	; 0x68
 8002eac:	4654      	mov	r4, sl
 8002eae:	2205      	movs	r2, #5
 8002eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eb4:	4850      	ldr	r0, [pc, #320]	; (8002ff8 <_svfiprintf_r+0x1e8>)
 8002eb6:	f7fd f99b 	bl	80001f0 <memchr>
 8002eba:	9a04      	ldr	r2, [sp, #16]
 8002ebc:	b9d8      	cbnz	r0, 8002ef6 <_svfiprintf_r+0xe6>
 8002ebe:	06d0      	lsls	r0, r2, #27
 8002ec0:	bf44      	itt	mi
 8002ec2:	2320      	movmi	r3, #32
 8002ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ec8:	0711      	lsls	r1, r2, #28
 8002eca:	bf44      	itt	mi
 8002ecc:	232b      	movmi	r3, #43	; 0x2b
 8002ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8002ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed8:	d015      	beq.n	8002f06 <_svfiprintf_r+0xf6>
 8002eda:	9a07      	ldr	r2, [sp, #28]
 8002edc:	4654      	mov	r4, sl
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f04f 0c0a 	mov.w	ip, #10
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002eea:	3b30      	subs	r3, #48	; 0x30
 8002eec:	2b09      	cmp	r3, #9
 8002eee:	d94d      	bls.n	8002f8c <_svfiprintf_r+0x17c>
 8002ef0:	b1b0      	cbz	r0, 8002f20 <_svfiprintf_r+0x110>
 8002ef2:	9207      	str	r2, [sp, #28]
 8002ef4:	e014      	b.n	8002f20 <_svfiprintf_r+0x110>
 8002ef6:	eba0 0308 	sub.w	r3, r0, r8
 8002efa:	fa09 f303 	lsl.w	r3, r9, r3
 8002efe:	4313      	orrs	r3, r2
 8002f00:	9304      	str	r3, [sp, #16]
 8002f02:	46a2      	mov	sl, r4
 8002f04:	e7d2      	b.n	8002eac <_svfiprintf_r+0x9c>
 8002f06:	9b03      	ldr	r3, [sp, #12]
 8002f08:	1d19      	adds	r1, r3, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	9103      	str	r1, [sp, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bfbb      	ittet	lt
 8002f12:	425b      	neglt	r3, r3
 8002f14:	f042 0202 	orrlt.w	r2, r2, #2
 8002f18:	9307      	strge	r3, [sp, #28]
 8002f1a:	9307      	strlt	r3, [sp, #28]
 8002f1c:	bfb8      	it	lt
 8002f1e:	9204      	strlt	r2, [sp, #16]
 8002f20:	7823      	ldrb	r3, [r4, #0]
 8002f22:	2b2e      	cmp	r3, #46	; 0x2e
 8002f24:	d10c      	bne.n	8002f40 <_svfiprintf_r+0x130>
 8002f26:	7863      	ldrb	r3, [r4, #1]
 8002f28:	2b2a      	cmp	r3, #42	; 0x2a
 8002f2a:	d134      	bne.n	8002f96 <_svfiprintf_r+0x186>
 8002f2c:	9b03      	ldr	r3, [sp, #12]
 8002f2e:	1d1a      	adds	r2, r3, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	9203      	str	r2, [sp, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bfb8      	it	lt
 8002f38:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f3c:	3402      	adds	r4, #2
 8002f3e:	9305      	str	r3, [sp, #20]
 8002f40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003008 <_svfiprintf_r+0x1f8>
 8002f44:	7821      	ldrb	r1, [r4, #0]
 8002f46:	2203      	movs	r2, #3
 8002f48:	4650      	mov	r0, sl
 8002f4a:	f7fd f951 	bl	80001f0 <memchr>
 8002f4e:	b138      	cbz	r0, 8002f60 <_svfiprintf_r+0x150>
 8002f50:	9b04      	ldr	r3, [sp, #16]
 8002f52:	eba0 000a 	sub.w	r0, r0, sl
 8002f56:	2240      	movs	r2, #64	; 0x40
 8002f58:	4082      	lsls	r2, r0
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	3401      	adds	r4, #1
 8002f5e:	9304      	str	r3, [sp, #16]
 8002f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f64:	4825      	ldr	r0, [pc, #148]	; (8002ffc <_svfiprintf_r+0x1ec>)
 8002f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f6a:	2206      	movs	r2, #6
 8002f6c:	f7fd f940 	bl	80001f0 <memchr>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d038      	beq.n	8002fe6 <_svfiprintf_r+0x1d6>
 8002f74:	4b22      	ldr	r3, [pc, #136]	; (8003000 <_svfiprintf_r+0x1f0>)
 8002f76:	bb1b      	cbnz	r3, 8002fc0 <_svfiprintf_r+0x1b0>
 8002f78:	9b03      	ldr	r3, [sp, #12]
 8002f7a:	3307      	adds	r3, #7
 8002f7c:	f023 0307 	bic.w	r3, r3, #7
 8002f80:	3308      	adds	r3, #8
 8002f82:	9303      	str	r3, [sp, #12]
 8002f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f86:	4433      	add	r3, r6
 8002f88:	9309      	str	r3, [sp, #36]	; 0x24
 8002f8a:	e768      	b.n	8002e5e <_svfiprintf_r+0x4e>
 8002f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f90:	460c      	mov	r4, r1
 8002f92:	2001      	movs	r0, #1
 8002f94:	e7a6      	b.n	8002ee4 <_svfiprintf_r+0xd4>
 8002f96:	2300      	movs	r3, #0
 8002f98:	3401      	adds	r4, #1
 8002f9a:	9305      	str	r3, [sp, #20]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f04f 0c0a 	mov.w	ip, #10
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fa8:	3a30      	subs	r2, #48	; 0x30
 8002faa:	2a09      	cmp	r2, #9
 8002fac:	d903      	bls.n	8002fb6 <_svfiprintf_r+0x1a6>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0c6      	beq.n	8002f40 <_svfiprintf_r+0x130>
 8002fb2:	9105      	str	r1, [sp, #20]
 8002fb4:	e7c4      	b.n	8002f40 <_svfiprintf_r+0x130>
 8002fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fba:	4604      	mov	r4, r0
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e7f0      	b.n	8002fa2 <_svfiprintf_r+0x192>
 8002fc0:	ab03      	add	r3, sp, #12
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	462a      	mov	r2, r5
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <_svfiprintf_r+0x1f4>)
 8002fc8:	a904      	add	r1, sp, #16
 8002fca:	4638      	mov	r0, r7
 8002fcc:	f3af 8000 	nop.w
 8002fd0:	1c42      	adds	r2, r0, #1
 8002fd2:	4606      	mov	r6, r0
 8002fd4:	d1d6      	bne.n	8002f84 <_svfiprintf_r+0x174>
 8002fd6:	89ab      	ldrh	r3, [r5, #12]
 8002fd8:	065b      	lsls	r3, r3, #25
 8002fda:	f53f af2d 	bmi.w	8002e38 <_svfiprintf_r+0x28>
 8002fde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fe0:	b01d      	add	sp, #116	; 0x74
 8002fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe6:	ab03      	add	r3, sp, #12
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	462a      	mov	r2, r5
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <_svfiprintf_r+0x1f4>)
 8002fee:	a904      	add	r1, sp, #16
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	f000 f879 	bl	80030e8 <_printf_i>
 8002ff6:	e7eb      	b.n	8002fd0 <_svfiprintf_r+0x1c0>
 8002ff8:	080036e4 	.word	0x080036e4
 8002ffc:	080036ee 	.word	0x080036ee
 8003000:	00000000 	.word	0x00000000
 8003004:	08002d5d 	.word	0x08002d5d
 8003008:	080036ea 	.word	0x080036ea

0800300c <_printf_common>:
 800300c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003010:	4616      	mov	r6, r2
 8003012:	4699      	mov	r9, r3
 8003014:	688a      	ldr	r2, [r1, #8]
 8003016:	690b      	ldr	r3, [r1, #16]
 8003018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800301c:	4293      	cmp	r3, r2
 800301e:	bfb8      	it	lt
 8003020:	4613      	movlt	r3, r2
 8003022:	6033      	str	r3, [r6, #0]
 8003024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003028:	4607      	mov	r7, r0
 800302a:	460c      	mov	r4, r1
 800302c:	b10a      	cbz	r2, 8003032 <_printf_common+0x26>
 800302e:	3301      	adds	r3, #1
 8003030:	6033      	str	r3, [r6, #0]
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	0699      	lsls	r1, r3, #26
 8003036:	bf42      	ittt	mi
 8003038:	6833      	ldrmi	r3, [r6, #0]
 800303a:	3302      	addmi	r3, #2
 800303c:	6033      	strmi	r3, [r6, #0]
 800303e:	6825      	ldr	r5, [r4, #0]
 8003040:	f015 0506 	ands.w	r5, r5, #6
 8003044:	d106      	bne.n	8003054 <_printf_common+0x48>
 8003046:	f104 0a19 	add.w	sl, r4, #25
 800304a:	68e3      	ldr	r3, [r4, #12]
 800304c:	6832      	ldr	r2, [r6, #0]
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	42ab      	cmp	r3, r5
 8003052:	dc26      	bgt.n	80030a2 <_printf_common+0x96>
 8003054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003058:	1e13      	subs	r3, r2, #0
 800305a:	6822      	ldr	r2, [r4, #0]
 800305c:	bf18      	it	ne
 800305e:	2301      	movne	r3, #1
 8003060:	0692      	lsls	r2, r2, #26
 8003062:	d42b      	bmi.n	80030bc <_printf_common+0xb0>
 8003064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003068:	4649      	mov	r1, r9
 800306a:	4638      	mov	r0, r7
 800306c:	47c0      	blx	r8
 800306e:	3001      	adds	r0, #1
 8003070:	d01e      	beq.n	80030b0 <_printf_common+0xa4>
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	6922      	ldr	r2, [r4, #16]
 8003076:	f003 0306 	and.w	r3, r3, #6
 800307a:	2b04      	cmp	r3, #4
 800307c:	bf02      	ittt	eq
 800307e:	68e5      	ldreq	r5, [r4, #12]
 8003080:	6833      	ldreq	r3, [r6, #0]
 8003082:	1aed      	subeq	r5, r5, r3
 8003084:	68a3      	ldr	r3, [r4, #8]
 8003086:	bf0c      	ite	eq
 8003088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800308c:	2500      	movne	r5, #0
 800308e:	4293      	cmp	r3, r2
 8003090:	bfc4      	itt	gt
 8003092:	1a9b      	subgt	r3, r3, r2
 8003094:	18ed      	addgt	r5, r5, r3
 8003096:	2600      	movs	r6, #0
 8003098:	341a      	adds	r4, #26
 800309a:	42b5      	cmp	r5, r6
 800309c:	d11a      	bne.n	80030d4 <_printf_common+0xc8>
 800309e:	2000      	movs	r0, #0
 80030a0:	e008      	b.n	80030b4 <_printf_common+0xa8>
 80030a2:	2301      	movs	r3, #1
 80030a4:	4652      	mov	r2, sl
 80030a6:	4649      	mov	r1, r9
 80030a8:	4638      	mov	r0, r7
 80030aa:	47c0      	blx	r8
 80030ac:	3001      	adds	r0, #1
 80030ae:	d103      	bne.n	80030b8 <_printf_common+0xac>
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b8:	3501      	adds	r5, #1
 80030ba:	e7c6      	b.n	800304a <_printf_common+0x3e>
 80030bc:	18e1      	adds	r1, r4, r3
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	2030      	movs	r0, #48	; 0x30
 80030c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030c6:	4422      	add	r2, r4
 80030c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030d0:	3302      	adds	r3, #2
 80030d2:	e7c7      	b.n	8003064 <_printf_common+0x58>
 80030d4:	2301      	movs	r3, #1
 80030d6:	4622      	mov	r2, r4
 80030d8:	4649      	mov	r1, r9
 80030da:	4638      	mov	r0, r7
 80030dc:	47c0      	blx	r8
 80030de:	3001      	adds	r0, #1
 80030e0:	d0e6      	beq.n	80030b0 <_printf_common+0xa4>
 80030e2:	3601      	adds	r6, #1
 80030e4:	e7d9      	b.n	800309a <_printf_common+0x8e>
	...

080030e8 <_printf_i>:
 80030e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030ec:	7e0f      	ldrb	r7, [r1, #24]
 80030ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030f0:	2f78      	cmp	r7, #120	; 0x78
 80030f2:	4691      	mov	r9, r2
 80030f4:	4680      	mov	r8, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	469a      	mov	sl, r3
 80030fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030fe:	d807      	bhi.n	8003110 <_printf_i+0x28>
 8003100:	2f62      	cmp	r7, #98	; 0x62
 8003102:	d80a      	bhi.n	800311a <_printf_i+0x32>
 8003104:	2f00      	cmp	r7, #0
 8003106:	f000 80d4 	beq.w	80032b2 <_printf_i+0x1ca>
 800310a:	2f58      	cmp	r7, #88	; 0x58
 800310c:	f000 80c0 	beq.w	8003290 <_printf_i+0x1a8>
 8003110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003118:	e03a      	b.n	8003190 <_printf_i+0xa8>
 800311a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800311e:	2b15      	cmp	r3, #21
 8003120:	d8f6      	bhi.n	8003110 <_printf_i+0x28>
 8003122:	a101      	add	r1, pc, #4	; (adr r1, 8003128 <_printf_i+0x40>)
 8003124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003128:	08003181 	.word	0x08003181
 800312c:	08003195 	.word	0x08003195
 8003130:	08003111 	.word	0x08003111
 8003134:	08003111 	.word	0x08003111
 8003138:	08003111 	.word	0x08003111
 800313c:	08003111 	.word	0x08003111
 8003140:	08003195 	.word	0x08003195
 8003144:	08003111 	.word	0x08003111
 8003148:	08003111 	.word	0x08003111
 800314c:	08003111 	.word	0x08003111
 8003150:	08003111 	.word	0x08003111
 8003154:	08003299 	.word	0x08003299
 8003158:	080031c1 	.word	0x080031c1
 800315c:	08003253 	.word	0x08003253
 8003160:	08003111 	.word	0x08003111
 8003164:	08003111 	.word	0x08003111
 8003168:	080032bb 	.word	0x080032bb
 800316c:	08003111 	.word	0x08003111
 8003170:	080031c1 	.word	0x080031c1
 8003174:	08003111 	.word	0x08003111
 8003178:	08003111 	.word	0x08003111
 800317c:	0800325b 	.word	0x0800325b
 8003180:	682b      	ldr	r3, [r5, #0]
 8003182:	1d1a      	adds	r2, r3, #4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	602a      	str	r2, [r5, #0]
 8003188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800318c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003190:	2301      	movs	r3, #1
 8003192:	e09f      	b.n	80032d4 <_printf_i+0x1ec>
 8003194:	6820      	ldr	r0, [r4, #0]
 8003196:	682b      	ldr	r3, [r5, #0]
 8003198:	0607      	lsls	r7, r0, #24
 800319a:	f103 0104 	add.w	r1, r3, #4
 800319e:	6029      	str	r1, [r5, #0]
 80031a0:	d501      	bpl.n	80031a6 <_printf_i+0xbe>
 80031a2:	681e      	ldr	r6, [r3, #0]
 80031a4:	e003      	b.n	80031ae <_printf_i+0xc6>
 80031a6:	0646      	lsls	r6, r0, #25
 80031a8:	d5fb      	bpl.n	80031a2 <_printf_i+0xba>
 80031aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80031ae:	2e00      	cmp	r6, #0
 80031b0:	da03      	bge.n	80031ba <_printf_i+0xd2>
 80031b2:	232d      	movs	r3, #45	; 0x2d
 80031b4:	4276      	negs	r6, r6
 80031b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031ba:	485a      	ldr	r0, [pc, #360]	; (8003324 <_printf_i+0x23c>)
 80031bc:	230a      	movs	r3, #10
 80031be:	e012      	b.n	80031e6 <_printf_i+0xfe>
 80031c0:	682b      	ldr	r3, [r5, #0]
 80031c2:	6820      	ldr	r0, [r4, #0]
 80031c4:	1d19      	adds	r1, r3, #4
 80031c6:	6029      	str	r1, [r5, #0]
 80031c8:	0605      	lsls	r5, r0, #24
 80031ca:	d501      	bpl.n	80031d0 <_printf_i+0xe8>
 80031cc:	681e      	ldr	r6, [r3, #0]
 80031ce:	e002      	b.n	80031d6 <_printf_i+0xee>
 80031d0:	0641      	lsls	r1, r0, #25
 80031d2:	d5fb      	bpl.n	80031cc <_printf_i+0xe4>
 80031d4:	881e      	ldrh	r6, [r3, #0]
 80031d6:	4853      	ldr	r0, [pc, #332]	; (8003324 <_printf_i+0x23c>)
 80031d8:	2f6f      	cmp	r7, #111	; 0x6f
 80031da:	bf0c      	ite	eq
 80031dc:	2308      	moveq	r3, #8
 80031de:	230a      	movne	r3, #10
 80031e0:	2100      	movs	r1, #0
 80031e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031e6:	6865      	ldr	r5, [r4, #4]
 80031e8:	60a5      	str	r5, [r4, #8]
 80031ea:	2d00      	cmp	r5, #0
 80031ec:	bfa2      	ittt	ge
 80031ee:	6821      	ldrge	r1, [r4, #0]
 80031f0:	f021 0104 	bicge.w	r1, r1, #4
 80031f4:	6021      	strge	r1, [r4, #0]
 80031f6:	b90e      	cbnz	r6, 80031fc <_printf_i+0x114>
 80031f8:	2d00      	cmp	r5, #0
 80031fa:	d04b      	beq.n	8003294 <_printf_i+0x1ac>
 80031fc:	4615      	mov	r5, r2
 80031fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8003202:	fb03 6711 	mls	r7, r3, r1, r6
 8003206:	5dc7      	ldrb	r7, [r0, r7]
 8003208:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800320c:	4637      	mov	r7, r6
 800320e:	42bb      	cmp	r3, r7
 8003210:	460e      	mov	r6, r1
 8003212:	d9f4      	bls.n	80031fe <_printf_i+0x116>
 8003214:	2b08      	cmp	r3, #8
 8003216:	d10b      	bne.n	8003230 <_printf_i+0x148>
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	07de      	lsls	r6, r3, #31
 800321c:	d508      	bpl.n	8003230 <_printf_i+0x148>
 800321e:	6923      	ldr	r3, [r4, #16]
 8003220:	6861      	ldr	r1, [r4, #4]
 8003222:	4299      	cmp	r1, r3
 8003224:	bfde      	ittt	le
 8003226:	2330      	movle	r3, #48	; 0x30
 8003228:	f805 3c01 	strble.w	r3, [r5, #-1]
 800322c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003230:	1b52      	subs	r2, r2, r5
 8003232:	6122      	str	r2, [r4, #16]
 8003234:	f8cd a000 	str.w	sl, [sp]
 8003238:	464b      	mov	r3, r9
 800323a:	aa03      	add	r2, sp, #12
 800323c:	4621      	mov	r1, r4
 800323e:	4640      	mov	r0, r8
 8003240:	f7ff fee4 	bl	800300c <_printf_common>
 8003244:	3001      	adds	r0, #1
 8003246:	d14a      	bne.n	80032de <_printf_i+0x1f6>
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	b004      	add	sp, #16
 800324e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	f043 0320 	orr.w	r3, r3, #32
 8003258:	6023      	str	r3, [r4, #0]
 800325a:	4833      	ldr	r0, [pc, #204]	; (8003328 <_printf_i+0x240>)
 800325c:	2778      	movs	r7, #120	; 0x78
 800325e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	6829      	ldr	r1, [r5, #0]
 8003266:	061f      	lsls	r7, r3, #24
 8003268:	f851 6b04 	ldr.w	r6, [r1], #4
 800326c:	d402      	bmi.n	8003274 <_printf_i+0x18c>
 800326e:	065f      	lsls	r7, r3, #25
 8003270:	bf48      	it	mi
 8003272:	b2b6      	uxthmi	r6, r6
 8003274:	07df      	lsls	r7, r3, #31
 8003276:	bf48      	it	mi
 8003278:	f043 0320 	orrmi.w	r3, r3, #32
 800327c:	6029      	str	r1, [r5, #0]
 800327e:	bf48      	it	mi
 8003280:	6023      	strmi	r3, [r4, #0]
 8003282:	b91e      	cbnz	r6, 800328c <_printf_i+0x1a4>
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	f023 0320 	bic.w	r3, r3, #32
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	2310      	movs	r3, #16
 800328e:	e7a7      	b.n	80031e0 <_printf_i+0xf8>
 8003290:	4824      	ldr	r0, [pc, #144]	; (8003324 <_printf_i+0x23c>)
 8003292:	e7e4      	b.n	800325e <_printf_i+0x176>
 8003294:	4615      	mov	r5, r2
 8003296:	e7bd      	b.n	8003214 <_printf_i+0x12c>
 8003298:	682b      	ldr	r3, [r5, #0]
 800329a:	6826      	ldr	r6, [r4, #0]
 800329c:	6961      	ldr	r1, [r4, #20]
 800329e:	1d18      	adds	r0, r3, #4
 80032a0:	6028      	str	r0, [r5, #0]
 80032a2:	0635      	lsls	r5, r6, #24
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	d501      	bpl.n	80032ac <_printf_i+0x1c4>
 80032a8:	6019      	str	r1, [r3, #0]
 80032aa:	e002      	b.n	80032b2 <_printf_i+0x1ca>
 80032ac:	0670      	lsls	r0, r6, #25
 80032ae:	d5fb      	bpl.n	80032a8 <_printf_i+0x1c0>
 80032b0:	8019      	strh	r1, [r3, #0]
 80032b2:	2300      	movs	r3, #0
 80032b4:	6123      	str	r3, [r4, #16]
 80032b6:	4615      	mov	r5, r2
 80032b8:	e7bc      	b.n	8003234 <_printf_i+0x14c>
 80032ba:	682b      	ldr	r3, [r5, #0]
 80032bc:	1d1a      	adds	r2, r3, #4
 80032be:	602a      	str	r2, [r5, #0]
 80032c0:	681d      	ldr	r5, [r3, #0]
 80032c2:	6862      	ldr	r2, [r4, #4]
 80032c4:	2100      	movs	r1, #0
 80032c6:	4628      	mov	r0, r5
 80032c8:	f7fc ff92 	bl	80001f0 <memchr>
 80032cc:	b108      	cbz	r0, 80032d2 <_printf_i+0x1ea>
 80032ce:	1b40      	subs	r0, r0, r5
 80032d0:	6060      	str	r0, [r4, #4]
 80032d2:	6863      	ldr	r3, [r4, #4]
 80032d4:	6123      	str	r3, [r4, #16]
 80032d6:	2300      	movs	r3, #0
 80032d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032dc:	e7aa      	b.n	8003234 <_printf_i+0x14c>
 80032de:	6923      	ldr	r3, [r4, #16]
 80032e0:	462a      	mov	r2, r5
 80032e2:	4649      	mov	r1, r9
 80032e4:	4640      	mov	r0, r8
 80032e6:	47d0      	blx	sl
 80032e8:	3001      	adds	r0, #1
 80032ea:	d0ad      	beq.n	8003248 <_printf_i+0x160>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	079b      	lsls	r3, r3, #30
 80032f0:	d413      	bmi.n	800331a <_printf_i+0x232>
 80032f2:	68e0      	ldr	r0, [r4, #12]
 80032f4:	9b03      	ldr	r3, [sp, #12]
 80032f6:	4298      	cmp	r0, r3
 80032f8:	bfb8      	it	lt
 80032fa:	4618      	movlt	r0, r3
 80032fc:	e7a6      	b.n	800324c <_printf_i+0x164>
 80032fe:	2301      	movs	r3, #1
 8003300:	4632      	mov	r2, r6
 8003302:	4649      	mov	r1, r9
 8003304:	4640      	mov	r0, r8
 8003306:	47d0      	blx	sl
 8003308:	3001      	adds	r0, #1
 800330a:	d09d      	beq.n	8003248 <_printf_i+0x160>
 800330c:	3501      	adds	r5, #1
 800330e:	68e3      	ldr	r3, [r4, #12]
 8003310:	9903      	ldr	r1, [sp, #12]
 8003312:	1a5b      	subs	r3, r3, r1
 8003314:	42ab      	cmp	r3, r5
 8003316:	dcf2      	bgt.n	80032fe <_printf_i+0x216>
 8003318:	e7eb      	b.n	80032f2 <_printf_i+0x20a>
 800331a:	2500      	movs	r5, #0
 800331c:	f104 0619 	add.w	r6, r4, #25
 8003320:	e7f5      	b.n	800330e <_printf_i+0x226>
 8003322:	bf00      	nop
 8003324:	080036f5 	.word	0x080036f5
 8003328:	08003706 	.word	0x08003706

0800332c <__sflush_r>:
 800332c:	898a      	ldrh	r2, [r1, #12]
 800332e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003332:	4605      	mov	r5, r0
 8003334:	0710      	lsls	r0, r2, #28
 8003336:	460c      	mov	r4, r1
 8003338:	d458      	bmi.n	80033ec <__sflush_r+0xc0>
 800333a:	684b      	ldr	r3, [r1, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	dc05      	bgt.n	800334c <__sflush_r+0x20>
 8003340:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	dc02      	bgt.n	800334c <__sflush_r+0x20>
 8003346:	2000      	movs	r0, #0
 8003348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800334c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800334e:	2e00      	cmp	r6, #0
 8003350:	d0f9      	beq.n	8003346 <__sflush_r+0x1a>
 8003352:	2300      	movs	r3, #0
 8003354:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003358:	682f      	ldr	r7, [r5, #0]
 800335a:	6a21      	ldr	r1, [r4, #32]
 800335c:	602b      	str	r3, [r5, #0]
 800335e:	d032      	beq.n	80033c6 <__sflush_r+0x9a>
 8003360:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003362:	89a3      	ldrh	r3, [r4, #12]
 8003364:	075a      	lsls	r2, r3, #29
 8003366:	d505      	bpl.n	8003374 <__sflush_r+0x48>
 8003368:	6863      	ldr	r3, [r4, #4]
 800336a:	1ac0      	subs	r0, r0, r3
 800336c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800336e:	b10b      	cbz	r3, 8003374 <__sflush_r+0x48>
 8003370:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003372:	1ac0      	subs	r0, r0, r3
 8003374:	2300      	movs	r3, #0
 8003376:	4602      	mov	r2, r0
 8003378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800337a:	6a21      	ldr	r1, [r4, #32]
 800337c:	4628      	mov	r0, r5
 800337e:	47b0      	blx	r6
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	89a3      	ldrh	r3, [r4, #12]
 8003384:	d106      	bne.n	8003394 <__sflush_r+0x68>
 8003386:	6829      	ldr	r1, [r5, #0]
 8003388:	291d      	cmp	r1, #29
 800338a:	d82b      	bhi.n	80033e4 <__sflush_r+0xb8>
 800338c:	4a29      	ldr	r2, [pc, #164]	; (8003434 <__sflush_r+0x108>)
 800338e:	410a      	asrs	r2, r1
 8003390:	07d6      	lsls	r6, r2, #31
 8003392:	d427      	bmi.n	80033e4 <__sflush_r+0xb8>
 8003394:	2200      	movs	r2, #0
 8003396:	6062      	str	r2, [r4, #4]
 8003398:	04d9      	lsls	r1, r3, #19
 800339a:	6922      	ldr	r2, [r4, #16]
 800339c:	6022      	str	r2, [r4, #0]
 800339e:	d504      	bpl.n	80033aa <__sflush_r+0x7e>
 80033a0:	1c42      	adds	r2, r0, #1
 80033a2:	d101      	bne.n	80033a8 <__sflush_r+0x7c>
 80033a4:	682b      	ldr	r3, [r5, #0]
 80033a6:	b903      	cbnz	r3, 80033aa <__sflush_r+0x7e>
 80033a8:	6560      	str	r0, [r4, #84]	; 0x54
 80033aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033ac:	602f      	str	r7, [r5, #0]
 80033ae:	2900      	cmp	r1, #0
 80033b0:	d0c9      	beq.n	8003346 <__sflush_r+0x1a>
 80033b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033b6:	4299      	cmp	r1, r3
 80033b8:	d002      	beq.n	80033c0 <__sflush_r+0x94>
 80033ba:	4628      	mov	r0, r5
 80033bc:	f7ff fc82 	bl	8002cc4 <_free_r>
 80033c0:	2000      	movs	r0, #0
 80033c2:	6360      	str	r0, [r4, #52]	; 0x34
 80033c4:	e7c0      	b.n	8003348 <__sflush_r+0x1c>
 80033c6:	2301      	movs	r3, #1
 80033c8:	4628      	mov	r0, r5
 80033ca:	47b0      	blx	r6
 80033cc:	1c41      	adds	r1, r0, #1
 80033ce:	d1c8      	bne.n	8003362 <__sflush_r+0x36>
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0c5      	beq.n	8003362 <__sflush_r+0x36>
 80033d6:	2b1d      	cmp	r3, #29
 80033d8:	d001      	beq.n	80033de <__sflush_r+0xb2>
 80033da:	2b16      	cmp	r3, #22
 80033dc:	d101      	bne.n	80033e2 <__sflush_r+0xb6>
 80033de:	602f      	str	r7, [r5, #0]
 80033e0:	e7b1      	b.n	8003346 <__sflush_r+0x1a>
 80033e2:	89a3      	ldrh	r3, [r4, #12]
 80033e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e8:	81a3      	strh	r3, [r4, #12]
 80033ea:	e7ad      	b.n	8003348 <__sflush_r+0x1c>
 80033ec:	690f      	ldr	r7, [r1, #16]
 80033ee:	2f00      	cmp	r7, #0
 80033f0:	d0a9      	beq.n	8003346 <__sflush_r+0x1a>
 80033f2:	0793      	lsls	r3, r2, #30
 80033f4:	680e      	ldr	r6, [r1, #0]
 80033f6:	bf08      	it	eq
 80033f8:	694b      	ldreq	r3, [r1, #20]
 80033fa:	600f      	str	r7, [r1, #0]
 80033fc:	bf18      	it	ne
 80033fe:	2300      	movne	r3, #0
 8003400:	eba6 0807 	sub.w	r8, r6, r7
 8003404:	608b      	str	r3, [r1, #8]
 8003406:	f1b8 0f00 	cmp.w	r8, #0
 800340a:	dd9c      	ble.n	8003346 <__sflush_r+0x1a>
 800340c:	6a21      	ldr	r1, [r4, #32]
 800340e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003410:	4643      	mov	r3, r8
 8003412:	463a      	mov	r2, r7
 8003414:	4628      	mov	r0, r5
 8003416:	47b0      	blx	r6
 8003418:	2800      	cmp	r0, #0
 800341a:	dc06      	bgt.n	800342a <__sflush_r+0xfe>
 800341c:	89a3      	ldrh	r3, [r4, #12]
 800341e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003422:	81a3      	strh	r3, [r4, #12]
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	e78e      	b.n	8003348 <__sflush_r+0x1c>
 800342a:	4407      	add	r7, r0
 800342c:	eba8 0800 	sub.w	r8, r8, r0
 8003430:	e7e9      	b.n	8003406 <__sflush_r+0xda>
 8003432:	bf00      	nop
 8003434:	dfbffffe 	.word	0xdfbffffe

08003438 <_fflush_r>:
 8003438:	b538      	push	{r3, r4, r5, lr}
 800343a:	690b      	ldr	r3, [r1, #16]
 800343c:	4605      	mov	r5, r0
 800343e:	460c      	mov	r4, r1
 8003440:	b913      	cbnz	r3, 8003448 <_fflush_r+0x10>
 8003442:	2500      	movs	r5, #0
 8003444:	4628      	mov	r0, r5
 8003446:	bd38      	pop	{r3, r4, r5, pc}
 8003448:	b118      	cbz	r0, 8003452 <_fflush_r+0x1a>
 800344a:	6a03      	ldr	r3, [r0, #32]
 800344c:	b90b      	cbnz	r3, 8003452 <_fflush_r+0x1a>
 800344e:	f7ff fa23 	bl	8002898 <__sinit>
 8003452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f3      	beq.n	8003442 <_fflush_r+0xa>
 800345a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800345c:	07d0      	lsls	r0, r2, #31
 800345e:	d404      	bmi.n	800346a <_fflush_r+0x32>
 8003460:	0599      	lsls	r1, r3, #22
 8003462:	d402      	bmi.n	800346a <_fflush_r+0x32>
 8003464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003466:	f7ff fc2a 	bl	8002cbe <__retarget_lock_acquire_recursive>
 800346a:	4628      	mov	r0, r5
 800346c:	4621      	mov	r1, r4
 800346e:	f7ff ff5d 	bl	800332c <__sflush_r>
 8003472:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003474:	07da      	lsls	r2, r3, #31
 8003476:	4605      	mov	r5, r0
 8003478:	d4e4      	bmi.n	8003444 <_fflush_r+0xc>
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	059b      	lsls	r3, r3, #22
 800347e:	d4e1      	bmi.n	8003444 <_fflush_r+0xc>
 8003480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003482:	f7ff fc1d 	bl	8002cc0 <__retarget_lock_release_recursive>
 8003486:	e7dd      	b.n	8003444 <_fflush_r+0xc>

08003488 <__swhatbuf_r>:
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	460c      	mov	r4, r1
 800348c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003490:	2900      	cmp	r1, #0
 8003492:	b096      	sub	sp, #88	; 0x58
 8003494:	4615      	mov	r5, r2
 8003496:	461e      	mov	r6, r3
 8003498:	da0d      	bge.n	80034b6 <__swhatbuf_r+0x2e>
 800349a:	89a3      	ldrh	r3, [r4, #12]
 800349c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	bf0c      	ite	eq
 80034a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80034aa:	2340      	movne	r3, #64	; 0x40
 80034ac:	2000      	movs	r0, #0
 80034ae:	6031      	str	r1, [r6, #0]
 80034b0:	602b      	str	r3, [r5, #0]
 80034b2:	b016      	add	sp, #88	; 0x58
 80034b4:	bd70      	pop	{r4, r5, r6, pc}
 80034b6:	466a      	mov	r2, sp
 80034b8:	f000 f862 	bl	8003580 <_fstat_r>
 80034bc:	2800      	cmp	r0, #0
 80034be:	dbec      	blt.n	800349a <__swhatbuf_r+0x12>
 80034c0:	9901      	ldr	r1, [sp, #4]
 80034c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80034c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80034ca:	4259      	negs	r1, r3
 80034cc:	4159      	adcs	r1, r3
 80034ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d2:	e7eb      	b.n	80034ac <__swhatbuf_r+0x24>

080034d4 <__smakebuf_r>:
 80034d4:	898b      	ldrh	r3, [r1, #12]
 80034d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034d8:	079d      	lsls	r5, r3, #30
 80034da:	4606      	mov	r6, r0
 80034dc:	460c      	mov	r4, r1
 80034de:	d507      	bpl.n	80034f0 <__smakebuf_r+0x1c>
 80034e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	6123      	str	r3, [r4, #16]
 80034e8:	2301      	movs	r3, #1
 80034ea:	6163      	str	r3, [r4, #20]
 80034ec:	b002      	add	sp, #8
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	ab01      	add	r3, sp, #4
 80034f2:	466a      	mov	r2, sp
 80034f4:	f7ff ffc8 	bl	8003488 <__swhatbuf_r>
 80034f8:	9900      	ldr	r1, [sp, #0]
 80034fa:	4605      	mov	r5, r0
 80034fc:	4630      	mov	r0, r6
 80034fe:	f7ff f8b3 	bl	8002668 <_malloc_r>
 8003502:	b948      	cbnz	r0, 8003518 <__smakebuf_r+0x44>
 8003504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003508:	059a      	lsls	r2, r3, #22
 800350a:	d4ef      	bmi.n	80034ec <__smakebuf_r+0x18>
 800350c:	f023 0303 	bic.w	r3, r3, #3
 8003510:	f043 0302 	orr.w	r3, r3, #2
 8003514:	81a3      	strh	r3, [r4, #12]
 8003516:	e7e3      	b.n	80034e0 <__smakebuf_r+0xc>
 8003518:	89a3      	ldrh	r3, [r4, #12]
 800351a:	6020      	str	r0, [r4, #0]
 800351c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003520:	81a3      	strh	r3, [r4, #12]
 8003522:	9b00      	ldr	r3, [sp, #0]
 8003524:	6163      	str	r3, [r4, #20]
 8003526:	9b01      	ldr	r3, [sp, #4]
 8003528:	6120      	str	r0, [r4, #16]
 800352a:	b15b      	cbz	r3, 8003544 <__smakebuf_r+0x70>
 800352c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003530:	4630      	mov	r0, r6
 8003532:	f000 f837 	bl	80035a4 <_isatty_r>
 8003536:	b128      	cbz	r0, 8003544 <__smakebuf_r+0x70>
 8003538:	89a3      	ldrh	r3, [r4, #12]
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	81a3      	strh	r3, [r4, #12]
 8003544:	89a3      	ldrh	r3, [r4, #12]
 8003546:	431d      	orrs	r5, r3
 8003548:	81a5      	strh	r5, [r4, #12]
 800354a:	e7cf      	b.n	80034ec <__smakebuf_r+0x18>

0800354c <memmove>:
 800354c:	4288      	cmp	r0, r1
 800354e:	b510      	push	{r4, lr}
 8003550:	eb01 0402 	add.w	r4, r1, r2
 8003554:	d902      	bls.n	800355c <memmove+0x10>
 8003556:	4284      	cmp	r4, r0
 8003558:	4623      	mov	r3, r4
 800355a:	d807      	bhi.n	800356c <memmove+0x20>
 800355c:	1e43      	subs	r3, r0, #1
 800355e:	42a1      	cmp	r1, r4
 8003560:	d008      	beq.n	8003574 <memmove+0x28>
 8003562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800356a:	e7f8      	b.n	800355e <memmove+0x12>
 800356c:	4402      	add	r2, r0
 800356e:	4601      	mov	r1, r0
 8003570:	428a      	cmp	r2, r1
 8003572:	d100      	bne.n	8003576 <memmove+0x2a>
 8003574:	bd10      	pop	{r4, pc}
 8003576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800357a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800357e:	e7f7      	b.n	8003570 <memmove+0x24>

08003580 <_fstat_r>:
 8003580:	b538      	push	{r3, r4, r5, lr}
 8003582:	4d07      	ldr	r5, [pc, #28]	; (80035a0 <_fstat_r+0x20>)
 8003584:	2300      	movs	r3, #0
 8003586:	4604      	mov	r4, r0
 8003588:	4608      	mov	r0, r1
 800358a:	4611      	mov	r1, r2
 800358c:	602b      	str	r3, [r5, #0]
 800358e:	f7fd fcf6 	bl	8000f7e <_fstat>
 8003592:	1c43      	adds	r3, r0, #1
 8003594:	d102      	bne.n	800359c <_fstat_r+0x1c>
 8003596:	682b      	ldr	r3, [r5, #0]
 8003598:	b103      	cbz	r3, 800359c <_fstat_r+0x1c>
 800359a:	6023      	str	r3, [r4, #0]
 800359c:	bd38      	pop	{r3, r4, r5, pc}
 800359e:	bf00      	nop
 80035a0:	20000218 	.word	0x20000218

080035a4 <_isatty_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4d06      	ldr	r5, [pc, #24]	; (80035c0 <_isatty_r+0x1c>)
 80035a8:	2300      	movs	r3, #0
 80035aa:	4604      	mov	r4, r0
 80035ac:	4608      	mov	r0, r1
 80035ae:	602b      	str	r3, [r5, #0]
 80035b0:	f7fd fcf5 	bl	8000f9e <_isatty>
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	d102      	bne.n	80035be <_isatty_r+0x1a>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	b103      	cbz	r3, 80035be <_isatty_r+0x1a>
 80035bc:	6023      	str	r3, [r4, #0]
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	20000218 	.word	0x20000218

080035c4 <memcpy>:
 80035c4:	440a      	add	r2, r1
 80035c6:	4291      	cmp	r1, r2
 80035c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80035cc:	d100      	bne.n	80035d0 <memcpy+0xc>
 80035ce:	4770      	bx	lr
 80035d0:	b510      	push	{r4, lr}
 80035d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035da:	4291      	cmp	r1, r2
 80035dc:	d1f9      	bne.n	80035d2 <memcpy+0xe>
 80035de:	bd10      	pop	{r4, pc}

080035e0 <_realloc_r>:
 80035e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e4:	4680      	mov	r8, r0
 80035e6:	4614      	mov	r4, r2
 80035e8:	460e      	mov	r6, r1
 80035ea:	b921      	cbnz	r1, 80035f6 <_realloc_r+0x16>
 80035ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035f0:	4611      	mov	r1, r2
 80035f2:	f7ff b839 	b.w	8002668 <_malloc_r>
 80035f6:	b92a      	cbnz	r2, 8003604 <_realloc_r+0x24>
 80035f8:	f7ff fb64 	bl	8002cc4 <_free_r>
 80035fc:	4625      	mov	r5, r4
 80035fe:	4628      	mov	r0, r5
 8003600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003604:	f000 f81b 	bl	800363e <_malloc_usable_size_r>
 8003608:	4284      	cmp	r4, r0
 800360a:	4607      	mov	r7, r0
 800360c:	d802      	bhi.n	8003614 <_realloc_r+0x34>
 800360e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003612:	d812      	bhi.n	800363a <_realloc_r+0x5a>
 8003614:	4621      	mov	r1, r4
 8003616:	4640      	mov	r0, r8
 8003618:	f7ff f826 	bl	8002668 <_malloc_r>
 800361c:	4605      	mov	r5, r0
 800361e:	2800      	cmp	r0, #0
 8003620:	d0ed      	beq.n	80035fe <_realloc_r+0x1e>
 8003622:	42bc      	cmp	r4, r7
 8003624:	4622      	mov	r2, r4
 8003626:	4631      	mov	r1, r6
 8003628:	bf28      	it	cs
 800362a:	463a      	movcs	r2, r7
 800362c:	f7ff ffca 	bl	80035c4 <memcpy>
 8003630:	4631      	mov	r1, r6
 8003632:	4640      	mov	r0, r8
 8003634:	f7ff fb46 	bl	8002cc4 <_free_r>
 8003638:	e7e1      	b.n	80035fe <_realloc_r+0x1e>
 800363a:	4635      	mov	r5, r6
 800363c:	e7df      	b.n	80035fe <_realloc_r+0x1e>

0800363e <_malloc_usable_size_r>:
 800363e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003642:	1f18      	subs	r0, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	bfbc      	itt	lt
 8003648:	580b      	ldrlt	r3, [r1, r0]
 800364a:	18c0      	addlt	r0, r0, r3
 800364c:	4770      	bx	lr
	...

08003650 <_init>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	bf00      	nop
 8003654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003656:	bc08      	pop	{r3}
 8003658:	469e      	mov	lr, r3
 800365a:	4770      	bx	lr

0800365c <_fini>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	bf00      	nop
 8003660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003662:	bc08      	pop	{r3}
 8003664:	469e      	mov	lr, r3
 8003666:	4770      	bx	lr
